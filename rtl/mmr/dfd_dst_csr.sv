// SPDX-FileCopyrightText: Copyright 2025 Tenstorrent AI ULC
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Registers
 *
 * This file was AUTO-GENERATED by this script:
 *       create_reg_rtl.py
 * ... from this input file:
 *       dst_mmrs.py
 * ... using this as the top address space:
 *       dst
 *
 * This file should not be modified by hand.
 *
 ******************************************************************************/

module dfd_dst_csr
import dfd_dst_csr_pkg::*;
`include "dst_csr_pkg_list.svh"
#(
    parameter BASE_ADDR    = 0,                 // base address
    parameter ADDR_W       = 23,                // bit width of address
    parameter FLOP_IN_REQ  = 1,                 // add flop stage to bus inputs?
    parameter FLOP_RD_DATA = 1,                 // add flop stage to output rd data?
    parameter INSTR_TYPE_W = 2                  // write instr_type

) (

// Global Interface
input  logic                                    clk,
input  logic                                    reset_n,

// Register Bus
input  logic                                    CsrCs,
input  logic                                    CsrWrEn,
input  logic                        [1:0]       CsrWrStrb,
input  logic                                    CsrRegSel,
input  logic                       [ADDR_W-1:0] CsrAddr,
input  logic                             [31:0] CsrWrData,
input  logic                 [INSTR_TYPE_W-1:0] CsrWrInstrType,
output logic                                    CsrWrReady,
output logic                                    CsrHit,
output DstCsrHit_s                              CsrHitList,
output logic                             [31:0] CsrRdData,

// Registers
output Cr4BTrdstcontrolCsr_s                    Cr4BCsrTrdstcontrol,
output Cr4BTrdstimplCsr_s                       Cr4BCsrTrdstimpl,
output Cr4BTrdstinstfeaturesCsr_s               Cr4BCsrTrdstinstfeatures,
output Cr4BCdbgdebugtracecfgCsr_s               Cr4BCsrCdbgdebugtracecfg,

// HW Write Ports
input Cr4BTrdstcontrolCsrWr_s                   Cr4BCsrTrdstcontrolWr,
// Write Broadcast Bus
output logic                                    CsrUpdateEn,
output logic                       [ADDR_W-1:0] CsrUpdateAddr,
output logic                             [31:0] CsrUpdateData

);


////////////////////////////////////////////////////////////////////////////////
// Internal Parameters
////////////////////////////////////////////////////////////////////////////////

// Addresses
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTCONTROL          = ADDR_W'(BASE_ADDR + 'h1000);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTIMPL             = ADDR_W'(BASE_ADDR + 'h1004);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTINSTFEATURES     = ADDR_W'(BASE_ADDR + 'h1008);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGDEBUGTRACECFG     = ADDR_W'(BASE_ADDR + 'h11A0);



////////////////////////////////////////////////////////////////////////////////
// Signal Declarations
////////////////////////////////////////////////////////////////////////////////

logic                       reg_cs;
logic                       reg_wr_en;
logic           [1:0]       reg_wr_strb;
logic          [ADDR_W-1:0] reg_addr;
logic                       reg_wr_sel;
logic                       reg_rd_sel;
logic                [31:0] reg_wr_data;
logic    [INSTR_TYPE_W-1:0] reg_wr_instr_type;

logic                       reg_wr_ready;
DstCsrHit_s                 reg_prehit;
logic                       reg_hit;
logic                [31:0] reg_rd_data;

logic                       reg_write;
logic                       reg_read;

logic          [ADDR_W-1:0] reg_addr_d1;
logic                       reg_write_d1;
logic                [31:0] reg_rd_data_d1;

// Registers
logic                [31:0] CSR_Trdstcontrol;
logic                [31:0] CSR_Trdstimpl;
logic                [31:0] CSR_Trdstinstfeatures;
logic                [31:0] CSR_CDbgDebugTraceCfg;

// Fields
logic                 [2:0] CSR_Trdstcontrol_F_Trdstformat;
logic                 [3:0] CSR_Trdstcontrol_F_Trdstsyncmax;
logic                 [1:0] CSR_Trdstcontrol_F_Trdstsyncmode;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstinhibitsrc;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstinststallena;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstinststalloroverflow;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstinsttriggerenable;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstcontext;
logic                 [2:0] CSR_Trdstcontrol_F_Trdstinstmode;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstempty;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstinsttracing;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstenable;
logic                 [0:0] CSR_Trdstcontrol_F_Trdstactive;
logic                 [2:0] CSR_Trdstimpl_F_Trdstvendorstreamlength;
logic                 [3:0] CSR_Trdstimpl_F_Trdstvendorframelength;
logic                 [3:0] CSR_Trdstimpl_F_Trdstprotocolminor;
logic                 [3:0] CSR_Trdstimpl_F_Trdstprotocolmajor;
logic                 [3:0] CSR_Trdstimpl_F_Trdstcomptype;
logic                 [3:0] CSR_Trdstimpl_F_Trdstverminor;
logic                 [3:0] CSR_Trdstimpl_F_Trdstvermajor;
logic                 [3:0] CSR_Trdstinstfeatures_F_Trdstsrcbits;
logic                [11:0] CSR_Trdstinstfeatures_F_Trdstsrcid;
logic                 [0:0] CSR_Trdstinstfeatures_F_Trdstinstenrepeatedhistory;
logic                 [0:0] CSR_Trdstinstfeatures_F_Trdstinstnotrapaddr;
logic                 [0:0] CSR_Trdstinstfeatures_F_Trdstinstnoaddrdiff;
logic                 [0:0] CSR_CDbgDebugTraceCfg_F_FrameClosureMode;
logic                 [0:0] CSR_CDbgDebugTraceCfg_F_FrameModeEnable;
logic                 [3:0] CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes;
logic                 [7:0] CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte;
logic                 [3:0] CSR_CDbgDebugTraceCfg_F_TraceSourceId;



////////////////////////////////////////////////////////////////////////////////
// Main Module Functionality
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Inputs
//------------------------------------------------------------------------------

if (FLOP_IN_REQ) begin : flop_in_req
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_cs_ff             (.out(reg_cs)   , .in(CsrCs)    , .en(CsrCs|reg_cs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_en_ff          (.out(reg_wr_en), .in(CsrWrEn)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(2)           , .RESET_VALUE(0)) reg_wr_strb_ff        (.out(reg_wr_strb), .in(CsrWrStrb)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(ADDR_W)      , .RESET_VALUE(0)) reg_addr_ff           (.out(reg_addr) , .in(CsrAddr)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32)          , .RESET_VALUE(0)) reg_wr_data_ff        (.out(reg_wr_data), .in(CsrWrData), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_rd_sel_ff         (.out(reg_rd_sel)  , .in(~CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_sel_ff         (.out(reg_wr_sel)  , .in(CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));    
    generic_dff #(.WIDTH(INSTR_TYPE_W), .RESET_VALUE(0)) reg_wr_instr_type_ff  (.out(reg_wr_instr_type), .in(CsrWrInstrType), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_ready_ff       (.out(reg_wr_ready), .in(CsrCs & CsrWrEn), .en(CsrCs), .clk(clk), .rst_n(reset_n));
end else begin
    assign reg_cs             = CsrCs;
    assign reg_wr_en          = CsrWrEn;
    assign reg_wr_strb        = CsrWrStrb;
    assign reg_addr           = CsrAddr;
    assign reg_wr_data        = CsrWrData;
    assign reg_rd_sel         = ~CsrRegSel;
    assign reg_wr_sel         = CsrRegSel;
    assign reg_wr_instr_type  = CsrWrInstrType;
    assign reg_wr_ready       = CsrCs & CsrWrEn;
end

assign reg_write    = reg_cs &  reg_wr_en;
assign reg_read     = reg_cs;

generic_dff #(.WIDTH(ADDR_W), .RESET_VALUE(0)) reg_addr_d1_ff (.out(reg_addr_d1) , .in(reg_addr) , .en(reg_cs), .clk(clk), .rst_n(reset_n));
generic_dff #(.WIDTH(1)     , .RESET_VALUE(0)) reg_wren_d1_ff (.out(reg_write_d1), .in(reg_write), .en(reg_cs | reg_write_d1), .clk(clk), .rst_n(reset_n));


//------------------------------------------------------------------------------
// Register Writes and Counters
//------------------------------------------------------------------------------


//Register: CSR_TRDSTCONTROL
logic                                           CSR_Trdstcontrol_F_Trdstformat_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTFORMAT_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstformat_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTFORMAT_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstformat_DataEff;
assign CSR_Trdstcontrol_F_Trdstformat_DataEff = {reg_wr_data[26:24]};
assign CSR_Trdstcontrol_F_Trdstformat_Data = (CR_4B_TRDSTCONTROL_TRDSTFORMAT_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstformat), 64'(CSR_Trdstcontrol_F_Trdstformat_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstformat_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTFORMAT_WIDTH), .RESET_VALUE(3'h3)) CSR_Trdstcontrol_F_Trdstformat_ff   (.out(CSR_Trdstcontrol_F_Trdstformat), .in(CSR_Trdstcontrol_F_Trdstformat_Data), .en(CSR_Trdstcontrol_F_Trdstformat_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstcontrol_F_Trdstsyncmax_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTSYNCMAX_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstsyncmax_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTSYNCMAX_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstsyncmax_DataEff;
assign CSR_Trdstcontrol_F_Trdstsyncmax_DataEff = {reg_wr_data[23:20]};
assign CSR_Trdstcontrol_F_Trdstsyncmax_Data = (CR_4B_TRDSTCONTROL_TRDSTSYNCMAX_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstsyncmax), 64'(CSR_Trdstcontrol_F_Trdstsyncmax_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstsyncmax_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTSYNCMAX_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstsyncmax_ff   (.out(CSR_Trdstcontrol_F_Trdstsyncmax), .in(CSR_Trdstcontrol_F_Trdstsyncmax_Data), .en(CSR_Trdstcontrol_F_Trdstsyncmax_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstcontrol_F_Trdstsyncmode_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTSYNCMODE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstsyncmode_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTSYNCMODE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstsyncmode_DataEff;
assign CSR_Trdstcontrol_F_Trdstsyncmode_DataEff = {reg_wr_data[17:16]};
assign CSR_Trdstcontrol_F_Trdstsyncmode_Data = (CR_4B_TRDSTCONTROL_TRDSTSYNCMODE_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstsyncmode), 64'(CSR_Trdstcontrol_F_Trdstsyncmode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstsyncmode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTSYNCMODE_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstsyncmode_ff   (.out(CSR_Trdstcontrol_F_Trdstsyncmode), .in(CSR_Trdstcontrol_F_Trdstsyncmode_Data), .en(CSR_Trdstcontrol_F_Trdstsyncmode_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstcontrol_F_Trdstinhibitsrc = 1'h0;

assign CSR_Trdstcontrol_F_Trdstinststallena = 1'h0;

assign CSR_Trdstcontrol_F_Trdstinststalloroverflow = 1'h0;

logic                                           CSR_Trdstcontrol_F_Trdstinsttriggerenable_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTINSTTRIGGERENABLE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstinsttriggerenable_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTINSTTRIGGERENABLE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstinsttriggerenable_DataEff;
assign CSR_Trdstcontrol_F_Trdstinsttriggerenable_DataEff = {reg_wr_data[11:11]};
assign CSR_Trdstcontrol_F_Trdstinsttriggerenable_Data = (CR_4B_TRDSTCONTROL_TRDSTINSTTRIGGERENABLE_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstinsttriggerenable), 64'(CSR_Trdstcontrol_F_Trdstinsttriggerenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstinsttriggerenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTINSTTRIGGERENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstinsttriggerenable_ff   (.out(CSR_Trdstcontrol_F_Trdstinsttriggerenable), .in(CSR_Trdstcontrol_F_Trdstinsttriggerenable_Data), .en(CSR_Trdstcontrol_F_Trdstinsttriggerenable_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstcontrol_F_Trdstcontext = 1'h0;

assign CSR_Trdstcontrol_F_Trdstinstmode = 3'h6;

logic                                           CSR_Trdstcontrol_F_Trdstempty_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTEMPTY_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstempty_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTEMPTY_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstempty_DataEff;
assign CSR_Trdstcontrol_F_Trdstempty_DataEff = {reg_wr_data[3:3]};
assign CSR_Trdstcontrol_F_Trdstempty_Data = (Cr4BCsrTrdstcontrolWr.Data.Trdstempty);
assign CSR_Trdstcontrol_F_Trdstempty_WrEn = ((Cr4BCsrTrdstcontrolWr.TrdstemptyWrEn));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTEMPTY_WIDTH), .RESET_VALUE(1)) CSR_Trdstcontrol_F_Trdstempty_ff   (.out(CSR_Trdstcontrol_F_Trdstempty), .in(CSR_Trdstcontrol_F_Trdstempty_Data), .en(CSR_Trdstcontrol_F_Trdstempty_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstcontrol_F_Trdstinsttracing_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTINSTTRACING_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstinsttracing_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTINSTTRACING_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstinsttracing_DataEff;
assign CSR_Trdstcontrol_F_Trdstinsttracing_DataEff = {reg_wr_data[2:2]};
assign CSR_Trdstcontrol_F_Trdstinsttracing_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL)) ? CR_4B_TRDSTCONTROL_TRDSTINSTTRACING_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstinsttracing), 64'(CSR_Trdstcontrol_F_Trdstinsttracing_DataEff[0:0]), reg_wr_instr_type)) : Cr4BCsrTrdstcontrolWr.Data.Trdstinsttracing);
assign CSR_Trdstcontrol_F_Trdstinsttracing_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL)) | Cr4BCsrTrdstcontrolWr.TrdstinsttracingWrEn));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTINSTTRACING_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstinsttracing_ff   (.out(CSR_Trdstcontrol_F_Trdstinsttracing), .in(CSR_Trdstcontrol_F_Trdstinsttracing_Data), .en(CSR_Trdstcontrol_F_Trdstinsttracing_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstcontrol_F_Trdstenable_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTENABLE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstenable_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTENABLE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstenable_DataEff;
assign CSR_Trdstcontrol_F_Trdstenable_DataEff = {reg_wr_data[1:1]};
assign CSR_Trdstcontrol_F_Trdstenable_Data = (CR_4B_TRDSTCONTROL_TRDSTENABLE_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstenable), 64'(CSR_Trdstcontrol_F_Trdstenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstenable_ff   (.out(CSR_Trdstcontrol_F_Trdstenable), .in(CSR_Trdstcontrol_F_Trdstenable_Data), .en(CSR_Trdstcontrol_F_Trdstenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstcontrol_F_Trdstactive_WrEn;
logic [CR_4B_TRDSTCONTROL_TRDSTACTIVE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstactive_Data;
logic [CR_4B_TRDSTCONTROL_TRDSTACTIVE_WIDTH-1:0] CSR_Trdstcontrol_F_Trdstactive_DataEff;
assign CSR_Trdstcontrol_F_Trdstactive_DataEff = {reg_wr_data[0:0]};
assign CSR_Trdstcontrol_F_Trdstactive_Data = (CR_4B_TRDSTCONTROL_TRDSTACTIVE_WIDTH'(update_value(64'(CSR_Trdstcontrol_F_Trdstactive), 64'(CSR_Trdstcontrol_F_Trdstactive_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trdstcontrol_F_Trdstactive_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTCONTROL))));
generic_dff #(.WIDTH(CR_4B_TRDSTCONTROL_TRDSTACTIVE_WIDTH), .RESET_VALUE(0)) CSR_Trdstcontrol_F_Trdstactive_ff   (.out(CSR_Trdstcontrol_F_Trdstactive), .in(CSR_Trdstcontrol_F_Trdstactive_Data), .en(CSR_Trdstcontrol_F_Trdstactive_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTIMPL
logic                                           CSR_Trdstimpl_F_Trdstvendorstreamlength_WrEn;
logic [CR_4B_TRDSTIMPL_TRDSTVENDORSTREAMLENGTH_WIDTH-1:0] CSR_Trdstimpl_F_Trdstvendorstreamlength_Data;
logic [CR_4B_TRDSTIMPL_TRDSTVENDORSTREAMLENGTH_WIDTH-1:0] CSR_Trdstimpl_F_Trdstvendorstreamlength_DataEff;
assign CSR_Trdstimpl_F_Trdstvendorstreamlength_DataEff = {reg_wr_data[30:28]};
assign CSR_Trdstimpl_F_Trdstvendorstreamlength_Data = (CR_4B_TRDSTIMPL_TRDSTVENDORSTREAMLENGTH_WIDTH'(update_value(64'(CSR_Trdstimpl_F_Trdstvendorstreamlength), 64'(CSR_Trdstimpl_F_Trdstvendorstreamlength_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_Trdstimpl_F_Trdstvendorstreamlength_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTIMPL))));
generic_dff #(.WIDTH(CR_4B_TRDSTIMPL_TRDSTVENDORSTREAMLENGTH_WIDTH), .RESET_VALUE(3'h4)) CSR_Trdstimpl_F_Trdstvendorstreamlength_ff   (.out(CSR_Trdstimpl_F_Trdstvendorstreamlength), .in(CSR_Trdstimpl_F_Trdstvendorstreamlength_Data), .en(CSR_Trdstimpl_F_Trdstvendorstreamlength_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstimpl_F_Trdstvendorframelength_WrEn;
logic [CR_4B_TRDSTIMPL_TRDSTVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trdstimpl_F_Trdstvendorframelength_Data;
logic [CR_4B_TRDSTIMPL_TRDSTVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trdstimpl_F_Trdstvendorframelength_DataEff;
assign CSR_Trdstimpl_F_Trdstvendorframelength_DataEff = {reg_wr_data[27:24]};
assign CSR_Trdstimpl_F_Trdstvendorframelength_Data = (CR_4B_TRDSTIMPL_TRDSTVENDORFRAMELENGTH_WIDTH'(update_value(64'(CSR_Trdstimpl_F_Trdstvendorframelength), 64'(CSR_Trdstimpl_F_Trdstvendorframelength_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trdstimpl_F_Trdstvendorframelength_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTIMPL))));
generic_dff #(.WIDTH(CR_4B_TRDSTIMPL_TRDSTVENDORFRAMELENGTH_WIDTH), .RESET_VALUE(1)) CSR_Trdstimpl_F_Trdstvendorframelength_ff   (.out(CSR_Trdstimpl_F_Trdstvendorframelength), .in(CSR_Trdstimpl_F_Trdstvendorframelength_Data), .en(CSR_Trdstimpl_F_Trdstvendorframelength_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstimpl_F_Trdstprotocolminor = 4'h0;

assign CSR_Trdstimpl_F_Trdstprotocolmajor = 4'h1;

assign CSR_Trdstimpl_F_Trdstcomptype = 4'h1;

assign CSR_Trdstimpl_F_Trdstverminor = 4'h0;

assign CSR_Trdstimpl_F_Trdstvermajor = 4'h1;

//Register: CSR_TRDSTINSTFEATURES
logic                                           CSR_Trdstinstfeatures_F_Trdstsrcbits_WrEn;
logic [CR_4B_TRDSTINSTFEATURES_TRDSTSRCBITS_WIDTH-1:0] CSR_Trdstinstfeatures_F_Trdstsrcbits_Data;
logic [CR_4B_TRDSTINSTFEATURES_TRDSTSRCBITS_WIDTH-1:0] CSR_Trdstinstfeatures_F_Trdstsrcbits_DataEff;
assign CSR_Trdstinstfeatures_F_Trdstsrcbits_DataEff = {reg_wr_data[31:28]};
assign CSR_Trdstinstfeatures_F_Trdstsrcbits_Data = (CR_4B_TRDSTINSTFEATURES_TRDSTSRCBITS_WIDTH'(update_value(64'(CSR_Trdstinstfeatures_F_Trdstsrcbits), 64'(CSR_Trdstinstfeatures_F_Trdstsrcbits_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trdstinstfeatures_F_Trdstsrcbits_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRDSTINSTFEATURES_TRDSTSRCBITS_WIDTH), .RESET_VALUE(4'h4)) CSR_Trdstinstfeatures_F_Trdstsrcbits_ff   (.out(CSR_Trdstinstfeatures_F_Trdstsrcbits), .in(CSR_Trdstinstfeatures_F_Trdstsrcbits_Data), .en(CSR_Trdstinstfeatures_F_Trdstsrcbits_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstinstfeatures_F_Trdstsrcid_WrEn;
logic [CR_4B_TRDSTINSTFEATURES_TRDSTSRCID_WIDTH-1:0] CSR_Trdstinstfeatures_F_Trdstsrcid_Data;
logic [CR_4B_TRDSTINSTFEATURES_TRDSTSRCID_WIDTH-1:0] CSR_Trdstinstfeatures_F_Trdstsrcid_DataEff;
assign CSR_Trdstinstfeatures_F_Trdstsrcid_DataEff = {reg_wr_data[27:16]};
assign CSR_Trdstinstfeatures_F_Trdstsrcid_Data = (CR_4B_TRDSTINSTFEATURES_TRDSTSRCID_WIDTH'(update_value(64'(CSR_Trdstinstfeatures_F_Trdstsrcid), 64'(CSR_Trdstinstfeatures_F_Trdstsrcid_DataEff[11:0]), reg_wr_instr_type)));
assign CSR_Trdstinstfeatures_F_Trdstsrcid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRDSTINSTFEATURES_TRDSTSRCID_WIDTH), .RESET_VALUE(0)) CSR_Trdstinstfeatures_F_Trdstsrcid_ff   (.out(CSR_Trdstinstfeatures_F_Trdstsrcid), .in(CSR_Trdstinstfeatures_F_Trdstsrcid_Data), .en(CSR_Trdstinstfeatures_F_Trdstsrcid_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstinstfeatures_F_Trdstinstenrepeatedhistory = 1'h0;

assign CSR_Trdstinstfeatures_F_Trdstinstnotrapaddr = 1'h0;

assign CSR_Trdstinstfeatures_F_Trdstinstnoaddrdiff = 1'h0;

//Register: CSR_CDBGDEBUGTRACECFG
logic                                           CSR_CDbgDebugTraceCfg_F_FrameClosureMode_WrEn;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMECLOSUREMODE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameClosureMode_Data;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMECLOSUREMODE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameClosureMode_DataEff;
assign CSR_CDbgDebugTraceCfg_F_FrameClosureMode_DataEff = {reg_wr_data[21:21]};
assign CSR_CDbgDebugTraceCfg_F_FrameClosureMode_Data = (CR_4B_CDBGDEBUGTRACECFG_FRAMECLOSUREMODE_WIDTH'(update_value(64'(CSR_CDbgDebugTraceCfg_F_FrameClosureMode), 64'(CSR_CDbgDebugTraceCfg_F_FrameClosureMode_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgDebugTraceCfg_F_FrameClosureMode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGDEBUGTRACECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGDEBUGTRACECFG_FRAMECLOSUREMODE_WIDTH), .RESET_VALUE(1)) CSR_CDbgDebugTraceCfg_F_FrameClosureMode_ff   (.out(CSR_CDbgDebugTraceCfg_F_FrameClosureMode), .in(CSR_CDbgDebugTraceCfg_F_FrameClosureMode_Data), .en(CSR_CDbgDebugTraceCfg_F_FrameClosureMode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgDebugTraceCfg_F_FrameModeEnable_WrEn;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMEMODEENABLE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameModeEnable_Data;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMEMODEENABLE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameModeEnable_DataEff;
assign CSR_CDbgDebugTraceCfg_F_FrameModeEnable_DataEff = {reg_wr_data[20:20]};
assign CSR_CDbgDebugTraceCfg_F_FrameModeEnable_Data = (CR_4B_CDBGDEBUGTRACECFG_FRAMEMODEENABLE_WIDTH'(update_value(64'(CSR_CDbgDebugTraceCfg_F_FrameModeEnable), 64'(CSR_CDbgDebugTraceCfg_F_FrameModeEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgDebugTraceCfg_F_FrameModeEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGDEBUGTRACECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGDEBUGTRACECFG_FRAMEMODEENABLE_WIDTH), .RESET_VALUE(1)) CSR_CDbgDebugTraceCfg_F_FrameModeEnable_ff   (.out(CSR_CDbgDebugTraceCfg_F_FrameModeEnable), .in(CSR_CDbgDebugTraceCfg_F_FrameModeEnable_Data), .en(CSR_CDbgDebugTraceCfg_F_FrameModeEnable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_WrEn;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMELENGHTINBYTES_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_Data;
logic [CR_4B_CDBGDEBUGTRACECFG_FRAMELENGHTINBYTES_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_DataEff;
assign CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_DataEff = {reg_wr_data[15:12]};
assign CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_Data = (CR_4B_CDBGDEBUGTRACECFG_FRAMELENGHTINBYTES_WIDTH'(update_value(64'(CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes), 64'(CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGDEBUGTRACECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGDEBUGTRACECFG_FRAMELENGHTINBYTES_WIDTH), .RESET_VALUE(4'h2)) CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_ff   (.out(CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes), .in(CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_Data), .en(CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_WrEn;
logic [CR_4B_CDBGDEBUGTRACECFG_TRACEFRAMEFILLBYTE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_Data;
logic [CR_4B_CDBGDEBUGTRACECFG_TRACEFRAMEFILLBYTE_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_DataEff;
assign CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_DataEff = {reg_wr_data[11:4]};
assign CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_Data = (CR_4B_CDBGDEBUGTRACECFG_TRACEFRAMEFILLBYTE_WIDTH'(update_value(64'(CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte), 64'(CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGDEBUGTRACECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGDEBUGTRACECFG_TRACEFRAMEFILLBYTE_WIDTH), .RESET_VALUE(8'h81)) CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_ff   (.out(CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte), .in(CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_Data), .en(CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgDebugTraceCfg_F_TraceSourceId_WrEn;
logic [CR_4B_CDBGDEBUGTRACECFG_TRACESOURCEID_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_TraceSourceId_Data;
logic [CR_4B_CDBGDEBUGTRACECFG_TRACESOURCEID_WIDTH-1:0] CSR_CDbgDebugTraceCfg_F_TraceSourceId_DataEff;
assign CSR_CDbgDebugTraceCfg_F_TraceSourceId_DataEff = {reg_wr_data[3:0]};
assign CSR_CDbgDebugTraceCfg_F_TraceSourceId_Data = (CR_4B_CDBGDEBUGTRACECFG_TRACESOURCEID_WIDTH'(update_value(64'(CSR_CDbgDebugTraceCfg_F_TraceSourceId), 64'(CSR_CDbgDebugTraceCfg_F_TraceSourceId_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgDebugTraceCfg_F_TraceSourceId_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGDEBUGTRACECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGDEBUGTRACECFG_TRACESOURCEID_WIDTH), .RESET_VALUE(0)) CSR_CDbgDebugTraceCfg_F_TraceSourceId_ff   (.out(CSR_CDbgDebugTraceCfg_F_TraceSourceId), .in(CSR_CDbgDebugTraceCfg_F_TraceSourceId_Data), .en(CSR_CDbgDebugTraceCfg_F_TraceSourceId_WrEn), .clk(clk), .rst_n(reset_n));

//------------------------------------------------------------------------------
// Register Reads
//------------------------------------------------------------------------------

// Construct register vectors
assign CSR_Trdstcontrol = {
    5'h0,
    CSR_Trdstcontrol_F_Trdstformat,
    CSR_Trdstcontrol_F_Trdstsyncmax,
    2'h0,
    CSR_Trdstcontrol_F_Trdstsyncmode,
    CSR_Trdstcontrol_F_Trdstinhibitsrc,
    1'h0,
    CSR_Trdstcontrol_F_Trdstinststallena,
    CSR_Trdstcontrol_F_Trdstinststalloroverflow,
    CSR_Trdstcontrol_F_Trdstinsttriggerenable,
    1'h0,
    CSR_Trdstcontrol_F_Trdstcontext,
    2'h0,
    CSR_Trdstcontrol_F_Trdstinstmode,
    CSR_Trdstcontrol_F_Trdstempty,
    CSR_Trdstcontrol_F_Trdstinsttracing,
    CSR_Trdstcontrol_F_Trdstenable,
    CSR_Trdstcontrol_F_Trdstactive
};
assign CSR_Trdstimpl = {
    1'h0,
    CSR_Trdstimpl_F_Trdstvendorstreamlength,
    CSR_Trdstimpl_F_Trdstvendorframelength,
    CSR_Trdstimpl_F_Trdstprotocolminor,
    CSR_Trdstimpl_F_Trdstprotocolmajor,
    4'h0,
    CSR_Trdstimpl_F_Trdstcomptype,
    CSR_Trdstimpl_F_Trdstverminor,
    CSR_Trdstimpl_F_Trdstvermajor
};
assign CSR_Trdstinstfeatures = {
    CSR_Trdstinstfeatures_F_Trdstsrcbits,
    CSR_Trdstinstfeatures_F_Trdstsrcid,
    7'h0,
    CSR_Trdstinstfeatures_F_Trdstinstenrepeatedhistory,
    6'h0,
    CSR_Trdstinstfeatures_F_Trdstinstnotrapaddr,
    CSR_Trdstinstfeatures_F_Trdstinstnoaddrdiff
};
assign CSR_CDbgDebugTraceCfg = {
    10'h0,
    CSR_CDbgDebugTraceCfg_F_FrameClosureMode,
    CSR_CDbgDebugTraceCfg_F_FrameModeEnable,
    4'h0,
    CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes,
    CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte,
    CSR_CDbgDebugTraceCfg_F_TraceSourceId
};

// Register reads
always_comb begin
    reg_prehit  = '0;
    reg_rd_data = '0;
    unique case (reg_addr)
        ADDR_CSR_TRDSTCONTROL                   : begin reg_prehit.Cr4BCsrTrdstcontrolHit = 1'b1; reg_rd_data = {CSR_Trdstcontrol}; end
        ADDR_CSR_TRDSTIMPL                      : begin reg_prehit.Cr4BCsrTrdstimplHit = 1'b1; reg_rd_data = {CSR_Trdstimpl}; end
        ADDR_CSR_TRDSTINSTFEATURES              : begin reg_prehit.Cr4BCsrTrdstinstfeaturesHit = 1'b1; reg_rd_data = {CSR_Trdstinstfeatures}; end
        ADDR_CSR_CDBGDEBUGTRACECFG              : begin reg_prehit.Cr4BCsrCdbgdebugtracecfgHit = 1'b1; reg_rd_data = {CSR_CDbgDebugTraceCfg}; end
        default:  begin
            reg_prehit  = '0;
            reg_rd_data = '0;
        end
    endcase
end

assign reg_hit = reg_read & |reg_prehit;

// Write broadcast
always_comb begin
    unique case (reg_addr_d1)
        ADDR_CSR_TRDSTCONTROL                   : begin reg_rd_data_d1 = {CSR_Trdstcontrol}; end
        ADDR_CSR_TRDSTIMPL                      : begin reg_rd_data_d1 = {CSR_Trdstimpl}; end
        ADDR_CSR_TRDSTINSTFEATURES              : begin reg_rd_data_d1 = {CSR_Trdstinstfeatures}; end
        ADDR_CSR_CDBGDEBUGTRACECFG              : begin reg_rd_data_d1 = {CSR_CDbgDebugTraceCfg}; end
        default:  begin
            reg_rd_data_d1 = '0;
        end
    endcase
end

//------------------------------------------------------------------------------
// Outputs
//------------------------------------------------------------------------------

assign CsrWrReady = reg_wr_ready;

if (FLOP_RD_DATA) begin : flop_rd_data
    generic_dff #(.WIDTH(1) , .RESET_VALUE(0)) Csr_Hit_ff    (.out(CsrHit)   , .in(reg_hit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(CR_4B_NUM_REGISTERS) , .RESET_VALUE(0)) Csr_Hit_List_ff    (.out(CsrHitList)   , .in(reg_prehit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32), .RESET_VALUE(0)) Csr_RdData_ff (.out(CsrRdData), .in(reg_rd_data), .en(reg_cs), .clk(clk), .rst_n(reset_n));
end else begin
    assign CsrHit     = reg_hit;
    assign CsrHitList = reg_prehit;
    assign CsrRdData  = reg_rd_data;
end

assign CsrUpdateEn                              = reg_write_d1;
assign CsrUpdateAddr                            = reg_addr_d1;
assign CsrUpdateData                            = reg_rd_data_d1;

assign Cr4BCsrTrdstcontrol.Trdstformat          = CSR_Trdstcontrol_F_Trdstformat;
assign Cr4BCsrTrdstcontrol.Trdstsyncmax         = CSR_Trdstcontrol_F_Trdstsyncmax;
assign Cr4BCsrTrdstcontrol.Trdstsyncmode        = CSR_Trdstcontrol_F_Trdstsyncmode;
assign Cr4BCsrTrdstcontrol.Trdstinhibitsrc      = CSR_Trdstcontrol_F_Trdstinhibitsrc;
assign Cr4BCsrTrdstcontrol.Trdstinststallena    = CSR_Trdstcontrol_F_Trdstinststallena;
assign Cr4BCsrTrdstcontrol.Trdstinststalloroverflow = CSR_Trdstcontrol_F_Trdstinststalloroverflow;
assign Cr4BCsrTrdstcontrol.Trdstinsttriggerenable = CSR_Trdstcontrol_F_Trdstinsttriggerenable;
assign Cr4BCsrTrdstcontrol.Trdstcontext         = CSR_Trdstcontrol_F_Trdstcontext;
assign Cr4BCsrTrdstcontrol.Trdstinstmode        = CSR_Trdstcontrol_F_Trdstinstmode;
assign Cr4BCsrTrdstcontrol.Trdstempty           = CSR_Trdstcontrol_F_Trdstempty;
assign Cr4BCsrTrdstcontrol.Trdstinsttracing     = CSR_Trdstcontrol_F_Trdstinsttracing;
assign Cr4BCsrTrdstcontrol.Trdstenable          = CSR_Trdstcontrol_F_Trdstenable;
assign Cr4BCsrTrdstcontrol.Trdstactive          = CSR_Trdstcontrol_F_Trdstactive;
assign Cr4BCsrTrdstimpl.Trdstvendorstreamlength = CSR_Trdstimpl_F_Trdstvendorstreamlength;
assign Cr4BCsrTrdstimpl.Trdstvendorframelength  = CSR_Trdstimpl_F_Trdstvendorframelength;
assign Cr4BCsrTrdstimpl.Trdstprotocolminor      = CSR_Trdstimpl_F_Trdstprotocolminor;
assign Cr4BCsrTrdstimpl.Trdstprotocolmajor      = CSR_Trdstimpl_F_Trdstprotocolmajor;
assign Cr4BCsrTrdstimpl.Trdstcomptype           = CSR_Trdstimpl_F_Trdstcomptype;
assign Cr4BCsrTrdstimpl.Trdstverminor           = CSR_Trdstimpl_F_Trdstverminor;
assign Cr4BCsrTrdstimpl.Trdstvermajor           = CSR_Trdstimpl_F_Trdstvermajor;
assign Cr4BCsrTrdstinstfeatures.Trdstsrcbits    = CSR_Trdstinstfeatures_F_Trdstsrcbits;
assign Cr4BCsrTrdstinstfeatures.Trdstsrcid      = CSR_Trdstinstfeatures_F_Trdstsrcid;
assign Cr4BCsrTrdstinstfeatures.Trdstinstenrepeatedhistory = CSR_Trdstinstfeatures_F_Trdstinstenrepeatedhistory;
assign Cr4BCsrTrdstinstfeatures.Trdstinstnotrapaddr = CSR_Trdstinstfeatures_F_Trdstinstnotrapaddr;
assign Cr4BCsrTrdstinstfeatures.Trdstinstnoaddrdiff = CSR_Trdstinstfeatures_F_Trdstinstnoaddrdiff;
assign Cr4BCsrCdbgdebugtracecfg.FrameClosureMode = CSR_CDbgDebugTraceCfg_F_FrameClosureMode;
assign Cr4BCsrCdbgdebugtracecfg.FrameModeEnable = CSR_CDbgDebugTraceCfg_F_FrameModeEnable;
assign Cr4BCsrCdbgdebugtracecfg.FrameLenghtInBytes = CSR_CDbgDebugTraceCfg_F_FrameLenghtInBytes;
assign Cr4BCsrCdbgdebugtracecfg.TraceFrameFillByte = CSR_CDbgDebugTraceCfg_F_TraceFrameFillByte;
assign Cr4BCsrCdbgdebugtracecfg.TraceSourceId   = CSR_CDbgDebugTraceCfg_F_TraceSourceId;

//------------------------------------------------------------------------------
// update_value
// update register value based on input instr_type.
// instr_type: 2'b01 : op1 data is mask to set bits
// instr_type: 2'b10 : op1 data is mask to clear bits
// instr_type: othes : op1 data is written to register
//------------------------------------------------------------------------------
function automatic [63:0] update_value;
input [63:0] old_value;
input [63:0] op1;
input  [1:0] instr_type;
  begin
    if (instr_type == 2'b01)
       update_value = old_value | op1;
    else if (instr_type == 2'b10)
       update_value = old_value & ~op1;
    else
       update_value = op1;
  end
endfunction


endmodule
// Local Variables:
// verilog-library-directories:(".")
// verilog-library-extensions:(".sv" ".h" ".v")
// verilog-typedef-regexp: "_[eus]$"
// End:



