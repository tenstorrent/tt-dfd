// SPDX-FileCopyrightText: Copyright 2025 Tenstorrent AI ULC
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Registers
 *
 * This file was AUTO-GENERATED by this script:
 *       create_reg_rtl.py
 * ... from this input file:
 *       ntr_mmrs.py
 * ... using this as the top address space:
 *       ntr
 *
 * This file should not be modified by hand.
 *
 ******************************************************************************/

module dfd_ntr_csr
import dfd_ntr_csr_pkg::*;
`include "ntr_csr_pkg_list.svh"
#(
    parameter BASE_ADDR    = 0,                 // base address
    parameter ADDR_W       = 23,                // bit width of address
    parameter FLOP_IN_REQ  = 1,                 // add flop stage to bus inputs?
    parameter FLOP_RD_DATA = 1,                 // add flop stage to output rd data?
    parameter INSTR_TYPE_W = 2                  // write instr_type

) (

// Global Interface
input  logic                                    clk,
input  logic                                    reset_n,

// Register Bus
input  logic                                    CsrCs,
input  logic                                    CsrWrEn,
input  logic                        [1:0]       CsrWrStrb,
input  logic                                    CsrRegSel,
input  logic                       [ADDR_W-1:0] CsrAddr,
input  logic                             [31:0] CsrWrData,
input  logic                 [INSTR_TYPE_W-1:0] CsrWrInstrType,
output logic                                    CsrWrReady,
output logic                                    CsrHit,
output NtrCsrHit_s                              CsrHitList,
output logic                             [31:0] CsrRdData,

// Registers
output Cr4BTrtecontrolCsr_s                     Cr4BCsrTrtecontrol,
output Cr4BTrteimplCsr_s                        Cr4BCsrTrteimpl,
output Cr4BTrteinstfeaturesCsr_s                Cr4BCsrTrteinstfeatures,
output Cr4BTrteinstfiltersCsr_s                 Cr4BCsrTrteinstfilters,
output Cr4BTrtefilter0ControlCsr_s              Cr4BCsrTrtefilter0Control,
output Cr4BTrtefilter0MatchinstCsr_s            Cr4BCsrTrtefilter0Matchinst,
output Cr4BCdbgntraceframecfgCsr_s              Cr4BCsrCdbgntraceframecfg,

// HW Write Ports
input Cr4BTrtecontrolCsrWr_s                    Cr4BCsrTrtecontrolWr,
// Write Broadcast Bus
output logic                                    CsrUpdateEn,
output logic                       [ADDR_W-1:0] CsrUpdateAddr,
output logic                             [31:0] CsrUpdateData

);


////////////////////////////////////////////////////////////////////////////////
// Internal Parameters
////////////////////////////////////////////////////////////////////////////////

// Addresses
localparam   [ADDR_W-1:0] ADDR_CSR_TRTECONTROL           = ADDR_W'(BASE_ADDR + 'h2000);
localparam   [ADDR_W-1:0] ADDR_CSR_TRTEIMPL              = ADDR_W'(BASE_ADDR + 'h2004);
localparam   [ADDR_W-1:0] ADDR_CSR_TRTEINSTFEATURES      = ADDR_W'(BASE_ADDR + 'h2008);
localparam   [ADDR_W-1:0] ADDR_CSR_TRTEINSTFILTERS       = ADDR_W'(BASE_ADDR + 'h200C);
localparam   [ADDR_W-1:0] ADDR_CSR_TRTEFILTER0CONTROL    = ADDR_W'(BASE_ADDR + 'h2010);
localparam   [ADDR_W-1:0] ADDR_CSR_TRTEFILTER0MATCHINST  = ADDR_W'(BASE_ADDR + 'h2014);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNTRACEFRAMECFG    = ADDR_W'(BASE_ADDR + 'h21A8);



////////////////////////////////////////////////////////////////////////////////
// Signal Declarations
////////////////////////////////////////////////////////////////////////////////

logic                       reg_cs;
logic                       reg_wr_en;
logic           [1:0]       reg_wr_strb;
logic          [ADDR_W-1:0] reg_addr;
logic                       reg_wr_sel;
logic                       reg_rd_sel;
logic                [31:0] reg_wr_data;
logic    [INSTR_TYPE_W-1:0] reg_wr_instr_type;

logic                       reg_wr_ready;
NtrCsrHit_s                 reg_prehit;
logic                       reg_hit;
logic                [31:0] reg_rd_data;

logic                       reg_write;
logic                       reg_read;

logic          [ADDR_W-1:0] reg_addr_d1;
logic                       reg_write_d1;
logic                [31:0] reg_rd_data_d1;

// Registers
logic                [31:0] CSR_Trtecontrol;
logic                [31:0] CSR_Trteimpl;
logic                [31:0] CSR_Trteinstfeatures;
logic                [31:0] CSR_Trteinstfilters;
logic                [31:0] CSR_Trtefilter0Control;
logic                [31:0] CSR_Trtefilter0Matchinst;
logic                [31:0] CSR_CDbgNtraceFrameCfg;

// Fields
logic                 [2:0] CSR_Trtecontrol_F_Trteformat;
logic                 [3:0] CSR_Trtecontrol_F_Trtesyncmax;
logic                 [1:0] CSR_Trtecontrol_F_Trtesyncmode;
logic                 [0:0] CSR_Trtecontrol_F_Trteinhibitsrc;
logic                 [0:0] CSR_Trtecontrol_F_Trteinststallena;
logic                 [0:0] CSR_Trtecontrol_F_Trteinststalloroverflow;
logic                 [0:0] CSR_Trtecontrol_F_Trteinsttriggerenable;
logic                 [0:0] CSR_Trtecontrol_F_Trtecontext;
logic                 [2:0] CSR_Trtecontrol_F_Trteinstmode;
logic                 [0:0] CSR_Trtecontrol_F_Trteempty;
logic                 [0:0] CSR_Trtecontrol_F_Trteinsttracing;
logic                 [0:0] CSR_Trtecontrol_F_Trteenable;
logic                 [0:0] CSR_Trtecontrol_F_Trteactive;
logic                 [0:0] CSR_Trteimpl_F_Trtetracepatchenable;
logic                 [0:0] CSR_Trteimpl_F_Trteclatriggerenable;
logic                 [3:0] CSR_Trteimpl_F_Trtevendorframelength;
logic                 [3:0] CSR_Trteimpl_F_Trteprotocolminor;
logic                 [3:0] CSR_Trteimpl_F_Trteprotocolmajor;
logic                 [3:0] CSR_Trteimpl_F_Trtecomptype;
logic                 [3:0] CSR_Trteimpl_F_Trteverminor;
logic                 [3:0] CSR_Trteimpl_F_Trtevermajor;
logic                 [3:0] CSR_Trteinstfeatures_F_Trtesrcbits;
logic                [11:0] CSR_Trteinstfeatures_F_Trtesrcid;
logic                 [0:0] CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory;
logic                 [0:0] CSR_Trteinstfeatures_F_Trteinstnotrapaddr;
logic                 [0:0] CSR_Trteinstfeatures_F_Trteinstnoaddrdiff;
logic                [15:0] CSR_Trteinstfilters_F_Trteinstfilters;
logic                 [0:0] CSR_Trtefilter0Control_F_Trtefiltermatchprivilege;
logic                 [0:0] CSR_Trtefilter0Control_F_Trtefilterenable;
logic                 [7:0] CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege;
logic                 [0:0] CSR_CDbgNtraceFrameCfg_F_FrameClosureMode;
logic                 [0:0] CSR_CDbgNtraceFrameCfg_F_FrameModeEnable;
logic                 [3:0] CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes;
logic                 [7:0] CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte;
logic                 [3:0] CSR_CDbgNtraceFrameCfg_F_TraceSourceId;



////////////////////////////////////////////////////////////////////////////////
// Main Module Functionality
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Inputs
//------------------------------------------------------------------------------

if (FLOP_IN_REQ) begin : flop_in_req
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_cs_ff             (.out(reg_cs)   , .in(CsrCs)    , .en(CsrCs|reg_cs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_en_ff          (.out(reg_wr_en), .in(CsrWrEn)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(2)           , .RESET_VALUE(0)) reg_wr_strb_ff        (.out(reg_wr_strb), .in(CsrWrStrb)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(ADDR_W)      , .RESET_VALUE(0)) reg_addr_ff           (.out(reg_addr) , .in(CsrAddr)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32)          , .RESET_VALUE(0)) reg_wr_data_ff        (.out(reg_wr_data), .in(CsrWrData), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_rd_sel_ff         (.out(reg_rd_sel)  , .in(~CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_sel_ff         (.out(reg_wr_sel)  , .in(CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));    
    generic_dff #(.WIDTH(INSTR_TYPE_W), .RESET_VALUE(0)) reg_wr_instr_type_ff  (.out(reg_wr_instr_type), .in(CsrWrInstrType), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_ready_ff       (.out(reg_wr_ready), .in(CsrCs & CsrWrEn), .en(CsrCs), .clk(clk), .rst_n(reset_n));
end else begin
    assign reg_cs             = CsrCs;
    assign reg_wr_en          = CsrWrEn;
    assign reg_wr_strb        = CsrWrStrb;
    assign reg_addr           = CsrAddr;
    assign reg_wr_data        = CsrWrData;
    assign reg_rd_sel         = ~CsrRegSel;
    assign reg_wr_sel         = CsrRegSel;
    assign reg_wr_instr_type  = CsrWrInstrType;
    assign reg_wr_ready       = CsrCs & CsrWrEn;
end

assign reg_write    = reg_cs &  reg_wr_en;
assign reg_read     = reg_cs;

generic_dff #(.WIDTH(ADDR_W), .RESET_VALUE(0)) reg_addr_d1_ff (.out(reg_addr_d1) , .in(reg_addr) , .en(reg_cs), .clk(clk), .rst_n(reset_n));
generic_dff #(.WIDTH(1)     , .RESET_VALUE(0)) reg_wren_d1_ff (.out(reg_write_d1), .in(reg_write), .en(reg_cs | reg_write_d1), .clk(clk), .rst_n(reset_n));


//------------------------------------------------------------------------------
// Register Writes and Counters
//------------------------------------------------------------------------------


//Register: CSR_TRTECONTROL
logic                                           CSR_Trtecontrol_F_Trteformat_WrEn;
logic [CR_4B_TRTECONTROL_TRTEFORMAT_WIDTH -1:0] CSR_Trtecontrol_F_Trteformat_Data;
logic [CR_4B_TRTECONTROL_TRTEFORMAT_WIDTH -1:0] CSR_Trtecontrol_F_Trteformat_DataEff;
assign CSR_Trtecontrol_F_Trteformat_DataEff = {reg_wr_data[26:24]};
assign CSR_Trtecontrol_F_Trteformat_Data = (CR_4B_TRTECONTROL_TRTEFORMAT_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteformat), 64'(CSR_Trtecontrol_F_Trteformat_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteformat_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEFORMAT_WIDTH), .RESET_VALUE(1)) CSR_Trtecontrol_F_Trteformat_ff   (.out(CSR_Trtecontrol_F_Trteformat), .in(CSR_Trtecontrol_F_Trteformat_Data), .en(CSR_Trtecontrol_F_Trteformat_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trtesyncmax_WrEn;
logic [CR_4B_TRTECONTROL_TRTESYNCMAX_WIDTH-1:0] CSR_Trtecontrol_F_Trtesyncmax_Data;
logic [CR_4B_TRTECONTROL_TRTESYNCMAX_WIDTH-1:0] CSR_Trtecontrol_F_Trtesyncmax_DataEff;
assign CSR_Trtecontrol_F_Trtesyncmax_DataEff = {reg_wr_data[23:20]};
assign CSR_Trtecontrol_F_Trtesyncmax_Data = (CR_4B_TRTECONTROL_TRTESYNCMAX_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trtesyncmax), 64'(CSR_Trtecontrol_F_Trtesyncmax_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trtesyncmax_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTESYNCMAX_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trtesyncmax_ff   (.out(CSR_Trtecontrol_F_Trtesyncmax), .in(CSR_Trtecontrol_F_Trtesyncmax_Data), .en(CSR_Trtecontrol_F_Trtesyncmax_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trtesyncmode_WrEn;
logic [CR_4B_TRTECONTROL_TRTESYNCMODE_WIDTH-1:0] CSR_Trtecontrol_F_Trtesyncmode_Data;
logic [CR_4B_TRTECONTROL_TRTESYNCMODE_WIDTH-1:0] CSR_Trtecontrol_F_Trtesyncmode_DataEff;
assign CSR_Trtecontrol_F_Trtesyncmode_DataEff = {reg_wr_data[17:16]};
assign CSR_Trtecontrol_F_Trtesyncmode_Data = (CR_4B_TRTECONTROL_TRTESYNCMODE_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trtesyncmode), 64'(CSR_Trtecontrol_F_Trtesyncmode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trtesyncmode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTESYNCMODE_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trtesyncmode_ff   (.out(CSR_Trtecontrol_F_Trtesyncmode), .in(CSR_Trtecontrol_F_Trtesyncmode_Data), .en(CSR_Trtecontrol_F_Trtesyncmode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinhibitsrc_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINHIBITSRC_WIDTH-1:0] CSR_Trtecontrol_F_Trteinhibitsrc_Data;
logic [CR_4B_TRTECONTROL_TRTEINHIBITSRC_WIDTH-1:0] CSR_Trtecontrol_F_Trteinhibitsrc_DataEff;
assign CSR_Trtecontrol_F_Trteinhibitsrc_DataEff = {reg_wr_data[15:15]};
assign CSR_Trtecontrol_F_Trteinhibitsrc_Data = (CR_4B_TRTECONTROL_TRTEINHIBITSRC_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinhibitsrc), 64'(CSR_Trtecontrol_F_Trteinhibitsrc_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteinhibitsrc_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINHIBITSRC_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteinhibitsrc_ff   (.out(CSR_Trtecontrol_F_Trteinhibitsrc), .in(CSR_Trtecontrol_F_Trteinhibitsrc_Data), .en(CSR_Trtecontrol_F_Trteinhibitsrc_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinststallena_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINSTSTALLENA_WIDTH-1:0] CSR_Trtecontrol_F_Trteinststallena_Data;
logic [CR_4B_TRTECONTROL_TRTEINSTSTALLENA_WIDTH-1:0] CSR_Trtecontrol_F_Trteinststallena_DataEff;
assign CSR_Trtecontrol_F_Trteinststallena_DataEff = {reg_wr_data[13:13]};
assign CSR_Trtecontrol_F_Trteinststallena_Data = (CR_4B_TRTECONTROL_TRTEINSTSTALLENA_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinststallena), 64'(CSR_Trtecontrol_F_Trteinststallena_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteinststallena_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINSTSTALLENA_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteinststallena_ff   (.out(CSR_Trtecontrol_F_Trteinststallena), .in(CSR_Trtecontrol_F_Trteinststallena_Data), .en(CSR_Trtecontrol_F_Trteinststallena_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinststalloroverflow_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINSTSTALLOROVERFLOW_WIDTH-1:0] CSR_Trtecontrol_F_Trteinststalloroverflow_Data;
logic [CR_4B_TRTECONTROL_TRTEINSTSTALLOROVERFLOW_WIDTH-1:0] CSR_Trtecontrol_F_Trteinststalloroverflow_DataEff;
assign CSR_Trtecontrol_F_Trteinststalloroverflow_DataEff = {reg_wr_data[12:12]};
assign CSR_Trtecontrol_F_Trteinststalloroverflow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL)) ? CR_4B_TRTECONTROL_TRTEINSTSTALLOROVERFLOW_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinststalloroverflow), 64'(CSR_Trtecontrol_F_Trteinststalloroverflow_DataEff[0:0]), reg_wr_instr_type)) : Cr4BCsrTrtecontrolWr.Data.Trteinststalloroverflow);
assign CSR_Trtecontrol_F_Trteinststalloroverflow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL)) | Cr4BCsrTrtecontrolWr.TrteinststalloroverflowWrEn));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINSTSTALLOROVERFLOW_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteinststalloroverflow_ff   (.out(CSR_Trtecontrol_F_Trteinststalloroverflow), .in(CSR_Trtecontrol_F_Trteinststalloroverflow_Data), .en(CSR_Trtecontrol_F_Trteinststalloroverflow_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinsttriggerenable_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINSTTRIGGERENABLE_WIDTH-1:0] CSR_Trtecontrol_F_Trteinsttriggerenable_Data;
logic [CR_4B_TRTECONTROL_TRTEINSTTRIGGERENABLE_WIDTH-1:0] CSR_Trtecontrol_F_Trteinsttriggerenable_DataEff;
assign CSR_Trtecontrol_F_Trteinsttriggerenable_DataEff = {reg_wr_data[11:11]};
assign CSR_Trtecontrol_F_Trteinsttriggerenable_Data = (CR_4B_TRTECONTROL_TRTEINSTTRIGGERENABLE_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinsttriggerenable), 64'(CSR_Trtecontrol_F_Trteinsttriggerenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteinsttriggerenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINSTTRIGGERENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteinsttriggerenable_ff   (.out(CSR_Trtecontrol_F_Trteinsttriggerenable), .in(CSR_Trtecontrol_F_Trteinsttriggerenable_Data), .en(CSR_Trtecontrol_F_Trteinsttriggerenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trtecontext_WrEn;
logic [CR_4B_TRTECONTROL_TRTECONTEXT_WIDTH-1:0] CSR_Trtecontrol_F_Trtecontext_Data;
logic [CR_4B_TRTECONTROL_TRTECONTEXT_WIDTH-1:0] CSR_Trtecontrol_F_Trtecontext_DataEff;
assign CSR_Trtecontrol_F_Trtecontext_DataEff = {reg_wr_data[9:9]};
assign CSR_Trtecontrol_F_Trtecontext_Data = (CR_4B_TRTECONTROL_TRTECONTEXT_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trtecontext), 64'(CSR_Trtecontrol_F_Trtecontext_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trtecontext_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTECONTEXT_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trtecontext_ff   (.out(CSR_Trtecontrol_F_Trtecontext), .in(CSR_Trtecontrol_F_Trtecontext_Data), .en(CSR_Trtecontrol_F_Trtecontext_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinstmode_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINSTMODE_WIDTH-1:0] CSR_Trtecontrol_F_Trteinstmode_Data;
logic [CR_4B_TRTECONTROL_TRTEINSTMODE_WIDTH-1:0] CSR_Trtecontrol_F_Trteinstmode_DataEff;
assign CSR_Trtecontrol_F_Trteinstmode_DataEff = {reg_wr_data[6:4]};
assign CSR_Trtecontrol_F_Trteinstmode_Data = (CR_4B_TRTECONTROL_TRTEINSTMODE_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinstmode), 64'(CSR_Trtecontrol_F_Trteinstmode_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteinstmode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINSTMODE_WIDTH), .RESET_VALUE(3'h6)) CSR_Trtecontrol_F_Trteinstmode_ff   (.out(CSR_Trtecontrol_F_Trteinstmode), .in(CSR_Trtecontrol_F_Trteinstmode_Data), .en(CSR_Trtecontrol_F_Trteinstmode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteempty_WrEn;
logic [CR_4B_TRTECONTROL_TRTEEMPTY_WIDTH  -1:0] CSR_Trtecontrol_F_Trteempty_Data;
logic [CR_4B_TRTECONTROL_TRTEEMPTY_WIDTH  -1:0] CSR_Trtecontrol_F_Trteempty_DataEff;
assign CSR_Trtecontrol_F_Trteempty_DataEff = {reg_wr_data[3:3]};
assign CSR_Trtecontrol_F_Trteempty_Data = (Cr4BCsrTrtecontrolWr.Data.Trteempty);
assign CSR_Trtecontrol_F_Trteempty_WrEn = ((Cr4BCsrTrtecontrolWr.TrteemptyWrEn));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEEMPTY_WIDTH), .RESET_VALUE(1)) CSR_Trtecontrol_F_Trteempty_ff   (.out(CSR_Trtecontrol_F_Trteempty), .in(CSR_Trtecontrol_F_Trteempty_Data), .en(CSR_Trtecontrol_F_Trteempty_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteinsttracing_WrEn;
logic [CR_4B_TRTECONTROL_TRTEINSTTRACING_WIDTH-1:0] CSR_Trtecontrol_F_Trteinsttracing_Data;
logic [CR_4B_TRTECONTROL_TRTEINSTTRACING_WIDTH-1:0] CSR_Trtecontrol_F_Trteinsttracing_DataEff;
assign CSR_Trtecontrol_F_Trteinsttracing_DataEff = {reg_wr_data[2:2]};
assign CSR_Trtecontrol_F_Trteinsttracing_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL)) ? CR_4B_TRTECONTROL_TRTEINSTTRACING_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteinsttracing), 64'(CSR_Trtecontrol_F_Trteinsttracing_DataEff[0:0]), reg_wr_instr_type)) : Cr4BCsrTrtecontrolWr.Data.Trteinsttracing);
assign CSR_Trtecontrol_F_Trteinsttracing_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL)) | Cr4BCsrTrtecontrolWr.TrteinsttracingWrEn));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEINSTTRACING_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteinsttracing_ff   (.out(CSR_Trtecontrol_F_Trteinsttracing), .in(CSR_Trtecontrol_F_Trteinsttracing_Data), .en(CSR_Trtecontrol_F_Trteinsttracing_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteenable_WrEn;
logic [CR_4B_TRTECONTROL_TRTEENABLE_WIDTH -1:0] CSR_Trtecontrol_F_Trteenable_Data;
logic [CR_4B_TRTECONTROL_TRTEENABLE_WIDTH -1:0] CSR_Trtecontrol_F_Trteenable_DataEff;
assign CSR_Trtecontrol_F_Trteenable_DataEff = {reg_wr_data[1:1]};
assign CSR_Trtecontrol_F_Trteenable_Data = (CR_4B_TRTECONTROL_TRTEENABLE_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteenable), 64'(CSR_Trtecontrol_F_Trteenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteenable_ff   (.out(CSR_Trtecontrol_F_Trteenable), .in(CSR_Trtecontrol_F_Trteenable_Data), .en(CSR_Trtecontrol_F_Trteenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtecontrol_F_Trteactive_WrEn;
logic [CR_4B_TRTECONTROL_TRTEACTIVE_WIDTH -1:0] CSR_Trtecontrol_F_Trteactive_Data;
logic [CR_4B_TRTECONTROL_TRTEACTIVE_WIDTH -1:0] CSR_Trtecontrol_F_Trteactive_DataEff;
assign CSR_Trtecontrol_F_Trteactive_DataEff = {reg_wr_data[0:0]};
assign CSR_Trtecontrol_F_Trteactive_Data = (CR_4B_TRTECONTROL_TRTEACTIVE_WIDTH'(update_value(64'(CSR_Trtecontrol_F_Trteactive), 64'(CSR_Trtecontrol_F_Trteactive_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtecontrol_F_Trteactive_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTECONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTECONTROL_TRTEACTIVE_WIDTH), .RESET_VALUE(0)) CSR_Trtecontrol_F_Trteactive_ff   (.out(CSR_Trtecontrol_F_Trteactive), .in(CSR_Trtecontrol_F_Trteactive_Data), .en(CSR_Trtecontrol_F_Trteactive_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRTEIMPL
logic                                           CSR_Trteimpl_F_Trtetracepatchenable_WrEn;
logic [CR_4B_TRTEIMPL_TRTETRACEPATCHENABLE_WIDTH-1:0] CSR_Trteimpl_F_Trtetracepatchenable_Data;
logic [CR_4B_TRTEIMPL_TRTETRACEPATCHENABLE_WIDTH-1:0] CSR_Trteimpl_F_Trtetracepatchenable_DataEff;
assign CSR_Trteimpl_F_Trtetracepatchenable_DataEff = {reg_wr_data[29:29]};
assign CSR_Trteimpl_F_Trtetracepatchenable_Data = (CR_4B_TRTEIMPL_TRTETRACEPATCHENABLE_WIDTH'(update_value(64'(CSR_Trteimpl_F_Trtetracepatchenable), 64'(CSR_Trteimpl_F_Trtetracepatchenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trteimpl_F_Trtetracepatchenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEIMPL))));
generic_dff #(.WIDTH(CR_4B_TRTEIMPL_TRTETRACEPATCHENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trteimpl_F_Trtetracepatchenable_ff   (.out(CSR_Trteimpl_F_Trtetracepatchenable), .in(CSR_Trteimpl_F_Trtetracepatchenable_Data), .en(CSR_Trteimpl_F_Trtetracepatchenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteimpl_F_Trteclatriggerenable_WrEn;
logic [CR_4B_TRTEIMPL_TRTECLATRIGGERENABLE_WIDTH-1:0] CSR_Trteimpl_F_Trteclatriggerenable_Data;
logic [CR_4B_TRTEIMPL_TRTECLATRIGGERENABLE_WIDTH-1:0] CSR_Trteimpl_F_Trteclatriggerenable_DataEff;
assign CSR_Trteimpl_F_Trteclatriggerenable_DataEff = {reg_wr_data[28:28]};
assign CSR_Trteimpl_F_Trteclatriggerenable_Data = (CR_4B_TRTEIMPL_TRTECLATRIGGERENABLE_WIDTH'(update_value(64'(CSR_Trteimpl_F_Trteclatriggerenable), 64'(CSR_Trteimpl_F_Trteclatriggerenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trteimpl_F_Trteclatriggerenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEIMPL))));
generic_dff #(.WIDTH(CR_4B_TRTEIMPL_TRTECLATRIGGERENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trteimpl_F_Trteclatriggerenable_ff   (.out(CSR_Trteimpl_F_Trteclatriggerenable), .in(CSR_Trteimpl_F_Trteclatriggerenable_Data), .en(CSR_Trteimpl_F_Trteclatriggerenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteimpl_F_Trtevendorframelength_WrEn;
logic [CR_4B_TRTEIMPL_TRTEVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trteimpl_F_Trtevendorframelength_Data;
logic [CR_4B_TRTEIMPL_TRTEVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trteimpl_F_Trtevendorframelength_DataEff;
assign CSR_Trteimpl_F_Trtevendorframelength_DataEff = {reg_wr_data[27:24]};
assign CSR_Trteimpl_F_Trtevendorframelength_Data = (CR_4B_TRTEIMPL_TRTEVENDORFRAMELENGTH_WIDTH'(update_value(64'(CSR_Trteimpl_F_Trtevendorframelength), 64'(CSR_Trteimpl_F_Trtevendorframelength_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trteimpl_F_Trtevendorframelength_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEIMPL))));
generic_dff #(.WIDTH(CR_4B_TRTEIMPL_TRTEVENDORFRAMELENGTH_WIDTH), .RESET_VALUE(1)) CSR_Trteimpl_F_Trtevendorframelength_ff   (.out(CSR_Trteimpl_F_Trtevendorframelength), .in(CSR_Trteimpl_F_Trtevendorframelength_Data), .en(CSR_Trteimpl_F_Trtevendorframelength_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trteimpl_F_Trteprotocolminor = 4'h0;

assign CSR_Trteimpl_F_Trteprotocolmajor = 4'h1;

assign CSR_Trteimpl_F_Trtecomptype = 4'h1;

assign CSR_Trteimpl_F_Trteverminor = 4'h0;

assign CSR_Trteimpl_F_Trtevermajor = 4'h1;

//Register: CSR_TRTEINSTFEATURES
logic                                           CSR_Trteinstfeatures_F_Trtesrcbits_WrEn;
logic [CR_4B_TRTEINSTFEATURES_TRTESRCBITS_WIDTH-1:0] CSR_Trteinstfeatures_F_Trtesrcbits_Data;
logic [CR_4B_TRTEINSTFEATURES_TRTESRCBITS_WIDTH-1:0] CSR_Trteinstfeatures_F_Trtesrcbits_DataEff;
assign CSR_Trteinstfeatures_F_Trtesrcbits_DataEff = {reg_wr_data[31:28]};
assign CSR_Trteinstfeatures_F_Trtesrcbits_Data = (CR_4B_TRTEINSTFEATURES_TRTESRCBITS_WIDTH'(update_value(64'(CSR_Trteinstfeatures_F_Trtesrcbits), 64'(CSR_Trteinstfeatures_F_Trtesrcbits_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trteinstfeatures_F_Trtesrcbits_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFEATURES_TRTESRCBITS_WIDTH), .RESET_VALUE(4'h4)) CSR_Trteinstfeatures_F_Trtesrcbits_ff   (.out(CSR_Trteinstfeatures_F_Trtesrcbits), .in(CSR_Trteinstfeatures_F_Trtesrcbits_Data), .en(CSR_Trteinstfeatures_F_Trtesrcbits_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteinstfeatures_F_Trtesrcid_WrEn;
logic [CR_4B_TRTEINSTFEATURES_TRTESRCID_WIDTH-1:0] CSR_Trteinstfeatures_F_Trtesrcid_Data;
logic [CR_4B_TRTEINSTFEATURES_TRTESRCID_WIDTH-1:0] CSR_Trteinstfeatures_F_Trtesrcid_DataEff;
assign CSR_Trteinstfeatures_F_Trtesrcid_DataEff = {reg_wr_data[27:16]};
assign CSR_Trteinstfeatures_F_Trtesrcid_Data = (CR_4B_TRTEINSTFEATURES_TRTESRCID_WIDTH'(update_value(64'(CSR_Trteinstfeatures_F_Trtesrcid), 64'(CSR_Trteinstfeatures_F_Trtesrcid_DataEff[11:0]), reg_wr_instr_type)));
assign CSR_Trteinstfeatures_F_Trtesrcid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFEATURES_TRTESRCID_WIDTH), .RESET_VALUE(0)) CSR_Trteinstfeatures_F_Trtesrcid_ff   (.out(CSR_Trteinstfeatures_F_Trtesrcid), .in(CSR_Trteinstfeatures_F_Trtesrcid_Data), .en(CSR_Trteinstfeatures_F_Trtesrcid_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_WrEn;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTENREPEATEDHISTORY_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_Data;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTENREPEATEDHISTORY_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_DataEff;
assign CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_DataEff = {reg_wr_data[8:8]};
assign CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_Data = (CR_4B_TRTEINSTFEATURES_TRTEINSTENREPEATEDHISTORY_WIDTH'(update_value(64'(CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory), 64'(CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFEATURES_TRTEINSTENREPEATEDHISTORY_WIDTH), .RESET_VALUE(0)) CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_ff   (.out(CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory), .in(CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_Data), .en(CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteinstfeatures_F_Trteinstnotrapaddr_WrEn;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTNOTRAPADDR_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstnotrapaddr_Data;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTNOTRAPADDR_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstnotrapaddr_DataEff;
assign CSR_Trteinstfeatures_F_Trteinstnotrapaddr_DataEff = {reg_wr_data[1:1]};
assign CSR_Trteinstfeatures_F_Trteinstnotrapaddr_Data = (CR_4B_TRTEINSTFEATURES_TRTEINSTNOTRAPADDR_WIDTH'(update_value(64'(CSR_Trteinstfeatures_F_Trteinstnotrapaddr), 64'(CSR_Trteinstfeatures_F_Trteinstnotrapaddr_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trteinstfeatures_F_Trteinstnotrapaddr_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFEATURES_TRTEINSTNOTRAPADDR_WIDTH), .RESET_VALUE(0)) CSR_Trteinstfeatures_F_Trteinstnotrapaddr_ff   (.out(CSR_Trteinstfeatures_F_Trteinstnotrapaddr), .in(CSR_Trteinstfeatures_F_Trteinstnotrapaddr_Data), .en(CSR_Trteinstfeatures_F_Trteinstnotrapaddr_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_WrEn;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTNOADDRDIFF_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_Data;
logic [CR_4B_TRTEINSTFEATURES_TRTEINSTNOADDRDIFF_WIDTH-1:0] CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_DataEff;
assign CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_DataEff = {reg_wr_data[0:0]};
assign CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_Data = (CR_4B_TRTEINSTFEATURES_TRTEINSTNOADDRDIFF_WIDTH'(update_value(64'(CSR_Trteinstfeatures_F_Trteinstnoaddrdiff), 64'(CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFEATURES))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFEATURES_TRTEINSTNOADDRDIFF_WIDTH), .RESET_VALUE(0)) CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_ff   (.out(CSR_Trteinstfeatures_F_Trteinstnoaddrdiff), .in(CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_Data), .en(CSR_Trteinstfeatures_F_Trteinstnoaddrdiff_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRTEINSTFILTERS
logic                                           CSR_Trteinstfilters_F_Trteinstfilters_WrEn;
logic [CR_4B_TRTEINSTFILTERS_TRTEINSTFILTERS_WIDTH-1:0] CSR_Trteinstfilters_F_Trteinstfilters_Data;
logic [CR_4B_TRTEINSTFILTERS_TRTEINSTFILTERS_WIDTH-1:0] CSR_Trteinstfilters_F_Trteinstfilters_DataEff;
assign CSR_Trteinstfilters_F_Trteinstfilters_DataEff = {reg_wr_data[15:0]};
assign CSR_Trteinstfilters_F_Trteinstfilters_Data = (CR_4B_TRTEINSTFILTERS_TRTEINSTFILTERS_WIDTH'(update_value(64'(CSR_Trteinstfilters_F_Trteinstfilters), 64'(CSR_Trteinstfilters_F_Trteinstfilters_DataEff[15:0]), reg_wr_instr_type)));
assign CSR_Trteinstfilters_F_Trteinstfilters_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEINSTFILTERS))));
generic_dff #(.WIDTH(CR_4B_TRTEINSTFILTERS_TRTEINSTFILTERS_WIDTH), .RESET_VALUE(0)) CSR_Trteinstfilters_F_Trteinstfilters_ff   (.out(CSR_Trteinstfilters_F_Trteinstfilters), .in(CSR_Trteinstfilters_F_Trteinstfilters_Data), .en(CSR_Trteinstfilters_F_Trteinstfilters_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRTEFILTER0CONTROL
logic                                           CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_WrEn;
logic [CR_4B_TRTEFILTER0CONTROL_TRTEFILTERMATCHPRIVILEGE_WIDTH-1:0] CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_Data;
logic [CR_4B_TRTEFILTER0CONTROL_TRTEFILTERMATCHPRIVILEGE_WIDTH-1:0] CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_DataEff;
assign CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_DataEff = {reg_wr_data[1:1]};
assign CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_Data = (CR_4B_TRTEFILTER0CONTROL_TRTEFILTERMATCHPRIVILEGE_WIDTH'(update_value(64'(CSR_Trtefilter0Control_F_Trtefiltermatchprivilege), 64'(CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEFILTER0CONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTEFILTER0CONTROL_TRTEFILTERMATCHPRIVILEGE_WIDTH), .RESET_VALUE(0)) CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_ff   (.out(CSR_Trtefilter0Control_F_Trtefiltermatchprivilege), .in(CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_Data), .en(CSR_Trtefilter0Control_F_Trtefiltermatchprivilege_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trtefilter0Control_F_Trtefilterenable_WrEn;
logic [CR_4B_TRTEFILTER0CONTROL_TRTEFILTERENABLE_WIDTH-1:0] CSR_Trtefilter0Control_F_Trtefilterenable_Data;
logic [CR_4B_TRTEFILTER0CONTROL_TRTEFILTERENABLE_WIDTH-1:0] CSR_Trtefilter0Control_F_Trtefilterenable_DataEff;
assign CSR_Trtefilter0Control_F_Trtefilterenable_DataEff = {reg_wr_data[0:0]};
assign CSR_Trtefilter0Control_F_Trtefilterenable_Data = (CR_4B_TRTEFILTER0CONTROL_TRTEFILTERENABLE_WIDTH'(update_value(64'(CSR_Trtefilter0Control_F_Trtefilterenable), 64'(CSR_Trtefilter0Control_F_Trtefilterenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_Trtefilter0Control_F_Trtefilterenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEFILTER0CONTROL))));
generic_dff #(.WIDTH(CR_4B_TRTEFILTER0CONTROL_TRTEFILTERENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trtefilter0Control_F_Trtefilterenable_ff   (.out(CSR_Trtefilter0Control_F_Trtefilterenable), .in(CSR_Trtefilter0Control_F_Trtefilterenable_Data), .en(CSR_Trtefilter0Control_F_Trtefilterenable_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRTEFILTER0MATCHINST
logic                                           CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_WrEn;
logic [CR_4B_TRTEFILTER0MATCHINST_TRTEFILTERMATCHCHOICEPRIVILEGE_WIDTH-1:0] CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_Data;
logic [CR_4B_TRTEFILTER0MATCHINST_TRTEFILTERMATCHCHOICEPRIVILEGE_WIDTH-1:0] CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_DataEff;
assign CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_DataEff = {reg_wr_data[7:0]};
assign CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_Data = (CR_4B_TRTEFILTER0MATCHINST_TRTEFILTERMATCHCHOICEPRIVILEGE_WIDTH'(update_value(64'(CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege), 64'(CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRTEFILTER0MATCHINST))));
generic_dff #(.WIDTH(CR_4B_TRTEFILTER0MATCHINST_TRTEFILTERMATCHCHOICEPRIVILEGE_WIDTH), .RESET_VALUE(0)) CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_ff   (.out(CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege), .in(CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_Data), .en(CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_CDBGNTRACEFRAMECFG
logic                                           CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_WrEn;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMECLOSUREMODE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_Data;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMECLOSUREMODE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_DataEff;
assign CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_DataEff = {reg_wr_data[21:21]};
assign CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_Data = (CR_4B_CDBGNTRACEFRAMECFG_FRAMECLOSUREMODE_WIDTH'(update_value(64'(CSR_CDbgNtraceFrameCfg_F_FrameClosureMode), 64'(CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNTRACEFRAMECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGNTRACEFRAMECFG_FRAMECLOSUREMODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_ff   (.out(CSR_CDbgNtraceFrameCfg_F_FrameClosureMode), .in(CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_Data), .en(CSR_CDbgNtraceFrameCfg_F_FrameClosureMode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_WrEn;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMEMODEENABLE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_Data;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMEMODEENABLE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_DataEff;
assign CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_DataEff = {reg_wr_data[20:20]};
assign CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_Data = (CR_4B_CDBGNTRACEFRAMECFG_FRAMEMODEENABLE_WIDTH'(update_value(64'(CSR_CDbgNtraceFrameCfg_F_FrameModeEnable), 64'(CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNTRACEFRAMECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGNTRACEFRAMECFG_FRAMEMODEENABLE_WIDTH), .RESET_VALUE(1)) CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_ff   (.out(CSR_CDbgNtraceFrameCfg_F_FrameModeEnable), .in(CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_Data), .en(CSR_CDbgNtraceFrameCfg_F_FrameModeEnable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_WrEn;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMELENGHTINBYTES_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_Data;
logic [CR_4B_CDBGNTRACEFRAMECFG_FRAMELENGHTINBYTES_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_DataEff;
assign CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_DataEff = {reg_wr_data[15:12]};
assign CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_Data = (CR_4B_CDBGNTRACEFRAMECFG_FRAMELENGHTINBYTES_WIDTH'(update_value(64'(CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes), 64'(CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNTRACEFRAMECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGNTRACEFRAMECFG_FRAMELENGHTINBYTES_WIDTH), .RESET_VALUE(4'h2)) CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_ff   (.out(CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes), .in(CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_Data), .en(CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_WrEn;
logic [CR_4B_CDBGNTRACEFRAMECFG_TRACEFRAMEFILLBYTE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_Data;
logic [CR_4B_CDBGNTRACEFRAMECFG_TRACEFRAMEFILLBYTE_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_DataEff;
assign CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_DataEff = {reg_wr_data[11:4]};
assign CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_Data = (CR_4B_CDBGNTRACEFRAMECFG_TRACEFRAMEFILLBYTE_WIDTH'(update_value(64'(CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte), 64'(CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNTRACEFRAMECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGNTRACEFRAMECFG_TRACEFRAMEFILLBYTE_WIDTH), .RESET_VALUE(8'hFF)) CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_ff   (.out(CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte), .in(CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_Data), .en(CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_CDbgNtraceFrameCfg_F_TraceSourceId_WrEn;
logic [CR_4B_CDBGNTRACEFRAMECFG_TRACESOURCEID_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_TraceSourceId_Data;
logic [CR_4B_CDBGNTRACEFRAMECFG_TRACESOURCEID_WIDTH-1:0] CSR_CDbgNtraceFrameCfg_F_TraceSourceId_DataEff;
assign CSR_CDbgNtraceFrameCfg_F_TraceSourceId_DataEff = {reg_wr_data[3:0]};
assign CSR_CDbgNtraceFrameCfg_F_TraceSourceId_Data = (CR_4B_CDBGNTRACEFRAMECFG_TRACESOURCEID_WIDTH'(update_value(64'(CSR_CDbgNtraceFrameCfg_F_TraceSourceId), 64'(CSR_CDbgNtraceFrameCfg_F_TraceSourceId_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNtraceFrameCfg_F_TraceSourceId_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNTRACEFRAMECFG))));
generic_dff #(.WIDTH(CR_4B_CDBGNTRACEFRAMECFG_TRACESOURCEID_WIDTH), .RESET_VALUE(0)) CSR_CDbgNtraceFrameCfg_F_TraceSourceId_ff   (.out(CSR_CDbgNtraceFrameCfg_F_TraceSourceId), .in(CSR_CDbgNtraceFrameCfg_F_TraceSourceId_Data), .en(CSR_CDbgNtraceFrameCfg_F_TraceSourceId_WrEn), .clk(clk), .rst_n(reset_n));

//------------------------------------------------------------------------------
// Register Reads
//------------------------------------------------------------------------------

// Construct register vectors
assign CSR_Trtecontrol = {
    5'h0,
    CSR_Trtecontrol_F_Trteformat,
    CSR_Trtecontrol_F_Trtesyncmax,
    2'h0,
    CSR_Trtecontrol_F_Trtesyncmode,
    CSR_Trtecontrol_F_Trteinhibitsrc,
    1'h0,
    CSR_Trtecontrol_F_Trteinststallena,
    CSR_Trtecontrol_F_Trteinststalloroverflow,
    CSR_Trtecontrol_F_Trteinsttriggerenable,
    1'h0,
    CSR_Trtecontrol_F_Trtecontext,
    2'h0,
    CSR_Trtecontrol_F_Trteinstmode,
    CSR_Trtecontrol_F_Trteempty,
    CSR_Trtecontrol_F_Trteinsttracing,
    CSR_Trtecontrol_F_Trteenable,
    CSR_Trtecontrol_F_Trteactive
};
assign CSR_Trteimpl = {
    2'h0,
    CSR_Trteimpl_F_Trtetracepatchenable,
    CSR_Trteimpl_F_Trteclatriggerenable,
    CSR_Trteimpl_F_Trtevendorframelength,
    CSR_Trteimpl_F_Trteprotocolminor,
    CSR_Trteimpl_F_Trteprotocolmajor,
    4'h0,
    CSR_Trteimpl_F_Trtecomptype,
    CSR_Trteimpl_F_Trteverminor,
    CSR_Trteimpl_F_Trtevermajor
};
assign CSR_Trteinstfeatures = {
    CSR_Trteinstfeatures_F_Trtesrcbits,
    CSR_Trteinstfeatures_F_Trtesrcid,
    7'h0,
    CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory,
    6'h0,
    CSR_Trteinstfeatures_F_Trteinstnotrapaddr,
    CSR_Trteinstfeatures_F_Trteinstnoaddrdiff
};
assign CSR_Trteinstfilters = {
    16'h0,
    CSR_Trteinstfilters_F_Trteinstfilters
};
assign CSR_Trtefilter0Control = {
    30'h0,
    CSR_Trtefilter0Control_F_Trtefiltermatchprivilege,
    CSR_Trtefilter0Control_F_Trtefilterenable
};
assign CSR_Trtefilter0Matchinst = {
    24'h0,
    CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege
};
assign CSR_CDbgNtraceFrameCfg = {
    10'h0,
    CSR_CDbgNtraceFrameCfg_F_FrameClosureMode,
    CSR_CDbgNtraceFrameCfg_F_FrameModeEnable,
    4'h0,
    CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes,
    CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte,
    CSR_CDbgNtraceFrameCfg_F_TraceSourceId
};

// Register reads
always_comb begin
    reg_prehit  = '0;
    reg_rd_data = '0;
    unique case (reg_addr)
        ADDR_CSR_TRTECONTROL                    : begin reg_prehit.Cr4BCsrTrtecontrolHit = 1'b1; reg_rd_data = {CSR_Trtecontrol}; end
        ADDR_CSR_TRTEIMPL                       : begin reg_prehit.Cr4BCsrTrteimplHit = 1'b1; reg_rd_data = {CSR_Trteimpl}; end
        ADDR_CSR_TRTEINSTFEATURES               : begin reg_prehit.Cr4BCsrTrteinstfeaturesHit = 1'b1; reg_rd_data = {CSR_Trteinstfeatures}; end
        ADDR_CSR_TRTEINSTFILTERS                : begin reg_prehit.Cr4BCsrTrteinstfiltersHit = 1'b1; reg_rd_data = {CSR_Trteinstfilters}; end
        ADDR_CSR_TRTEFILTER0CONTROL             : begin reg_prehit.Cr4BCsrTrtefilter0ControlHit = 1'b1; reg_rd_data = {CSR_Trtefilter0Control}; end
        ADDR_CSR_TRTEFILTER0MATCHINST           : begin reg_prehit.Cr4BCsrTrtefilter0MatchinstHit = 1'b1; reg_rd_data = {CSR_Trtefilter0Matchinst}; end
        ADDR_CSR_CDBGNTRACEFRAMECFG             : begin reg_prehit.Cr4BCsrCdbgntraceframecfgHit = 1'b1; reg_rd_data = {CSR_CDbgNtraceFrameCfg}; end
        default:  begin
            reg_prehit  = '0;
            reg_rd_data = '0;
        end
    endcase
end

assign reg_hit = reg_read & |reg_prehit;

// Write broadcast
always_comb begin
    unique case (reg_addr_d1)
        ADDR_CSR_TRTECONTROL                    : begin reg_rd_data_d1 = {CSR_Trtecontrol}; end
        ADDR_CSR_TRTEIMPL                       : begin reg_rd_data_d1 = {CSR_Trteimpl}; end
        ADDR_CSR_TRTEINSTFEATURES               : begin reg_rd_data_d1 = {CSR_Trteinstfeatures}; end
        ADDR_CSR_TRTEINSTFILTERS                : begin reg_rd_data_d1 = {CSR_Trteinstfilters}; end
        ADDR_CSR_TRTEFILTER0CONTROL             : begin reg_rd_data_d1 = {CSR_Trtefilter0Control}; end
        ADDR_CSR_TRTEFILTER0MATCHINST           : begin reg_rd_data_d1 = {CSR_Trtefilter0Matchinst}; end
        ADDR_CSR_CDBGNTRACEFRAMECFG             : begin reg_rd_data_d1 = {CSR_CDbgNtraceFrameCfg}; end
        default:  begin
            reg_rd_data_d1 = '0;
        end
    endcase
end

//------------------------------------------------------------------------------
// Outputs
//------------------------------------------------------------------------------

assign CsrWrReady = reg_wr_ready;

if (FLOP_RD_DATA) begin : flop_rd_data
    generic_dff #(.WIDTH(1) , .RESET_VALUE(0)) Csr_Hit_ff    (.out(CsrHit)   , .in(reg_hit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(CR_4B_NUM_REGISTERS) , .RESET_VALUE(0)) Csr_Hit_List_ff    (.out(CsrHitList)   , .in(reg_prehit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32), .RESET_VALUE(0)) Csr_RdData_ff (.out(CsrRdData), .in(reg_rd_data), .en(reg_cs), .clk(clk), .rst_n(reset_n));
end else begin
    assign CsrHit     = reg_hit;
    assign CsrHitList = reg_prehit;
    assign CsrRdData  = reg_rd_data;
end

assign CsrUpdateEn                              = reg_write_d1;
assign CsrUpdateAddr                            = reg_addr_d1;
assign CsrUpdateData                            = reg_rd_data_d1;

assign Cr4BCsrTrtecontrol.Trteformat            = CSR_Trtecontrol_F_Trteformat;
assign Cr4BCsrTrtecontrol.Trtesyncmax           = CSR_Trtecontrol_F_Trtesyncmax;
assign Cr4BCsrTrtecontrol.Trtesyncmode          = CSR_Trtecontrol_F_Trtesyncmode;
assign Cr4BCsrTrtecontrol.Trteinhibitsrc        = CSR_Trtecontrol_F_Trteinhibitsrc;
assign Cr4BCsrTrtecontrol.Trteinststallena      = CSR_Trtecontrol_F_Trteinststallena;
assign Cr4BCsrTrtecontrol.Trteinststalloroverflow = CSR_Trtecontrol_F_Trteinststalloroverflow;
assign Cr4BCsrTrtecontrol.Trteinsttriggerenable = CSR_Trtecontrol_F_Trteinsttriggerenable;
assign Cr4BCsrTrtecontrol.Trtecontext           = CSR_Trtecontrol_F_Trtecontext;
assign Cr4BCsrTrtecontrol.Trteinstmode          = CSR_Trtecontrol_F_Trteinstmode;
assign Cr4BCsrTrtecontrol.Trteempty             = CSR_Trtecontrol_F_Trteempty;
assign Cr4BCsrTrtecontrol.Trteinsttracing       = CSR_Trtecontrol_F_Trteinsttracing;
assign Cr4BCsrTrtecontrol.Trteenable            = CSR_Trtecontrol_F_Trteenable;
assign Cr4BCsrTrtecontrol.Trteactive            = CSR_Trtecontrol_F_Trteactive;
assign Cr4BCsrTrteimpl.Trtetracepatchenable     = CSR_Trteimpl_F_Trtetracepatchenable;
assign Cr4BCsrTrteimpl.Trteclatriggerenable     = CSR_Trteimpl_F_Trteclatriggerenable;
assign Cr4BCsrTrteimpl.Trtevendorframelength    = CSR_Trteimpl_F_Trtevendorframelength;
assign Cr4BCsrTrteimpl.Trteprotocolminor        = CSR_Trteimpl_F_Trteprotocolminor;
assign Cr4BCsrTrteimpl.Trteprotocolmajor        = CSR_Trteimpl_F_Trteprotocolmajor;
assign Cr4BCsrTrteimpl.Trtecomptype             = CSR_Trteimpl_F_Trtecomptype;
assign Cr4BCsrTrteimpl.Trteverminor             = CSR_Trteimpl_F_Trteverminor;
assign Cr4BCsrTrteimpl.Trtevermajor             = CSR_Trteimpl_F_Trtevermajor;
assign Cr4BCsrTrteinstfeatures.Trtesrcbits      = CSR_Trteinstfeatures_F_Trtesrcbits;
assign Cr4BCsrTrteinstfeatures.Trtesrcid        = CSR_Trteinstfeatures_F_Trtesrcid;
assign Cr4BCsrTrteinstfeatures.Trteinstenrepeatedhistory = CSR_Trteinstfeatures_F_Trteinstenrepeatedhistory;
assign Cr4BCsrTrteinstfeatures.Trteinstnotrapaddr = CSR_Trteinstfeatures_F_Trteinstnotrapaddr;
assign Cr4BCsrTrteinstfeatures.Trteinstnoaddrdiff = CSR_Trteinstfeatures_F_Trteinstnoaddrdiff;
assign Cr4BCsrTrteinstfilters.Trteinstfilters   = CSR_Trteinstfilters_F_Trteinstfilters;
assign Cr4BCsrTrtefilter0Control.Trtefiltermatchprivilege = CSR_Trtefilter0Control_F_Trtefiltermatchprivilege;
assign Cr4BCsrTrtefilter0Control.Trtefilterenable = CSR_Trtefilter0Control_F_Trtefilterenable;
assign Cr4BCsrTrtefilter0Matchinst.Trtefiltermatchchoiceprivilege = CSR_Trtefilter0Matchinst_F_Trtefiltermatchchoiceprivilege;
assign Cr4BCsrCdbgntraceframecfg.FrameClosureMode = CSR_CDbgNtraceFrameCfg_F_FrameClosureMode;
assign Cr4BCsrCdbgntraceframecfg.FrameModeEnable = CSR_CDbgNtraceFrameCfg_F_FrameModeEnable;
assign Cr4BCsrCdbgntraceframecfg.FrameLenghtInBytes = CSR_CDbgNtraceFrameCfg_F_FrameLenghtInBytes;
assign Cr4BCsrCdbgntraceframecfg.TraceFrameFillByte = CSR_CDbgNtraceFrameCfg_F_TraceFrameFillByte;
assign Cr4BCsrCdbgntraceframecfg.TraceSourceId  = CSR_CDbgNtraceFrameCfg_F_TraceSourceId;

//------------------------------------------------------------------------------
// update_value
// update register value based on input instr_type.
// instr_type: 2'b01 : op1 data is mask to set bits
// instr_type: 2'b10 : op1 data is mask to clear bits
// instr_type: othes : op1 data is written to register
//------------------------------------------------------------------------------
function automatic [63:0] update_value;
input [63:0] old_value;
input [63:0] op1;
input  [1:0] instr_type;
  begin
    if (instr_type == 2'b01)
       update_value = old_value | op1;
    else if (instr_type == 2'b10)
       update_value = old_value & ~op1;
    else
       update_value = op1;
  end
endfunction


endmodule
// Local Variables:
// verilog-library-directories:(".")
// verilog-library-extensions:(".sv" ".h" ".v")
// verilog-typedef-regexp: "_[eus]$"
// End:



