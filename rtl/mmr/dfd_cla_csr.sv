// SPDX-FileCopyrightText: Copyright 2025 Tenstorrent AI ULC
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Registers
 *
 * This file was AUTO-GENERATED by this script:
 *       create_reg_rtl.py
 * ... from this input file:
 *       cla_mmrs.py
 * ... using this as the top address space:
 *       cla
 *
 * This file should not be modified by hand.
 *
 ******************************************************************************/

module dfd_cla_csr
import dfd_cla_csr_pkg::*;
`include "cla_csr_pkg_list.svh"
#(
    parameter BASE_ADDR    = 0,                 // base address
    parameter ADDR_W       = 23,                // bit width of address
    parameter FLOP_IN_REQ  = 1,                 // add flop stage to bus inputs?
    parameter FLOP_RD_DATA = 1,                 // add flop stage to output rd data?
    parameter INSTR_TYPE_W = 2                  // write instr_type

) (

// Global Interface
input  logic                                    clk,
input  logic                                    reset_n,
input  logic                                    reset_n_warm_ovrride,

// Register Bus
input  logic                                    CsrCs,
input  logic                                    CsrWrEn,
input  logic                        [1:0]       CsrWrStrb,
input  logic                                    CsrRegSel,
input  logic                       [ADDR_W-1:0] CsrAddr,
input  logic                             [63:0] CsrWrData,
input  logic                 [INSTR_TYPE_W-1:0] CsrWrInstrType,
output logic                                    CsrWrReady,
output logic                                    CsrHit,
output ClaCsrHit_s                              CsrHitList,
output logic                             [63:0] CsrRdData,

// Registers
output CrCdbgclacounter0CfgCsr_s                CrCsrCdbgclacounter0Cfg,
output CrCdbgclacounter1CfgCsr_s                CrCsrCdbgclacounter1Cfg,
output CrCdbgclacounter2CfgCsr_s                CrCsrCdbgclacounter2Cfg,
output CrCdbgclacounter3CfgCsr_s                CrCsrCdbgclacounter3Cfg,
output CrCdbgnode0Eap0Csr_s                     CrCsrCdbgnode0Eap0,
output CrCdbgnode0Eap1Csr_s                     CrCsrCdbgnode0Eap1,
output CrCdbgnode1Eap0Csr_s                     CrCsrCdbgnode1Eap0,
output CrCdbgnode1Eap1Csr_s                     CrCsrCdbgnode1Eap1,
output CrCdbgnode2Eap0Csr_s                     CrCsrCdbgnode2Eap0,
output CrCdbgnode2Eap1Csr_s                     CrCsrCdbgnode2Eap1,
output CrCdbgnode3Eap0Csr_s                     CrCsrCdbgnode3Eap0,
output CrCdbgnode3Eap1Csr_s                     CrCsrCdbgnode3Eap1,
output CrCdbgsignalmask0Csr_s                   CrCsrCdbgsignalmask0,
output CrCdbgsignalmatch0Csr_s                  CrCsrCdbgsignalmatch0,
output CrCdbgsignalmask1Csr_s                   CrCsrCdbgsignalmask1,
output CrCdbgsignalmatch1Csr_s                  CrCsrCdbgsignalmatch1,
output CrCdbgsignaledgedetectcfgCsr_s           CrCsrCdbgsignaledgedetectcfg,
output CrCdbgeapstatusCsr_s                     CrCsrCdbgeapstatus,
output CrCdbgclactrlstatusCsr_s                 CrCsrCdbgclactrlstatus,
output CrCdbgrsvd0Csr_s                         CrCsrCdbgrsvd0,
output CrCdbgrsvd1Csr_s                         CrCsrCdbgrsvd1,
output CrCdbgrsvd2Csr_s                         CrCsrCdbgrsvd2,
output CrCdbgtransitionmaskCsr_s                CrCsrCdbgtransitionmask,
output CrCdbgtransitionfromvalueCsr_s           CrCsrCdbgtransitionfromvalue,
output CrCdbgtransitiontovalueCsr_s             CrCsrCdbgtransitiontovalue,
output CrCdbgonescountmaskCsr_s                 CrCsrCdbgonescountmask,
output CrCdbgonescountvalueCsr_s                CrCsrCdbgonescountvalue,
output CrCdbganychangeCsr_s                     CrCsrCdbganychange,
output CrCdbgsignalsnapshotnode0Eap0Csr_s       CrCsrCdbgsignalsnapshotnode0Eap0,
output CrCdbgsignalsnapshotnode0Eap1Csr_s       CrCsrCdbgsignalsnapshotnode0Eap1,
output CrCdbgsignalsnapshotnode1Eap0Csr_s       CrCsrCdbgsignalsnapshotnode1Eap0,
output CrCdbgsignalsnapshotnode1Eap1Csr_s       CrCsrCdbgsignalsnapshotnode1Eap1,
output CrCdbgsignalsnapshotnode2Eap0Csr_s       CrCsrCdbgsignalsnapshotnode2Eap0,
output CrCdbgsignalsnapshotnode2Eap1Csr_s       CrCsrCdbgsignalsnapshotnode2Eap1,
output CrCdbgsignalsnapshotnode3Eap0Csr_s       CrCsrCdbgsignalsnapshotnode3Eap0,
output CrCdbgsignalsnapshotnode3Eap1Csr_s       CrCsrCdbgsignalsnapshotnode3Eap1,
output CrCdbgclatimematchCsr_s                  CrCsrCdbgclatimematch,
output CrCdbgsignalmask2Csr_s                   CrCsrCdbgsignalmask2,
output CrCdbgsignalmatch2Csr_s                  CrCsrCdbgsignalmatch2,
output CrCdbgsignalmask3Csr_s                   CrCsrCdbgsignalmask3,
output CrCdbgsignalmatch3Csr_s                  CrCsrCdbgsignalmatch3,
output CrCdbgnode0Eap2Csr_s                     CrCsrCdbgnode0Eap2,
output CrCdbgnode0Eap3Csr_s                     CrCsrCdbgnode0Eap3,
output CrCdbgnode1Eap2Csr_s                     CrCsrCdbgnode1Eap2,
output CrCdbgnode1Eap3Csr_s                     CrCsrCdbgnode1Eap3,
output CrCdbgnode2Eap2Csr_s                     CrCsrCdbgnode2Eap2,
output CrCdbgnode2Eap3Csr_s                     CrCsrCdbgnode2Eap3,
output CrCdbgnode3Eap2Csr_s                     CrCsrCdbgnode3Eap2,
output CrCdbgnode3Eap3Csr_s                     CrCsrCdbgnode3Eap3,
output CrCdbgsignalsnapshotnode0Eap2Csr_s       CrCsrCdbgsignalsnapshotnode0Eap2,
output CrCdbgsignalsnapshotnode0Eap3Csr_s       CrCsrCdbgsignalsnapshotnode0Eap3,
output CrCdbgsignalsnapshotnode1Eap2Csr_s       CrCsrCdbgsignalsnapshotnode1Eap2,
output CrCdbgsignalsnapshotnode1Eap3Csr_s       CrCsrCdbgsignalsnapshotnode1Eap3,
output CrCdbgsignalsnapshotnode2Eap2Csr_s       CrCsrCdbgsignalsnapshotnode2Eap2,
output CrCdbgsignalsnapshotnode2Eap3Csr_s       CrCsrCdbgsignalsnapshotnode2Eap3,
output CrCdbgsignalsnapshotnode3Eap2Csr_s       CrCsrCdbgsignalsnapshotnode3Eap2,
output CrCdbgsignalsnapshotnode3Eap3Csr_s       CrCsrCdbgsignalsnapshotnode3Eap3,
output CrCdbgsignaldelaymuxselCsr_s             CrCsrCdbgsignaldelaymuxsel,
output CrCdbgclatimestampsyncCsr_s              CrCsrCdbgclatimestampsync,
output CrCdbgclaxtriggertimestretchCsr_s        CrCsrCdbgclaxtriggertimestretch,
output CrCrscratchpadCsr_s                      CrCsrCrscratchpad,
output CrScratchCsr_s                           CrCsrScratch,

// HW Write Ports
input CrCdbgclacounter0CfgCsrWr_s               CrCsrCdbgclacounter0CfgWr,
input CrCdbgclacounter1CfgCsrWr_s               CrCsrCdbgclacounter1CfgWr,
input CrCdbgclacounter2CfgCsrWr_s               CrCsrCdbgclacounter2CfgWr,
input CrCdbgclacounter3CfgCsrWr_s               CrCsrCdbgclacounter3CfgWr,
input CrCdbgeapstatusCsrWr_s                    CrCsrCdbgeapstatusWr,
input CrCdbgclactrlstatusCsrWr_s                CrCsrCdbgclactrlstatusWr,
input CrCdbgsignalsnapshotnode0Eap0CsrWr_s      CrCsrCdbgsignalsnapshotnode0Eap0Wr,
input CrCdbgsignalsnapshotnode0Eap1CsrWr_s      CrCsrCdbgsignalsnapshotnode0Eap1Wr,
input CrCdbgsignalsnapshotnode1Eap0CsrWr_s      CrCsrCdbgsignalsnapshotnode1Eap0Wr,
input CrCdbgsignalsnapshotnode1Eap1CsrWr_s      CrCsrCdbgsignalsnapshotnode1Eap1Wr,
input CrCdbgsignalsnapshotnode2Eap0CsrWr_s      CrCsrCdbgsignalsnapshotnode2Eap0Wr,
input CrCdbgsignalsnapshotnode2Eap1CsrWr_s      CrCsrCdbgsignalsnapshotnode2Eap1Wr,
input CrCdbgsignalsnapshotnode3Eap0CsrWr_s      CrCsrCdbgsignalsnapshotnode3Eap0Wr,
input CrCdbgsignalsnapshotnode3Eap1CsrWr_s      CrCsrCdbgsignalsnapshotnode3Eap1Wr,
input CrCdbgsignalsnapshotnode0Eap2CsrWr_s      CrCsrCdbgsignalsnapshotnode0Eap2Wr,
input CrCdbgsignalsnapshotnode0Eap3CsrWr_s      CrCsrCdbgsignalsnapshotnode0Eap3Wr,
input CrCdbgsignalsnapshotnode1Eap2CsrWr_s      CrCsrCdbgsignalsnapshotnode1Eap2Wr,
input CrCdbgsignalsnapshotnode1Eap3CsrWr_s      CrCsrCdbgsignalsnapshotnode1Eap3Wr,
input CrCdbgsignalsnapshotnode2Eap2CsrWr_s      CrCsrCdbgsignalsnapshotnode2Eap2Wr,
input CrCdbgsignalsnapshotnode2Eap3CsrWr_s      CrCsrCdbgsignalsnapshotnode2Eap3Wr,
input CrCdbgsignalsnapshotnode3Eap2CsrWr_s      CrCsrCdbgsignalsnapshotnode3Eap2Wr,
input CrCdbgsignalsnapshotnode3Eap3CsrWr_s      CrCsrCdbgsignalsnapshotnode3Eap3Wr,
// Write Broadcast Bus
output logic                                    CsrUpdateEn,
output logic                       [ADDR_W-1:0] CsrUpdateAddr,
output logic                             [63:0] CsrUpdateData

);


////////////////////////////////////////////////////////////////////////////////
// Internal Parameters
////////////////////////////////////////////////////////////////////////////////

// Addresses
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLACOUNTER0CFG    = ADDR_W'(BASE_ADDR + 'h3100);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLACOUNTER1CFG    = ADDR_W'(BASE_ADDR + 'h3108);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLACOUNTER2CFG    = ADDR_W'(BASE_ADDR + 'h3110);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLACOUNTER3CFG    = ADDR_W'(BASE_ADDR + 'h3118);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE0EAP0         = ADDR_W'(BASE_ADDR + 'h3120);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE0EAP1         = ADDR_W'(BASE_ADDR + 'h3128);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE1EAP0         = ADDR_W'(BASE_ADDR + 'h3130);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE1EAP1         = ADDR_W'(BASE_ADDR + 'h3138);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE2EAP0         = ADDR_W'(BASE_ADDR + 'h3140);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE2EAP1         = ADDR_W'(BASE_ADDR + 'h3148);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE3EAP0         = ADDR_W'(BASE_ADDR + 'h3150);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE3EAP1         = ADDR_W'(BASE_ADDR + 'h3158);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMASK0       = ADDR_W'(BASE_ADDR + 'h3160);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMATCH0      = ADDR_W'(BASE_ADDR + 'h3168);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMASK1       = ADDR_W'(BASE_ADDR + 'h3170);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMATCH1      = ADDR_W'(BASE_ADDR + 'h3178);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALEDGEDETECTCFG = ADDR_W'(BASE_ADDR + 'h3180);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGEAPSTATUS         = ADDR_W'(BASE_ADDR + 'h3188);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLACTRLSTATUS     = ADDR_W'(BASE_ADDR + 'h3190);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGRSVD0             = ADDR_W'(BASE_ADDR + 'h3198);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGRSVD1             = ADDR_W'(BASE_ADDR + 'h31A0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGRSVD2             = ADDR_W'(BASE_ADDR + 'h31A8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGTRANSITIONMASK    = ADDR_W'(BASE_ADDR + 'h31B0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGTRANSITIONFROMVALUE = ADDR_W'(BASE_ADDR + 'h31B8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGTRANSITIONTOVALUE = ADDR_W'(BASE_ADDR + 'h31C0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGONESCOUNTMASK     = ADDR_W'(BASE_ADDR + 'h31C8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGONESCOUNTVALUE    = ADDR_W'(BASE_ADDR + 'h31D0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGANYCHANGE         = ADDR_W'(BASE_ADDR + 'h31D8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP0 = ADDR_W'(BASE_ADDR + 'h31E0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP1 = ADDR_W'(BASE_ADDR + 'h31E8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP0 = ADDR_W'(BASE_ADDR + 'h31F0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP1 = ADDR_W'(BASE_ADDR + 'h31F8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP0 = ADDR_W'(BASE_ADDR + 'h3200);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP1 = ADDR_W'(BASE_ADDR + 'h3208);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP0 = ADDR_W'(BASE_ADDR + 'h3210);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP1 = ADDR_W'(BASE_ADDR + 'h3218);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLATIMEMATCH      = ADDR_W'(BASE_ADDR + 'h3220);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMASK2       = ADDR_W'(BASE_ADDR + 'h3228);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMATCH2      = ADDR_W'(BASE_ADDR + 'h3230);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMASK3       = ADDR_W'(BASE_ADDR + 'h3238);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALMATCH3      = ADDR_W'(BASE_ADDR + 'h3240);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE0EAP2         = ADDR_W'(BASE_ADDR + 'h3248);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE0EAP3         = ADDR_W'(BASE_ADDR + 'h3250);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE1EAP2         = ADDR_W'(BASE_ADDR + 'h3258);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE1EAP3         = ADDR_W'(BASE_ADDR + 'h3260);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE2EAP2         = ADDR_W'(BASE_ADDR + 'h3268);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE2EAP3         = ADDR_W'(BASE_ADDR + 'h3270);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE3EAP2         = ADDR_W'(BASE_ADDR + 'h3278);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGNODE3EAP3         = ADDR_W'(BASE_ADDR + 'h3280);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP2 = ADDR_W'(BASE_ADDR + 'h3288);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP3 = ADDR_W'(BASE_ADDR + 'h3290);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP2 = ADDR_W'(BASE_ADDR + 'h3298);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP3 = ADDR_W'(BASE_ADDR + 'h32A0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP2 = ADDR_W'(BASE_ADDR + 'h32A8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP3 = ADDR_W'(BASE_ADDR + 'h32B0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP2 = ADDR_W'(BASE_ADDR + 'h32B8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP3 = ADDR_W'(BASE_ADDR + 'h32C0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGSIGNALDELAYMUXSEL = ADDR_W'(BASE_ADDR + 'h32C8);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLATIMESTAMPSYNC  = ADDR_W'(BASE_ADDR + 'h32D0);
localparam   [ADDR_W-1:0] ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH = ADDR_W'(BASE_ADDR + 'h32D8);
localparam   [ADDR_W-1:0] ADDR_CSR_CRSCRATCHPAD          = ADDR_W'(BASE_ADDR + 'h33F0);
localparam   [ADDR_W-1:0] ADDR_CSR_SCRATCH               = ADDR_W'(BASE_ADDR + 'h33F8);



////////////////////////////////////////////////////////////////////////////////
// Signal Declarations
////////////////////////////////////////////////////////////////////////////////

logic                       reg_cs;
logic                       reg_wr_en;
logic           [1:0]       reg_wr_strb;
logic          [ADDR_W-1:0] reg_addr;
logic                       reg_wr_sel;
logic                       reg_rd_sel;
logic                [63:0] reg_wr_data;
logic    [INSTR_TYPE_W-1:0] reg_wr_instr_type;

logic                       reg_wr_ready;
ClaCsrHit_s                 reg_prehit;
logic                       reg_hit;
logic                [63:0] reg_rd_data;

logic                       reg_write;
logic                       reg_read;

logic          [ADDR_W-1:0] reg_addr_d1;
logic                       reg_write_d1;
logic                [63:0] reg_rd_data_d1;

// Registers
logic                [63:0] CSR_CDbgClaCounter0Cfg;
logic                [63:0] CSR_CDbgClaCounter1Cfg;
logic                [63:0] CSR_CDbgClaCounter2Cfg;
logic                [63:0] CSR_CDbgClaCounter3Cfg;
logic                [63:0] CSR_CDbgNode0Eap0;
logic                [63:0] CSR_CDbgNode0Eap1;
logic                [63:0] CSR_CDbgNode1Eap0;
logic                [63:0] CSR_CDbgNode1Eap1;
logic                [63:0] CSR_CDbgNode2Eap0;
logic                [63:0] CSR_CDbgNode2Eap1;
logic                [63:0] CSR_CDbgNode3Eap0;
logic                [63:0] CSR_CDbgNode3Eap1;
logic                [63:0] CSR_CDbgSignalMask0;
logic                [63:0] CSR_CDbgSignalMatch0;
logic                [63:0] CSR_CDbgSignalMask1;
logic                [63:0] CSR_CDbgSignalMatch1;
logic                [63:0] CSR_CDbgSignalEdgeDetectCfg;
logic                [63:0] CSR_CDbgEapStatus;
logic                [63:0] CSR_CDbgClaCtrlStatus;
logic                [63:0] CSR_CDbgRsvd0;
logic                [63:0] CSR_CDbgRsvd1;
logic                [63:0] CSR_CDbgRsvd2;
logic                [63:0] CSR_CDbgTransitionMask;
logic                [63:0] CSR_CDbgTransitionFromValue;
logic                [63:0] CSR_CDbgTransitionToValue;
logic                [63:0] CSR_CDbgOnesCountMask;
logic                [63:0] CSR_CDbgOnesCountValue;
logic                [63:0] CSR_CDbgAnyChange;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap0;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap1;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap0;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap1;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap0;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap1;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap0;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap1;
logic                [63:0] CSR_CDbgClaTimeMatch;
logic                [63:0] CSR_CDbgSignalMask2;
logic                [63:0] CSR_CDbgSignalMatch2;
logic                [63:0] CSR_CDbgSignalMask3;
logic                [63:0] CSR_CDbgSignalMatch3;
logic                [63:0] CSR_CDbgNode0Eap2;
logic                [63:0] CSR_CDbgNode0Eap3;
logic                [63:0] CSR_CDbgNode1Eap2;
logic                [63:0] CSR_CDbgNode1Eap3;
logic                [63:0] CSR_CDbgNode2Eap2;
logic                [63:0] CSR_CDbgNode2Eap3;
logic                [63:0] CSR_CDbgNode3Eap2;
logic                [63:0] CSR_CDbgNode3Eap3;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap2;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap3;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap2;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap3;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap2;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap3;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap2;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap3;
logic                [63:0] CSR_CDbgSignalDelayMuxSel;
logic                [63:0] CSR_CDbgClaTimestampsync;
logic                [63:0] CSR_CDbgClaXtriggerTimestretch;
logic                [63:0] CSR_CrScratchpad;
logic                [63:0] CSR_Scratch;

// Fields
logic                 [0:0] CSR_CDbgClaCounter0Cfg_F_Rsvd;
logic                [14:0] CSR_CDbgClaCounter0Cfg_F_UpperTarget;
logic                [14:0] CSR_CDbgClaCounter0Cfg_F_UpperCounter;
logic                 [0:0] CSR_CDbgClaCounter0Cfg_F_ResetOnTarget;
logic                [15:0] CSR_CDbgClaCounter0Cfg_F_Target;
logic                [15:0] CSR_CDbgClaCounter0Cfg_F_Counter;
logic                 [0:0] CSR_CDbgClaCounter1Cfg_F_Rsvd;
logic                [14:0] CSR_CDbgClaCounter1Cfg_F_UpperTarget;
logic                [14:0] CSR_CDbgClaCounter1Cfg_F_UpperCounter;
logic                 [0:0] CSR_CDbgClaCounter1Cfg_F_ResetOnTarget;
logic                [15:0] CSR_CDbgClaCounter1Cfg_F_Target;
logic                [15:0] CSR_CDbgClaCounter1Cfg_F_Counter;
logic                 [0:0] CSR_CDbgClaCounter2Cfg_F_Rsvd;
logic                [14:0] CSR_CDbgClaCounter2Cfg_F_UpperTarget;
logic                [14:0] CSR_CDbgClaCounter2Cfg_F_UpperCounter;
logic                 [0:0] CSR_CDbgClaCounter2Cfg_F_ResetOnTarget;
logic                [15:0] CSR_CDbgClaCounter2Cfg_F_Target;
logic                [15:0] CSR_CDbgClaCounter2Cfg_F_Counter;
logic                 [0:0] CSR_CDbgClaCounter3Cfg_F_Rsvd;
logic                [14:0] CSR_CDbgClaCounter3Cfg_F_UpperTarget;
logic                [14:0] CSR_CDbgClaCounter3Cfg_F_UpperCounter;
logic                 [0:0] CSR_CDbgClaCounter3Cfg_F_ResetOnTarget;
logic                [15:0] CSR_CDbgClaCounter3Cfg_F_Target;
logic                [15:0] CSR_CDbgClaCounter3Cfg_F_Counter;
logic                 [5:0] CSR_CDbgNode0Eap0_F_Action3;
logic                 [5:0] CSR_CDbgNode0Eap0_F_Action2;
logic                 [7:0] CSR_CDbgNode0Eap0_F_Udf;
logic                 [5:0] CSR_CDbgNode0Eap0_F_EventType2;
logic                 [0:0] CSR_CDbgNode0Eap0_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode0Eap0_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode0Eap0_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode0Eap0_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode0Eap0_F_EventType1;
logic                 [5:0] CSR_CDbgNode0Eap0_F_EventType0;
logic                 [1:0] CSR_CDbgNode0Eap0_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode0Eap0_F_Action1;
logic                 [5:0] CSR_CDbgNode0Eap0_F_Action0;
logic                 [1:0] CSR_CDbgNode0Eap0_F_DestNode;
logic                 [5:0] CSR_CDbgNode0Eap1_F_Action3;
logic                 [5:0] CSR_CDbgNode0Eap1_F_Action2;
logic                 [7:0] CSR_CDbgNode0Eap1_F_Udf;
logic                 [5:0] CSR_CDbgNode0Eap1_F_EventType2;
logic                 [0:0] CSR_CDbgNode0Eap1_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode0Eap1_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode0Eap1_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode0Eap1_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode0Eap1_F_EventType1;
logic                 [5:0] CSR_CDbgNode0Eap1_F_EventType0;
logic                 [1:0] CSR_CDbgNode0Eap1_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode0Eap1_F_Action1;
logic                 [5:0] CSR_CDbgNode0Eap1_F_Action0;
logic                 [1:0] CSR_CDbgNode0Eap1_F_DestNode;
logic                 [5:0] CSR_CDbgNode1Eap0_F_Action3;
logic                 [5:0] CSR_CDbgNode1Eap0_F_Action2;
logic                 [7:0] CSR_CDbgNode1Eap0_F_Udf;
logic                 [5:0] CSR_CDbgNode1Eap0_F_EventType2;
logic                 [0:0] CSR_CDbgNode1Eap0_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode1Eap0_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode1Eap0_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode1Eap0_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode1Eap0_F_EventType1;
logic                 [5:0] CSR_CDbgNode1Eap0_F_EventType0;
logic                 [1:0] CSR_CDbgNode1Eap0_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode1Eap0_F_Action1;
logic                 [5:0] CSR_CDbgNode1Eap0_F_Action0;
logic                 [1:0] CSR_CDbgNode1Eap0_F_DestNode;
logic                 [5:0] CSR_CDbgNode1Eap1_F_Action3;
logic                 [5:0] CSR_CDbgNode1Eap1_F_Action2;
logic                 [7:0] CSR_CDbgNode1Eap1_F_Udf;
logic                 [5:0] CSR_CDbgNode1Eap1_F_EventType2;
logic                 [0:0] CSR_CDbgNode1Eap1_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode1Eap1_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode1Eap1_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode1Eap1_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode1Eap1_F_EventType1;
logic                 [5:0] CSR_CDbgNode1Eap1_F_EventType0;
logic                 [1:0] CSR_CDbgNode1Eap1_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode1Eap1_F_Action1;
logic                 [5:0] CSR_CDbgNode1Eap1_F_Action0;
logic                 [1:0] CSR_CDbgNode1Eap1_F_DestNode;
logic                 [5:0] CSR_CDbgNode2Eap0_F_Action3;
logic                 [5:0] CSR_CDbgNode2Eap0_F_Action2;
logic                 [7:0] CSR_CDbgNode2Eap0_F_Udf;
logic                 [5:0] CSR_CDbgNode2Eap0_F_EventType2;
logic                 [0:0] CSR_CDbgNode2Eap0_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode2Eap0_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode2Eap0_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode2Eap0_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode2Eap0_F_EventType1;
logic                 [5:0] CSR_CDbgNode2Eap0_F_EventType0;
logic                 [1:0] CSR_CDbgNode2Eap0_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode2Eap0_F_Action1;
logic                 [5:0] CSR_CDbgNode2Eap0_F_Action0;
logic                 [1:0] CSR_CDbgNode2Eap0_F_DestNode;
logic                 [5:0] CSR_CDbgNode2Eap1_F_Action3;
logic                 [5:0] CSR_CDbgNode2Eap1_F_Action2;
logic                 [7:0] CSR_CDbgNode2Eap1_F_Udf;
logic                 [5:0] CSR_CDbgNode2Eap1_F_EventType2;
logic                 [0:0] CSR_CDbgNode2Eap1_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode2Eap1_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode2Eap1_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode2Eap1_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode2Eap1_F_EventType1;
logic                 [5:0] CSR_CDbgNode2Eap1_F_EventType0;
logic                 [1:0] CSR_CDbgNode2Eap1_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode2Eap1_F_Action1;
logic                 [5:0] CSR_CDbgNode2Eap1_F_Action0;
logic                 [1:0] CSR_CDbgNode2Eap1_F_DestNode;
logic                 [5:0] CSR_CDbgNode3Eap0_F_Action3;
logic                 [5:0] CSR_CDbgNode3Eap0_F_Action2;
logic                 [7:0] CSR_CDbgNode3Eap0_F_Udf;
logic                 [5:0] CSR_CDbgNode3Eap0_F_EventType2;
logic                 [0:0] CSR_CDbgNode3Eap0_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode3Eap0_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode3Eap0_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode3Eap0_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode3Eap0_F_EventType1;
logic                 [5:0] CSR_CDbgNode3Eap0_F_EventType0;
logic                 [1:0] CSR_CDbgNode3Eap0_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode3Eap0_F_Action1;
logic                 [5:0] CSR_CDbgNode3Eap0_F_Action0;
logic                 [1:0] CSR_CDbgNode3Eap0_F_DestNode;
logic                 [5:0] CSR_CDbgNode3Eap1_F_Action3;
logic                 [5:0] CSR_CDbgNode3Eap1_F_Action2;
logic                 [7:0] CSR_CDbgNode3Eap1_F_Udf;
logic                 [5:0] CSR_CDbgNode3Eap1_F_EventType2;
logic                 [0:0] CSR_CDbgNode3Eap1_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode3Eap1_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode3Eap1_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode3Eap1_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode3Eap1_F_EventType1;
logic                 [5:0] CSR_CDbgNode3Eap1_F_EventType0;
logic                 [1:0] CSR_CDbgNode3Eap1_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode3Eap1_F_Action1;
logic                 [5:0] CSR_CDbgNode3Eap1_F_Action0;
logic                 [1:0] CSR_CDbgNode3Eap1_F_DestNode;
logic                [63:0] CSR_CDbgSignalMask0_F_Value;
logic                [63:0] CSR_CDbgSignalMatch0_F_Value;
logic                [63:0] CSR_CDbgSignalMask1_F_Value;
logic                [63:0] CSR_CDbgSignalMatch1_F_Value;
logic                 [0:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1;
logic                 [5:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select;
logic                 [0:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0;
logic                 [5:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap3W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap2W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap1W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap0W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap3W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap2W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap1W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap0W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap3W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap2W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap1W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap0W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap3W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap2W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap1W2C;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap0W2C;
logic                [15:0] CSR_CDbgEapStatus_F_Rsvd3116;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap3;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap2;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap1;
logic                 [0:0] CSR_CDbgEapStatus_F_Node3Eap0;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap3;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap2;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap1;
logic                 [0:0] CSR_CDbgEapStatus_F_Node2Eap0;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap3;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap2;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap1;
logic                 [0:0] CSR_CDbgEapStatus_F_Node1Eap0;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap3;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap2;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap1;
logic                 [0:0] CSR_CDbgEapStatus_F_Node0Eap0;
logic                 [0:0] CSR_CDbgClaCtrlStatus_F_ClaLock;
logic                [46:0] CSR_CDbgClaCtrlStatus_F_Rsvd6216;
logic                 [0:0] CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt;
logic                 [0:0] CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt;
logic                 [6:0] CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay;
logic                 [0:0] CSR_CDbgClaCtrlStatus_F_EnableCla;
logic                 [0:0] CSR_CDbgClaCtrlStatus_F_EnableEap;
logic                 [1:0] CSR_CDbgClaCtrlStatus_F_CurrentNode;
logic                [63:0] CSR_CDbgRsvd0_F_Value;
logic                [63:0] CSR_CDbgRsvd1_F_Value;
logic                [63:0] CSR_CDbgRsvd2_F_Value;
logic                [63:0] CSR_CDbgTransitionMask_F_Value;
logic                [63:0] CSR_CDbgTransitionFromValue_F_Value;
logic                [63:0] CSR_CDbgTransitionToValue_F_Value;
logic                [63:0] CSR_CDbgOnesCountMask_F_Value;
logic                [63:0] CSR_CDbgOnesCountValue_F_Value;
logic                [63:0] CSR_CDbgAnyChange_F_Mask;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap0_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap1_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap0_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap1_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap0_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap1_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap0_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap1_F_Value;
logic                [63:0] CSR_CDbgClaTimeMatch_F_TimeMatchVal;
logic                [63:0] CSR_CDbgSignalMask2_F_Value;
logic                [63:0] CSR_CDbgSignalMatch2_F_Value;
logic                [63:0] CSR_CDbgSignalMask3_F_Value;
logic                [63:0] CSR_CDbgSignalMatch3_F_Value;
logic                 [5:0] CSR_CDbgNode0Eap2_F_Action3;
logic                 [5:0] CSR_CDbgNode0Eap2_F_Action2;
logic                 [7:0] CSR_CDbgNode0Eap2_F_Udf;
logic                 [5:0] CSR_CDbgNode0Eap2_F_EventType2;
logic                 [0:0] CSR_CDbgNode0Eap2_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode0Eap2_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode0Eap2_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode0Eap2_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode0Eap2_F_EventType1;
logic                 [5:0] CSR_CDbgNode0Eap2_F_EventType0;
logic                 [1:0] CSR_CDbgNode0Eap2_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode0Eap2_F_Action1;
logic                 [5:0] CSR_CDbgNode0Eap2_F_Action0;
logic                 [1:0] CSR_CDbgNode0Eap2_F_DestNode;
logic                 [5:0] CSR_CDbgNode0Eap3_F_Action3;
logic                 [5:0] CSR_CDbgNode0Eap3_F_Action2;
logic                 [7:0] CSR_CDbgNode0Eap3_F_Udf;
logic                 [5:0] CSR_CDbgNode0Eap3_F_EventType2;
logic                 [0:0] CSR_CDbgNode0Eap3_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode0Eap3_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode0Eap3_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode0Eap3_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode0Eap3_F_EventType1;
logic                 [5:0] CSR_CDbgNode0Eap3_F_EventType0;
logic                 [1:0] CSR_CDbgNode0Eap3_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode0Eap3_F_Action1;
logic                 [5:0] CSR_CDbgNode0Eap3_F_Action0;
logic                 [1:0] CSR_CDbgNode0Eap3_F_DestNode;
logic                 [5:0] CSR_CDbgNode1Eap2_F_Action3;
logic                 [5:0] CSR_CDbgNode1Eap2_F_Action2;
logic                 [7:0] CSR_CDbgNode1Eap2_F_Udf;
logic                 [5:0] CSR_CDbgNode1Eap2_F_EventType2;
logic                 [0:0] CSR_CDbgNode1Eap2_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode1Eap2_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode1Eap2_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode1Eap2_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode1Eap2_F_EventType1;
logic                 [5:0] CSR_CDbgNode1Eap2_F_EventType0;
logic                 [1:0] CSR_CDbgNode1Eap2_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode1Eap2_F_Action1;
logic                 [5:0] CSR_CDbgNode1Eap2_F_Action0;
logic                 [1:0] CSR_CDbgNode1Eap2_F_DestNode;
logic                 [5:0] CSR_CDbgNode1Eap3_F_Action3;
logic                 [5:0] CSR_CDbgNode1Eap3_F_Action2;
logic                 [7:0] CSR_CDbgNode1Eap3_F_Udf;
logic                 [5:0] CSR_CDbgNode1Eap3_F_EventType2;
logic                 [0:0] CSR_CDbgNode1Eap3_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode1Eap3_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode1Eap3_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode1Eap3_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode1Eap3_F_EventType1;
logic                 [5:0] CSR_CDbgNode1Eap3_F_EventType0;
logic                 [1:0] CSR_CDbgNode1Eap3_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode1Eap3_F_Action1;
logic                 [5:0] CSR_CDbgNode1Eap3_F_Action0;
logic                 [1:0] CSR_CDbgNode1Eap3_F_DestNode;
logic                 [5:0] CSR_CDbgNode2Eap2_F_Action3;
logic                 [5:0] CSR_CDbgNode2Eap2_F_Action2;
logic                 [7:0] CSR_CDbgNode2Eap2_F_Udf;
logic                 [5:0] CSR_CDbgNode2Eap2_F_EventType2;
logic                 [0:0] CSR_CDbgNode2Eap2_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode2Eap2_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode2Eap2_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode2Eap2_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode2Eap2_F_EventType1;
logic                 [5:0] CSR_CDbgNode2Eap2_F_EventType0;
logic                 [1:0] CSR_CDbgNode2Eap2_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode2Eap2_F_Action1;
logic                 [5:0] CSR_CDbgNode2Eap2_F_Action0;
logic                 [1:0] CSR_CDbgNode2Eap2_F_DestNode;
logic                 [5:0] CSR_CDbgNode2Eap3_F_Action3;
logic                 [5:0] CSR_CDbgNode2Eap3_F_Action2;
logic                 [7:0] CSR_CDbgNode2Eap3_F_Udf;
logic                 [5:0] CSR_CDbgNode2Eap3_F_EventType2;
logic                 [0:0] CSR_CDbgNode2Eap3_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode2Eap3_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode2Eap3_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode2Eap3_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode2Eap3_F_EventType1;
logic                 [5:0] CSR_CDbgNode2Eap3_F_EventType0;
logic                 [1:0] CSR_CDbgNode2Eap3_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode2Eap3_F_Action1;
logic                 [5:0] CSR_CDbgNode2Eap3_F_Action0;
logic                 [1:0] CSR_CDbgNode2Eap3_F_DestNode;
logic                 [5:0] CSR_CDbgNode3Eap2_F_Action3;
logic                 [5:0] CSR_CDbgNode3Eap2_F_Action2;
logic                 [7:0] CSR_CDbgNode3Eap2_F_Udf;
logic                 [5:0] CSR_CDbgNode3Eap2_F_EventType2;
logic                 [0:0] CSR_CDbgNode3Eap2_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode3Eap2_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode3Eap2_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode3Eap2_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode3Eap2_F_EventType1;
logic                 [5:0] CSR_CDbgNode3Eap2_F_EventType0;
logic                 [1:0] CSR_CDbgNode3Eap2_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode3Eap2_F_Action1;
logic                 [5:0] CSR_CDbgNode3Eap2_F_Action0;
logic                 [1:0] CSR_CDbgNode3Eap2_F_DestNode;
logic                 [5:0] CSR_CDbgNode3Eap3_F_Action3;
logic                 [5:0] CSR_CDbgNode3Eap3_F_Action2;
logic                 [7:0] CSR_CDbgNode3Eap3_F_Udf;
logic                 [5:0] CSR_CDbgNode3Eap3_F_EventType2;
logic                 [0:0] CSR_CDbgNode3Eap3_F_CustomAction1Enable;
logic                 [0:0] CSR_CDbgNode3Eap3_F_CustomAction0Enable;
logic                 [3:0] CSR_CDbgNode3Eap3_F_CustomAction1;
logic                 [3:0] CSR_CDbgNode3Eap3_F_CustomAction0;
logic                 [5:0] CSR_CDbgNode3Eap3_F_EventType1;
logic                 [5:0] CSR_CDbgNode3Eap3_F_EventType0;
logic                 [1:0] CSR_CDbgNode3Eap3_F_LogicalOp;
logic                 [5:0] CSR_CDbgNode3Eap3_F_Action1;
logic                 [5:0] CSR_CDbgNode3Eap3_F_Action0;
logic                 [1:0] CSR_CDbgNode3Eap3_F_DestNode;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap2_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode0Eap3_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap2_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode1Eap3_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap2_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode2Eap3_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap2_F_Value;
logic                [63:0] CSR_CDbgSignalSnapshotNode3Eap3_F_Value;
logic                [47:0] CSR_CDbgSignalDelayMuxSel_F_Rsvd;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg7;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg6;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg5;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg4;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg3;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg2;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg1;
logic                 [1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg0;
logic                 [0:0] CSR_CDbgClaTimestampsync_F_Timesyncmodeenable;
logic                [62:0] CSR_CDbgClaTimestampsync_F_Timestamp;
logic                [47:0] CSR_CDbgClaXtriggerTimestretch_F_Rsvd;
logic                 [7:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch;
logic                 [7:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch;
logic                [63:0] CSR_CrScratchpad_F_Data;
logic                [63:0] CSR_Scratch_F_Data;



////////////////////////////////////////////////////////////////////////////////
// Main Module Functionality
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Inputs
//------------------------------------------------------------------------------

if (FLOP_IN_REQ) begin : flop_in_req
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_cs_ff             (.out(reg_cs)   , .in(CsrCs)    , .en(CsrCs|reg_cs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_en_ff          (.out(reg_wr_en), .in(CsrWrEn)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(2)           , .RESET_VALUE(0)) reg_wr_strb_ff        (.out(reg_wr_strb), .in(CsrWrStrb)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(ADDR_W)      , .RESET_VALUE(0)) reg_addr_ff           (.out(reg_addr) , .in(CsrAddr)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(64)          , .RESET_VALUE(0)) reg_wr_data_ff        (.out(reg_wr_data), .in(CsrWrData), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_rd_sel_ff         (.out(reg_rd_sel)  , .in(~CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_sel_ff         (.out(reg_wr_sel)  , .in(CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));    
    generic_dff #(.WIDTH(INSTR_TYPE_W), .RESET_VALUE(0)) reg_wr_instr_type_ff  (.out(reg_wr_instr_type), .in(CsrWrInstrType), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_ready_ff       (.out(reg_wr_ready), .in(CsrCs & CsrWrEn), .en(CsrCs), .clk(clk), .rst_n(reset_n));
end else begin
    assign reg_cs             = CsrCs;
    assign reg_wr_en          = CsrWrEn;
    assign reg_wr_strb        = CsrWrStrb;
    assign reg_addr           = CsrAddr;
    assign reg_wr_data        = CsrWrData;
    assign reg_rd_sel         = ~CsrRegSel;
    assign reg_wr_sel         = CsrRegSel;
    assign reg_wr_instr_type  = CsrWrInstrType;
    assign reg_wr_ready       = CsrCs & CsrWrEn;
end

assign reg_write    = reg_cs &  reg_wr_en;
assign reg_read     = reg_cs;

generic_dff #(.WIDTH(ADDR_W), .RESET_VALUE(0)) reg_addr_d1_ff (.out(reg_addr_d1) , .in(reg_addr) , .en(reg_cs), .clk(clk), .rst_n(reset_n));
generic_dff #(.WIDTH(1)     , .RESET_VALUE(0)) reg_wren_d1_ff (.out(reg_write_d1), .in(reg_write), .en(reg_cs | reg_write_d1), .clk(clk), .rst_n(reset_n));


//------------------------------------------------------------------------------
// Register Writes and Counters
//------------------------------------------------------------------------------


//Register: CSR_CDBGCLACOUNTER0CFG
assign CSR_CDbgClaCounter0Cfg_F_Rsvd = 1'h0;

logic                                           CSR_CDbgClaCounter0Cfg_F_UpperTarget_WrEn;
logic [CR_CDBGCLACOUNTER0CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_UpperTarget_Data;
logic [CR_CDBGCLACOUNTER0CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_UpperTarget_DataEff;
assign CSR_CDbgClaCounter0Cfg_F_UpperTarget_DataEff = {reg_wr_data[62:48]};
assign CSR_CDbgClaCounter0Cfg_F_UpperTarget_Data = (CR_CDBGCLACOUNTER0CFG_UPPERTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter0Cfg_F_UpperTarget), 64'(CSR_CDbgClaCounter0Cfg_F_UpperTarget_DataEff[14:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter0Cfg_F_UpperTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER0CFG_UPPERTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter0Cfg_F_UpperTarget_ff   (.out(CSR_CDbgClaCounter0Cfg_F_UpperTarget), .in(CSR_CDbgClaCounter0Cfg_F_UpperTarget_Data), .en(CSR_CDbgClaCounter0Cfg_F_UpperTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter0Cfg_F_UpperCounter_WrEn;
logic [CR_CDBGCLACOUNTER0CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_UpperCounter_Data;
logic [CR_CDBGCLACOUNTER0CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_UpperCounter_DataEff;
assign CSR_CDbgClaCounter0Cfg_F_UpperCounter_DataEff = {reg_wr_data[47:33]};
assign CSR_CDbgClaCounter0Cfg_F_UpperCounter_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG)) ? CR_CDBGCLACOUNTER0CFG_UPPERCOUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter0Cfg_F_UpperCounter), 64'(CSR_CDbgClaCounter0Cfg_F_UpperCounter_DataEff[14:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter0CfgWr.Data.UpperCounter);
assign CSR_CDbgClaCounter0Cfg_F_UpperCounter_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG)) | CrCsrCdbgclacounter0CfgWr.UpperCounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER0CFG_UPPERCOUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter0Cfg_F_UpperCounter_ff   (.out(CSR_CDbgClaCounter0Cfg_F_UpperCounter), .in(CSR_CDbgClaCounter0Cfg_F_UpperCounter_Data), .en(CSR_CDbgClaCounter0Cfg_F_UpperCounter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_WrEn;
logic [CR_CDBGCLACOUNTER0CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_Data;
logic [CR_CDBGCLACOUNTER0CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_DataEff;
assign CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_DataEff = {reg_wr_data[32:32]};
assign CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_Data = (CR_CDBGCLACOUNTER0CFG_RESETONTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter0Cfg_F_ResetOnTarget), 64'(CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER0CFG_RESETONTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_ff   (.out(CSR_CDbgClaCounter0Cfg_F_ResetOnTarget), .in(CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_Data), .en(CSR_CDbgClaCounter0Cfg_F_ResetOnTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter0Cfg_F_Target_WrEn;
logic [CR_CDBGCLACOUNTER0CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter0Cfg_F_Target_Data;
logic [CR_CDBGCLACOUNTER0CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter0Cfg_F_Target_DataEff;
assign CSR_CDbgClaCounter0Cfg_F_Target_DataEff = {reg_wr_data[31:16]};
assign CSR_CDbgClaCounter0Cfg_F_Target_Data = (CR_CDBGCLACOUNTER0CFG_TARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter0Cfg_F_Target), 64'(CSR_CDbgClaCounter0Cfg_F_Target_DataEff[15:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter0Cfg_F_Target_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER0CFG_TARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter0Cfg_F_Target_ff   (.out(CSR_CDbgClaCounter0Cfg_F_Target), .in(CSR_CDbgClaCounter0Cfg_F_Target_Data), .en(CSR_CDbgClaCounter0Cfg_F_Target_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter0Cfg_F_Counter_WrEn;
logic [CR_CDBGCLACOUNTER0CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_Counter_Data;
logic [CR_CDBGCLACOUNTER0CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter0Cfg_F_Counter_DataEff;
assign CSR_CDbgClaCounter0Cfg_F_Counter_DataEff = {reg_wr_data[15:0]};
assign CSR_CDbgClaCounter0Cfg_F_Counter_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG)) ? CR_CDBGCLACOUNTER0CFG_COUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter0Cfg_F_Counter), 64'(CSR_CDbgClaCounter0Cfg_F_Counter_DataEff[15:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter0CfgWr.Data.Counter);
assign CSR_CDbgClaCounter0Cfg_F_Counter_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER0CFG)) | CrCsrCdbgclacounter0CfgWr.CounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER0CFG_COUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter0Cfg_F_Counter_ff   (.out(CSR_CDbgClaCounter0Cfg_F_Counter), .in(CSR_CDbgClaCounter0Cfg_F_Counter_Data), .en(CSR_CDbgClaCounter0Cfg_F_Counter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLACOUNTER1CFG
assign CSR_CDbgClaCounter1Cfg_F_Rsvd = 1'h0;

logic                                           CSR_CDbgClaCounter1Cfg_F_UpperTarget_WrEn;
logic [CR_CDBGCLACOUNTER1CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_UpperTarget_Data;
logic [CR_CDBGCLACOUNTER1CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_UpperTarget_DataEff;
assign CSR_CDbgClaCounter1Cfg_F_UpperTarget_DataEff = {reg_wr_data[62:48]};
assign CSR_CDbgClaCounter1Cfg_F_UpperTarget_Data = (CR_CDBGCLACOUNTER1CFG_UPPERTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter1Cfg_F_UpperTarget), 64'(CSR_CDbgClaCounter1Cfg_F_UpperTarget_DataEff[14:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter1Cfg_F_UpperTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER1CFG_UPPERTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter1Cfg_F_UpperTarget_ff   (.out(CSR_CDbgClaCounter1Cfg_F_UpperTarget), .in(CSR_CDbgClaCounter1Cfg_F_UpperTarget_Data), .en(CSR_CDbgClaCounter1Cfg_F_UpperTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter1Cfg_F_UpperCounter_WrEn;
logic [CR_CDBGCLACOUNTER1CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_UpperCounter_Data;
logic [CR_CDBGCLACOUNTER1CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_UpperCounter_DataEff;
assign CSR_CDbgClaCounter1Cfg_F_UpperCounter_DataEff = {reg_wr_data[47:33]};
assign CSR_CDbgClaCounter1Cfg_F_UpperCounter_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG)) ? CR_CDBGCLACOUNTER1CFG_UPPERCOUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter1Cfg_F_UpperCounter), 64'(CSR_CDbgClaCounter1Cfg_F_UpperCounter_DataEff[14:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter1CfgWr.Data.UpperCounter);
assign CSR_CDbgClaCounter1Cfg_F_UpperCounter_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG)) | CrCsrCdbgclacounter1CfgWr.UpperCounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER1CFG_UPPERCOUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter1Cfg_F_UpperCounter_ff   (.out(CSR_CDbgClaCounter1Cfg_F_UpperCounter), .in(CSR_CDbgClaCounter1Cfg_F_UpperCounter_Data), .en(CSR_CDbgClaCounter1Cfg_F_UpperCounter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_WrEn;
logic [CR_CDBGCLACOUNTER1CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_Data;
logic [CR_CDBGCLACOUNTER1CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_DataEff;
assign CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_DataEff = {reg_wr_data[32:32]};
assign CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_Data = (CR_CDBGCLACOUNTER1CFG_RESETONTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter1Cfg_F_ResetOnTarget), 64'(CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER1CFG_RESETONTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_ff   (.out(CSR_CDbgClaCounter1Cfg_F_ResetOnTarget), .in(CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_Data), .en(CSR_CDbgClaCounter1Cfg_F_ResetOnTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter1Cfg_F_Target_WrEn;
logic [CR_CDBGCLACOUNTER1CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter1Cfg_F_Target_Data;
logic [CR_CDBGCLACOUNTER1CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter1Cfg_F_Target_DataEff;
assign CSR_CDbgClaCounter1Cfg_F_Target_DataEff = {reg_wr_data[31:16]};
assign CSR_CDbgClaCounter1Cfg_F_Target_Data = (CR_CDBGCLACOUNTER1CFG_TARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter1Cfg_F_Target), 64'(CSR_CDbgClaCounter1Cfg_F_Target_DataEff[15:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter1Cfg_F_Target_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER1CFG_TARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter1Cfg_F_Target_ff   (.out(CSR_CDbgClaCounter1Cfg_F_Target), .in(CSR_CDbgClaCounter1Cfg_F_Target_Data), .en(CSR_CDbgClaCounter1Cfg_F_Target_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter1Cfg_F_Counter_WrEn;
logic [CR_CDBGCLACOUNTER1CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_Counter_Data;
logic [CR_CDBGCLACOUNTER1CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter1Cfg_F_Counter_DataEff;
assign CSR_CDbgClaCounter1Cfg_F_Counter_DataEff = {reg_wr_data[15:0]};
assign CSR_CDbgClaCounter1Cfg_F_Counter_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG)) ? CR_CDBGCLACOUNTER1CFG_COUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter1Cfg_F_Counter), 64'(CSR_CDbgClaCounter1Cfg_F_Counter_DataEff[15:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter1CfgWr.Data.Counter);
assign CSR_CDbgClaCounter1Cfg_F_Counter_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER1CFG)) | CrCsrCdbgclacounter1CfgWr.CounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER1CFG_COUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter1Cfg_F_Counter_ff   (.out(CSR_CDbgClaCounter1Cfg_F_Counter), .in(CSR_CDbgClaCounter1Cfg_F_Counter_Data), .en(CSR_CDbgClaCounter1Cfg_F_Counter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLACOUNTER2CFG
assign CSR_CDbgClaCounter2Cfg_F_Rsvd = 1'h0;

logic                                           CSR_CDbgClaCounter2Cfg_F_UpperTarget_WrEn;
logic [CR_CDBGCLACOUNTER2CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_UpperTarget_Data;
logic [CR_CDBGCLACOUNTER2CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_UpperTarget_DataEff;
assign CSR_CDbgClaCounter2Cfg_F_UpperTarget_DataEff = {reg_wr_data[62:48]};
assign CSR_CDbgClaCounter2Cfg_F_UpperTarget_Data = (CR_CDBGCLACOUNTER2CFG_UPPERTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter2Cfg_F_UpperTarget), 64'(CSR_CDbgClaCounter2Cfg_F_UpperTarget_DataEff[14:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter2Cfg_F_UpperTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER2CFG_UPPERTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter2Cfg_F_UpperTarget_ff   (.out(CSR_CDbgClaCounter2Cfg_F_UpperTarget), .in(CSR_CDbgClaCounter2Cfg_F_UpperTarget_Data), .en(CSR_CDbgClaCounter2Cfg_F_UpperTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter2Cfg_F_UpperCounter_WrEn;
logic [CR_CDBGCLACOUNTER2CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_UpperCounter_Data;
logic [CR_CDBGCLACOUNTER2CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_UpperCounter_DataEff;
assign CSR_CDbgClaCounter2Cfg_F_UpperCounter_DataEff = {reg_wr_data[47:33]};
assign CSR_CDbgClaCounter2Cfg_F_UpperCounter_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG)) ? CR_CDBGCLACOUNTER2CFG_UPPERCOUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter2Cfg_F_UpperCounter), 64'(CSR_CDbgClaCounter2Cfg_F_UpperCounter_DataEff[14:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter2CfgWr.Data.UpperCounter);
assign CSR_CDbgClaCounter2Cfg_F_UpperCounter_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG)) | CrCsrCdbgclacounter2CfgWr.UpperCounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER2CFG_UPPERCOUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter2Cfg_F_UpperCounter_ff   (.out(CSR_CDbgClaCounter2Cfg_F_UpperCounter), .in(CSR_CDbgClaCounter2Cfg_F_UpperCounter_Data), .en(CSR_CDbgClaCounter2Cfg_F_UpperCounter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_WrEn;
logic [CR_CDBGCLACOUNTER2CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_Data;
logic [CR_CDBGCLACOUNTER2CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_DataEff;
assign CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_DataEff = {reg_wr_data[32:32]};
assign CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_Data = (CR_CDBGCLACOUNTER2CFG_RESETONTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter2Cfg_F_ResetOnTarget), 64'(CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER2CFG_RESETONTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_ff   (.out(CSR_CDbgClaCounter2Cfg_F_ResetOnTarget), .in(CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_Data), .en(CSR_CDbgClaCounter2Cfg_F_ResetOnTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter2Cfg_F_Target_WrEn;
logic [CR_CDBGCLACOUNTER2CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter2Cfg_F_Target_Data;
logic [CR_CDBGCLACOUNTER2CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter2Cfg_F_Target_DataEff;
assign CSR_CDbgClaCounter2Cfg_F_Target_DataEff = {reg_wr_data[31:16]};
assign CSR_CDbgClaCounter2Cfg_F_Target_Data = (CR_CDBGCLACOUNTER2CFG_TARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter2Cfg_F_Target), 64'(CSR_CDbgClaCounter2Cfg_F_Target_DataEff[15:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter2Cfg_F_Target_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER2CFG_TARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter2Cfg_F_Target_ff   (.out(CSR_CDbgClaCounter2Cfg_F_Target), .in(CSR_CDbgClaCounter2Cfg_F_Target_Data), .en(CSR_CDbgClaCounter2Cfg_F_Target_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter2Cfg_F_Counter_WrEn;
logic [CR_CDBGCLACOUNTER2CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_Counter_Data;
logic [CR_CDBGCLACOUNTER2CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter2Cfg_F_Counter_DataEff;
assign CSR_CDbgClaCounter2Cfg_F_Counter_DataEff = {reg_wr_data[15:0]};
assign CSR_CDbgClaCounter2Cfg_F_Counter_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG)) ? CR_CDBGCLACOUNTER2CFG_COUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter2Cfg_F_Counter), 64'(CSR_CDbgClaCounter2Cfg_F_Counter_DataEff[15:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter2CfgWr.Data.Counter);
assign CSR_CDbgClaCounter2Cfg_F_Counter_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER2CFG)) | CrCsrCdbgclacounter2CfgWr.CounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER2CFG_COUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter2Cfg_F_Counter_ff   (.out(CSR_CDbgClaCounter2Cfg_F_Counter), .in(CSR_CDbgClaCounter2Cfg_F_Counter_Data), .en(CSR_CDbgClaCounter2Cfg_F_Counter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLACOUNTER3CFG
assign CSR_CDbgClaCounter3Cfg_F_Rsvd = 1'h0;

logic                                           CSR_CDbgClaCounter3Cfg_F_UpperTarget_WrEn;
logic [CR_CDBGCLACOUNTER3CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_UpperTarget_Data;
logic [CR_CDBGCLACOUNTER3CFG_UPPERTARGET_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_UpperTarget_DataEff;
assign CSR_CDbgClaCounter3Cfg_F_UpperTarget_DataEff = {reg_wr_data[62:48]};
assign CSR_CDbgClaCounter3Cfg_F_UpperTarget_Data = (CR_CDBGCLACOUNTER3CFG_UPPERTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter3Cfg_F_UpperTarget), 64'(CSR_CDbgClaCounter3Cfg_F_UpperTarget_DataEff[14:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter3Cfg_F_UpperTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER3CFG_UPPERTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter3Cfg_F_UpperTarget_ff   (.out(CSR_CDbgClaCounter3Cfg_F_UpperTarget), .in(CSR_CDbgClaCounter3Cfg_F_UpperTarget_Data), .en(CSR_CDbgClaCounter3Cfg_F_UpperTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter3Cfg_F_UpperCounter_WrEn;
logic [CR_CDBGCLACOUNTER3CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_UpperCounter_Data;
logic [CR_CDBGCLACOUNTER3CFG_UPPERCOUNTER_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_UpperCounter_DataEff;
assign CSR_CDbgClaCounter3Cfg_F_UpperCounter_DataEff = {reg_wr_data[47:33]};
assign CSR_CDbgClaCounter3Cfg_F_UpperCounter_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG)) ? CR_CDBGCLACOUNTER3CFG_UPPERCOUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter3Cfg_F_UpperCounter), 64'(CSR_CDbgClaCounter3Cfg_F_UpperCounter_DataEff[14:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter3CfgWr.Data.UpperCounter);
assign CSR_CDbgClaCounter3Cfg_F_UpperCounter_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG)) | CrCsrCdbgclacounter3CfgWr.UpperCounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER3CFG_UPPERCOUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter3Cfg_F_UpperCounter_ff   (.out(CSR_CDbgClaCounter3Cfg_F_UpperCounter), .in(CSR_CDbgClaCounter3Cfg_F_UpperCounter_Data), .en(CSR_CDbgClaCounter3Cfg_F_UpperCounter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_WrEn;
logic [CR_CDBGCLACOUNTER3CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_Data;
logic [CR_CDBGCLACOUNTER3CFG_RESETONTARGET_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_DataEff;
assign CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_DataEff = {reg_wr_data[32:32]};
assign CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_Data = (CR_CDBGCLACOUNTER3CFG_RESETONTARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter3Cfg_F_ResetOnTarget), 64'(CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER3CFG_RESETONTARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_ff   (.out(CSR_CDbgClaCounter3Cfg_F_ResetOnTarget), .in(CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_Data), .en(CSR_CDbgClaCounter3Cfg_F_ResetOnTarget_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter3Cfg_F_Target_WrEn;
logic [CR_CDBGCLACOUNTER3CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter3Cfg_F_Target_Data;
logic [CR_CDBGCLACOUNTER3CFG_TARGET_WIDTH -1:0] CSR_CDbgClaCounter3Cfg_F_Target_DataEff;
assign CSR_CDbgClaCounter3Cfg_F_Target_DataEff = {reg_wr_data[31:16]};
assign CSR_CDbgClaCounter3Cfg_F_Target_Data = (CR_CDBGCLACOUNTER3CFG_TARGET_WIDTH'(update_value(64'(CSR_CDbgClaCounter3Cfg_F_Target), 64'(CSR_CDbgClaCounter3Cfg_F_Target_DataEff[15:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCounter3Cfg_F_Target_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG))));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER3CFG_TARGET_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter3Cfg_F_Target_ff   (.out(CSR_CDbgClaCounter3Cfg_F_Target), .in(CSR_CDbgClaCounter3Cfg_F_Target_Data), .en(CSR_CDbgClaCounter3Cfg_F_Target_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCounter3Cfg_F_Counter_WrEn;
logic [CR_CDBGCLACOUNTER3CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_Counter_Data;
logic [CR_CDBGCLACOUNTER3CFG_COUNTER_WIDTH-1:0] CSR_CDbgClaCounter3Cfg_F_Counter_DataEff;
assign CSR_CDbgClaCounter3Cfg_F_Counter_DataEff = {reg_wr_data[15:0]};
assign CSR_CDbgClaCounter3Cfg_F_Counter_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG)) ? CR_CDBGCLACOUNTER3CFG_COUNTER_WIDTH'(update_value(64'(CSR_CDbgClaCounter3Cfg_F_Counter), 64'(CSR_CDbgClaCounter3Cfg_F_Counter_DataEff[15:0]), reg_wr_instr_type)) : CrCsrCdbgclacounter3CfgWr.Data.Counter);
assign CSR_CDbgClaCounter3Cfg_F_Counter_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACOUNTER3CFG)) | CrCsrCdbgclacounter3CfgWr.CounterWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACOUNTER3CFG_COUNTER_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCounter3Cfg_F_Counter_ff   (.out(CSR_CDbgClaCounter3Cfg_F_Counter), .in(CSR_CDbgClaCounter3Cfg_F_Counter_Data), .en(CSR_CDbgClaCounter3Cfg_F_Counter_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE0EAP0
logic                                           CSR_CDbgNode0Eap0_F_Action3_WrEn;
logic [CR_CDBGNODE0EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action3_Data;
logic [CR_CDBGNODE0EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action3_DataEff;
assign CSR_CDbgNode0Eap0_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode0Eap0_F_Action3_Data = (CR_CDBGNODE0EAP0_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_Action3), 64'(CSR_CDbgNode0Eap0_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_Action3_ff   (.out(CSR_CDbgNode0Eap0_F_Action3), .in(CSR_CDbgNode0Eap0_F_Action3_Data), .en(CSR_CDbgNode0Eap0_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_Action2_WrEn;
logic [CR_CDBGNODE0EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action2_Data;
logic [CR_CDBGNODE0EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action2_DataEff;
assign CSR_CDbgNode0Eap0_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode0Eap0_F_Action2_Data = (CR_CDBGNODE0EAP0_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_Action2), 64'(CSR_CDbgNode0Eap0_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_Action2_ff   (.out(CSR_CDbgNode0Eap0_F_Action2), .in(CSR_CDbgNode0Eap0_F_Action2_Data), .en(CSR_CDbgNode0Eap0_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_Udf_WrEn;
logic [CR_CDBGNODE0EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap0_F_Udf_Data;
logic [CR_CDBGNODE0EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap0_F_Udf_DataEff;
assign CSR_CDbgNode0Eap0_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode0Eap0_F_Udf_Data = (CR_CDBGNODE0EAP0_UDF_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_Udf), 64'(CSR_CDbgNode0Eap0_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_Udf_ff   (.out(CSR_CDbgNode0Eap0_F_Udf), .in(CSR_CDbgNode0Eap0_F_Udf_Data), .en(CSR_CDbgNode0Eap0_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_EventType2_WrEn;
logic [CR_CDBGNODE0EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType2_Data;
logic [CR_CDBGNODE0EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType2_DataEff;
assign CSR_CDbgNode0Eap0_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode0Eap0_F_EventType2_Data = (CR_CDBGNODE0EAP0_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_EventType2), 64'(CSR_CDbgNode0Eap0_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_EventType2_ff   (.out(CSR_CDbgNode0Eap0_F_EventType2), .in(CSR_CDbgNode0Eap0_F_EventType2_Data), .en(CSR_CDbgNode0Eap0_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode0Eap0_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode0Eap0_F_CustomAction1Enable_Data = (CR_CDBGNODE0EAP0_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_CustomAction1Enable), 64'(CSR_CDbgNode0Eap0_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode0Eap0_F_CustomAction1Enable), .in(CSR_CDbgNode0Eap0_F_CustomAction1Enable_Data), .en(CSR_CDbgNode0Eap0_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode0Eap0_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode0Eap0_F_CustomAction0Enable_Data = (CR_CDBGNODE0EAP0_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_CustomAction0Enable), 64'(CSR_CDbgNode0Eap0_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode0Eap0_F_CustomAction0Enable), .in(CSR_CDbgNode0Eap0_F_CustomAction0Enable_Data), .en(CSR_CDbgNode0Eap0_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_CustomAction1_WrEn;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction1_Data;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction1_DataEff;
assign CSR_CDbgNode0Eap0_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode0Eap0_F_CustomAction1_Data = (CR_CDBGNODE0EAP0_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_CustomAction1), 64'(CSR_CDbgNode0Eap0_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_CustomAction1_ff   (.out(CSR_CDbgNode0Eap0_F_CustomAction1), .in(CSR_CDbgNode0Eap0_F_CustomAction1_Data), .en(CSR_CDbgNode0Eap0_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_CustomAction0_WrEn;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction0_Data;
logic [CR_CDBGNODE0EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap0_F_CustomAction0_DataEff;
assign CSR_CDbgNode0Eap0_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode0Eap0_F_CustomAction0_Data = (CR_CDBGNODE0EAP0_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_CustomAction0), 64'(CSR_CDbgNode0Eap0_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_CustomAction0_ff   (.out(CSR_CDbgNode0Eap0_F_CustomAction0), .in(CSR_CDbgNode0Eap0_F_CustomAction0_Data), .en(CSR_CDbgNode0Eap0_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_EventType1_WrEn;
logic [CR_CDBGNODE0EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType1_Data;
logic [CR_CDBGNODE0EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType1_DataEff;
assign CSR_CDbgNode0Eap0_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode0Eap0_F_EventType1_Data = (CR_CDBGNODE0EAP0_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_EventType1), 64'(CSR_CDbgNode0Eap0_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_EventType1_ff   (.out(CSR_CDbgNode0Eap0_F_EventType1), .in(CSR_CDbgNode0Eap0_F_EventType1_Data), .en(CSR_CDbgNode0Eap0_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_EventType0_WrEn;
logic [CR_CDBGNODE0EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType0_Data;
logic [CR_CDBGNODE0EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap0_F_EventType0_DataEff;
assign CSR_CDbgNode0Eap0_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode0Eap0_F_EventType0_Data = (CR_CDBGNODE0EAP0_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_EventType0), 64'(CSR_CDbgNode0Eap0_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_EventType0_ff   (.out(CSR_CDbgNode0Eap0_F_EventType0), .in(CSR_CDbgNode0Eap0_F_EventType0_Data), .en(CSR_CDbgNode0Eap0_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_LogicalOp_WrEn;
logic [CR_CDBGNODE0EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap0_F_LogicalOp_Data;
logic [CR_CDBGNODE0EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap0_F_LogicalOp_DataEff;
assign CSR_CDbgNode0Eap0_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode0Eap0_F_LogicalOp_Data = (CR_CDBGNODE0EAP0_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_LogicalOp), 64'(CSR_CDbgNode0Eap0_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_LogicalOp_ff   (.out(CSR_CDbgNode0Eap0_F_LogicalOp), .in(CSR_CDbgNode0Eap0_F_LogicalOp_Data), .en(CSR_CDbgNode0Eap0_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_Action1_WrEn;
logic [CR_CDBGNODE0EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action1_Data;
logic [CR_CDBGNODE0EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action1_DataEff;
assign CSR_CDbgNode0Eap0_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode0Eap0_F_Action1_Data = (CR_CDBGNODE0EAP0_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_Action1), 64'(CSR_CDbgNode0Eap0_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_Action1_ff   (.out(CSR_CDbgNode0Eap0_F_Action1), .in(CSR_CDbgNode0Eap0_F_Action1_Data), .en(CSR_CDbgNode0Eap0_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_Action0_WrEn;
logic [CR_CDBGNODE0EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action0_Data;
logic [CR_CDBGNODE0EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap0_F_Action0_DataEff;
assign CSR_CDbgNode0Eap0_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode0Eap0_F_Action0_Data = (CR_CDBGNODE0EAP0_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_Action0), 64'(CSR_CDbgNode0Eap0_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_Action0_ff   (.out(CSR_CDbgNode0Eap0_F_Action0), .in(CSR_CDbgNode0Eap0_F_Action0_Data), .en(CSR_CDbgNode0Eap0_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap0_F_DestNode_WrEn;
logic [CR_CDBGNODE0EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap0_F_DestNode_Data;
logic [CR_CDBGNODE0EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap0_F_DestNode_DataEff;
assign CSR_CDbgNode0Eap0_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode0Eap0_F_DestNode_Data = (CR_CDBGNODE0EAP0_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap0_F_DestNode), 64'(CSR_CDbgNode0Eap0_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap0_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP0_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap0_F_DestNode_ff   (.out(CSR_CDbgNode0Eap0_F_DestNode), .in(CSR_CDbgNode0Eap0_F_DestNode_Data), .en(CSR_CDbgNode0Eap0_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE0EAP1
logic                                           CSR_CDbgNode0Eap1_F_Action3_WrEn;
logic [CR_CDBGNODE0EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action3_Data;
logic [CR_CDBGNODE0EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action3_DataEff;
assign CSR_CDbgNode0Eap1_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode0Eap1_F_Action3_Data = (CR_CDBGNODE0EAP1_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_Action3), 64'(CSR_CDbgNode0Eap1_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_Action3_ff   (.out(CSR_CDbgNode0Eap1_F_Action3), .in(CSR_CDbgNode0Eap1_F_Action3_Data), .en(CSR_CDbgNode0Eap1_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_Action2_WrEn;
logic [CR_CDBGNODE0EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action2_Data;
logic [CR_CDBGNODE0EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action2_DataEff;
assign CSR_CDbgNode0Eap1_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode0Eap1_F_Action2_Data = (CR_CDBGNODE0EAP1_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_Action2), 64'(CSR_CDbgNode0Eap1_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_Action2_ff   (.out(CSR_CDbgNode0Eap1_F_Action2), .in(CSR_CDbgNode0Eap1_F_Action2_Data), .en(CSR_CDbgNode0Eap1_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_Udf_WrEn;
logic [CR_CDBGNODE0EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap1_F_Udf_Data;
logic [CR_CDBGNODE0EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap1_F_Udf_DataEff;
assign CSR_CDbgNode0Eap1_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode0Eap1_F_Udf_Data = (CR_CDBGNODE0EAP1_UDF_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_Udf), 64'(CSR_CDbgNode0Eap1_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_Udf_ff   (.out(CSR_CDbgNode0Eap1_F_Udf), .in(CSR_CDbgNode0Eap1_F_Udf_Data), .en(CSR_CDbgNode0Eap1_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_EventType2_WrEn;
logic [CR_CDBGNODE0EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType2_Data;
logic [CR_CDBGNODE0EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType2_DataEff;
assign CSR_CDbgNode0Eap1_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode0Eap1_F_EventType2_Data = (CR_CDBGNODE0EAP1_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_EventType2), 64'(CSR_CDbgNode0Eap1_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_EventType2_ff   (.out(CSR_CDbgNode0Eap1_F_EventType2), .in(CSR_CDbgNode0Eap1_F_EventType2_Data), .en(CSR_CDbgNode0Eap1_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode0Eap1_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode0Eap1_F_CustomAction1Enable_Data = (CR_CDBGNODE0EAP1_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_CustomAction1Enable), 64'(CSR_CDbgNode0Eap1_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode0Eap1_F_CustomAction1Enable), .in(CSR_CDbgNode0Eap1_F_CustomAction1Enable_Data), .en(CSR_CDbgNode0Eap1_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode0Eap1_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode0Eap1_F_CustomAction0Enable_Data = (CR_CDBGNODE0EAP1_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_CustomAction0Enable), 64'(CSR_CDbgNode0Eap1_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode0Eap1_F_CustomAction0Enable), .in(CSR_CDbgNode0Eap1_F_CustomAction0Enable_Data), .en(CSR_CDbgNode0Eap1_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_CustomAction1_WrEn;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction1_Data;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction1_DataEff;
assign CSR_CDbgNode0Eap1_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode0Eap1_F_CustomAction1_Data = (CR_CDBGNODE0EAP1_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_CustomAction1), 64'(CSR_CDbgNode0Eap1_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_CustomAction1_ff   (.out(CSR_CDbgNode0Eap1_F_CustomAction1), .in(CSR_CDbgNode0Eap1_F_CustomAction1_Data), .en(CSR_CDbgNode0Eap1_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_CustomAction0_WrEn;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction0_Data;
logic [CR_CDBGNODE0EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap1_F_CustomAction0_DataEff;
assign CSR_CDbgNode0Eap1_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode0Eap1_F_CustomAction0_Data = (CR_CDBGNODE0EAP1_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_CustomAction0), 64'(CSR_CDbgNode0Eap1_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_CustomAction0_ff   (.out(CSR_CDbgNode0Eap1_F_CustomAction0), .in(CSR_CDbgNode0Eap1_F_CustomAction0_Data), .en(CSR_CDbgNode0Eap1_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_EventType1_WrEn;
logic [CR_CDBGNODE0EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType1_Data;
logic [CR_CDBGNODE0EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType1_DataEff;
assign CSR_CDbgNode0Eap1_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode0Eap1_F_EventType1_Data = (CR_CDBGNODE0EAP1_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_EventType1), 64'(CSR_CDbgNode0Eap1_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_EventType1_ff   (.out(CSR_CDbgNode0Eap1_F_EventType1), .in(CSR_CDbgNode0Eap1_F_EventType1_Data), .en(CSR_CDbgNode0Eap1_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_EventType0_WrEn;
logic [CR_CDBGNODE0EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType0_Data;
logic [CR_CDBGNODE0EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap1_F_EventType0_DataEff;
assign CSR_CDbgNode0Eap1_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode0Eap1_F_EventType0_Data = (CR_CDBGNODE0EAP1_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_EventType0), 64'(CSR_CDbgNode0Eap1_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_EventType0_ff   (.out(CSR_CDbgNode0Eap1_F_EventType0), .in(CSR_CDbgNode0Eap1_F_EventType0_Data), .en(CSR_CDbgNode0Eap1_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_LogicalOp_WrEn;
logic [CR_CDBGNODE0EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap1_F_LogicalOp_Data;
logic [CR_CDBGNODE0EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap1_F_LogicalOp_DataEff;
assign CSR_CDbgNode0Eap1_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode0Eap1_F_LogicalOp_Data = (CR_CDBGNODE0EAP1_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_LogicalOp), 64'(CSR_CDbgNode0Eap1_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_LogicalOp_ff   (.out(CSR_CDbgNode0Eap1_F_LogicalOp), .in(CSR_CDbgNode0Eap1_F_LogicalOp_Data), .en(CSR_CDbgNode0Eap1_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_Action1_WrEn;
logic [CR_CDBGNODE0EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action1_Data;
logic [CR_CDBGNODE0EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action1_DataEff;
assign CSR_CDbgNode0Eap1_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode0Eap1_F_Action1_Data = (CR_CDBGNODE0EAP1_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_Action1), 64'(CSR_CDbgNode0Eap1_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_Action1_ff   (.out(CSR_CDbgNode0Eap1_F_Action1), .in(CSR_CDbgNode0Eap1_F_Action1_Data), .en(CSR_CDbgNode0Eap1_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_Action0_WrEn;
logic [CR_CDBGNODE0EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action0_Data;
logic [CR_CDBGNODE0EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap1_F_Action0_DataEff;
assign CSR_CDbgNode0Eap1_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode0Eap1_F_Action0_Data = (CR_CDBGNODE0EAP1_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_Action0), 64'(CSR_CDbgNode0Eap1_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_Action0_ff   (.out(CSR_CDbgNode0Eap1_F_Action0), .in(CSR_CDbgNode0Eap1_F_Action0_Data), .en(CSR_CDbgNode0Eap1_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap1_F_DestNode_WrEn;
logic [CR_CDBGNODE0EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap1_F_DestNode_Data;
logic [CR_CDBGNODE0EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap1_F_DestNode_DataEff;
assign CSR_CDbgNode0Eap1_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode0Eap1_F_DestNode_Data = (CR_CDBGNODE0EAP1_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap1_F_DestNode), 64'(CSR_CDbgNode0Eap1_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap1_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP1_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap1_F_DestNode_ff   (.out(CSR_CDbgNode0Eap1_F_DestNode), .in(CSR_CDbgNode0Eap1_F_DestNode_Data), .en(CSR_CDbgNode0Eap1_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE1EAP0
logic                                           CSR_CDbgNode1Eap0_F_Action3_WrEn;
logic [CR_CDBGNODE1EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action3_Data;
logic [CR_CDBGNODE1EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action3_DataEff;
assign CSR_CDbgNode1Eap0_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode1Eap0_F_Action3_Data = (CR_CDBGNODE1EAP0_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_Action3), 64'(CSR_CDbgNode1Eap0_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_Action3_ff   (.out(CSR_CDbgNode1Eap0_F_Action3), .in(CSR_CDbgNode1Eap0_F_Action3_Data), .en(CSR_CDbgNode1Eap0_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_Action2_WrEn;
logic [CR_CDBGNODE1EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action2_Data;
logic [CR_CDBGNODE1EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action2_DataEff;
assign CSR_CDbgNode1Eap0_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode1Eap0_F_Action2_Data = (CR_CDBGNODE1EAP0_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_Action2), 64'(CSR_CDbgNode1Eap0_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_Action2_ff   (.out(CSR_CDbgNode1Eap0_F_Action2), .in(CSR_CDbgNode1Eap0_F_Action2_Data), .en(CSR_CDbgNode1Eap0_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_Udf_WrEn;
logic [CR_CDBGNODE1EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap0_F_Udf_Data;
logic [CR_CDBGNODE1EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap0_F_Udf_DataEff;
assign CSR_CDbgNode1Eap0_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode1Eap0_F_Udf_Data = (CR_CDBGNODE1EAP0_UDF_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_Udf), 64'(CSR_CDbgNode1Eap0_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_Udf_ff   (.out(CSR_CDbgNode1Eap0_F_Udf), .in(CSR_CDbgNode1Eap0_F_Udf_Data), .en(CSR_CDbgNode1Eap0_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_EventType2_WrEn;
logic [CR_CDBGNODE1EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType2_Data;
logic [CR_CDBGNODE1EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType2_DataEff;
assign CSR_CDbgNode1Eap0_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode1Eap0_F_EventType2_Data = (CR_CDBGNODE1EAP0_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_EventType2), 64'(CSR_CDbgNode1Eap0_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_EventType2_ff   (.out(CSR_CDbgNode1Eap0_F_EventType2), .in(CSR_CDbgNode1Eap0_F_EventType2_Data), .en(CSR_CDbgNode1Eap0_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode1Eap0_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode1Eap0_F_CustomAction1Enable_Data = (CR_CDBGNODE1EAP0_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_CustomAction1Enable), 64'(CSR_CDbgNode1Eap0_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode1Eap0_F_CustomAction1Enable), .in(CSR_CDbgNode1Eap0_F_CustomAction1Enable_Data), .en(CSR_CDbgNode1Eap0_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode1Eap0_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode1Eap0_F_CustomAction0Enable_Data = (CR_CDBGNODE1EAP0_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_CustomAction0Enable), 64'(CSR_CDbgNode1Eap0_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode1Eap0_F_CustomAction0Enable), .in(CSR_CDbgNode1Eap0_F_CustomAction0Enable_Data), .en(CSR_CDbgNode1Eap0_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_CustomAction1_WrEn;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction1_Data;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction1_DataEff;
assign CSR_CDbgNode1Eap0_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode1Eap0_F_CustomAction1_Data = (CR_CDBGNODE1EAP0_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_CustomAction1), 64'(CSR_CDbgNode1Eap0_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_CustomAction1_ff   (.out(CSR_CDbgNode1Eap0_F_CustomAction1), .in(CSR_CDbgNode1Eap0_F_CustomAction1_Data), .en(CSR_CDbgNode1Eap0_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_CustomAction0_WrEn;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction0_Data;
logic [CR_CDBGNODE1EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap0_F_CustomAction0_DataEff;
assign CSR_CDbgNode1Eap0_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode1Eap0_F_CustomAction0_Data = (CR_CDBGNODE1EAP0_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_CustomAction0), 64'(CSR_CDbgNode1Eap0_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_CustomAction0_ff   (.out(CSR_CDbgNode1Eap0_F_CustomAction0), .in(CSR_CDbgNode1Eap0_F_CustomAction0_Data), .en(CSR_CDbgNode1Eap0_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_EventType1_WrEn;
logic [CR_CDBGNODE1EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType1_Data;
logic [CR_CDBGNODE1EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType1_DataEff;
assign CSR_CDbgNode1Eap0_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode1Eap0_F_EventType1_Data = (CR_CDBGNODE1EAP0_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_EventType1), 64'(CSR_CDbgNode1Eap0_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_EventType1_ff   (.out(CSR_CDbgNode1Eap0_F_EventType1), .in(CSR_CDbgNode1Eap0_F_EventType1_Data), .en(CSR_CDbgNode1Eap0_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_EventType0_WrEn;
logic [CR_CDBGNODE1EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType0_Data;
logic [CR_CDBGNODE1EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap0_F_EventType0_DataEff;
assign CSR_CDbgNode1Eap0_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode1Eap0_F_EventType0_Data = (CR_CDBGNODE1EAP0_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_EventType0), 64'(CSR_CDbgNode1Eap0_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_EventType0_ff   (.out(CSR_CDbgNode1Eap0_F_EventType0), .in(CSR_CDbgNode1Eap0_F_EventType0_Data), .en(CSR_CDbgNode1Eap0_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_LogicalOp_WrEn;
logic [CR_CDBGNODE1EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap0_F_LogicalOp_Data;
logic [CR_CDBGNODE1EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap0_F_LogicalOp_DataEff;
assign CSR_CDbgNode1Eap0_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode1Eap0_F_LogicalOp_Data = (CR_CDBGNODE1EAP0_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_LogicalOp), 64'(CSR_CDbgNode1Eap0_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_LogicalOp_ff   (.out(CSR_CDbgNode1Eap0_F_LogicalOp), .in(CSR_CDbgNode1Eap0_F_LogicalOp_Data), .en(CSR_CDbgNode1Eap0_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_Action1_WrEn;
logic [CR_CDBGNODE1EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action1_Data;
logic [CR_CDBGNODE1EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action1_DataEff;
assign CSR_CDbgNode1Eap0_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode1Eap0_F_Action1_Data = (CR_CDBGNODE1EAP0_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_Action1), 64'(CSR_CDbgNode1Eap0_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_Action1_ff   (.out(CSR_CDbgNode1Eap0_F_Action1), .in(CSR_CDbgNode1Eap0_F_Action1_Data), .en(CSR_CDbgNode1Eap0_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_Action0_WrEn;
logic [CR_CDBGNODE1EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action0_Data;
logic [CR_CDBGNODE1EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap0_F_Action0_DataEff;
assign CSR_CDbgNode1Eap0_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode1Eap0_F_Action0_Data = (CR_CDBGNODE1EAP0_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_Action0), 64'(CSR_CDbgNode1Eap0_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_Action0_ff   (.out(CSR_CDbgNode1Eap0_F_Action0), .in(CSR_CDbgNode1Eap0_F_Action0_Data), .en(CSR_CDbgNode1Eap0_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap0_F_DestNode_WrEn;
logic [CR_CDBGNODE1EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap0_F_DestNode_Data;
logic [CR_CDBGNODE1EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap0_F_DestNode_DataEff;
assign CSR_CDbgNode1Eap0_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode1Eap0_F_DestNode_Data = (CR_CDBGNODE1EAP0_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap0_F_DestNode), 64'(CSR_CDbgNode1Eap0_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap0_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP0_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap0_F_DestNode_ff   (.out(CSR_CDbgNode1Eap0_F_DestNode), .in(CSR_CDbgNode1Eap0_F_DestNode_Data), .en(CSR_CDbgNode1Eap0_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE1EAP1
logic                                           CSR_CDbgNode1Eap1_F_Action3_WrEn;
logic [CR_CDBGNODE1EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action3_Data;
logic [CR_CDBGNODE1EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action3_DataEff;
assign CSR_CDbgNode1Eap1_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode1Eap1_F_Action3_Data = (CR_CDBGNODE1EAP1_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_Action3), 64'(CSR_CDbgNode1Eap1_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_Action3_ff   (.out(CSR_CDbgNode1Eap1_F_Action3), .in(CSR_CDbgNode1Eap1_F_Action3_Data), .en(CSR_CDbgNode1Eap1_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_Action2_WrEn;
logic [CR_CDBGNODE1EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action2_Data;
logic [CR_CDBGNODE1EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action2_DataEff;
assign CSR_CDbgNode1Eap1_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode1Eap1_F_Action2_Data = (CR_CDBGNODE1EAP1_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_Action2), 64'(CSR_CDbgNode1Eap1_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_Action2_ff   (.out(CSR_CDbgNode1Eap1_F_Action2), .in(CSR_CDbgNode1Eap1_F_Action2_Data), .en(CSR_CDbgNode1Eap1_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_Udf_WrEn;
logic [CR_CDBGNODE1EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap1_F_Udf_Data;
logic [CR_CDBGNODE1EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap1_F_Udf_DataEff;
assign CSR_CDbgNode1Eap1_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode1Eap1_F_Udf_Data = (CR_CDBGNODE1EAP1_UDF_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_Udf), 64'(CSR_CDbgNode1Eap1_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_Udf_ff   (.out(CSR_CDbgNode1Eap1_F_Udf), .in(CSR_CDbgNode1Eap1_F_Udf_Data), .en(CSR_CDbgNode1Eap1_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_EventType2_WrEn;
logic [CR_CDBGNODE1EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType2_Data;
logic [CR_CDBGNODE1EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType2_DataEff;
assign CSR_CDbgNode1Eap1_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode1Eap1_F_EventType2_Data = (CR_CDBGNODE1EAP1_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_EventType2), 64'(CSR_CDbgNode1Eap1_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_EventType2_ff   (.out(CSR_CDbgNode1Eap1_F_EventType2), .in(CSR_CDbgNode1Eap1_F_EventType2_Data), .en(CSR_CDbgNode1Eap1_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode1Eap1_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode1Eap1_F_CustomAction1Enable_Data = (CR_CDBGNODE1EAP1_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_CustomAction1Enable), 64'(CSR_CDbgNode1Eap1_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode1Eap1_F_CustomAction1Enable), .in(CSR_CDbgNode1Eap1_F_CustomAction1Enable_Data), .en(CSR_CDbgNode1Eap1_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode1Eap1_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode1Eap1_F_CustomAction0Enable_Data = (CR_CDBGNODE1EAP1_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_CustomAction0Enable), 64'(CSR_CDbgNode1Eap1_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode1Eap1_F_CustomAction0Enable), .in(CSR_CDbgNode1Eap1_F_CustomAction0Enable_Data), .en(CSR_CDbgNode1Eap1_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_CustomAction1_WrEn;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction1_Data;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction1_DataEff;
assign CSR_CDbgNode1Eap1_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode1Eap1_F_CustomAction1_Data = (CR_CDBGNODE1EAP1_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_CustomAction1), 64'(CSR_CDbgNode1Eap1_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_CustomAction1_ff   (.out(CSR_CDbgNode1Eap1_F_CustomAction1), .in(CSR_CDbgNode1Eap1_F_CustomAction1_Data), .en(CSR_CDbgNode1Eap1_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_CustomAction0_WrEn;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction0_Data;
logic [CR_CDBGNODE1EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap1_F_CustomAction0_DataEff;
assign CSR_CDbgNode1Eap1_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode1Eap1_F_CustomAction0_Data = (CR_CDBGNODE1EAP1_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_CustomAction0), 64'(CSR_CDbgNode1Eap1_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_CustomAction0_ff   (.out(CSR_CDbgNode1Eap1_F_CustomAction0), .in(CSR_CDbgNode1Eap1_F_CustomAction0_Data), .en(CSR_CDbgNode1Eap1_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_EventType1_WrEn;
logic [CR_CDBGNODE1EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType1_Data;
logic [CR_CDBGNODE1EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType1_DataEff;
assign CSR_CDbgNode1Eap1_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode1Eap1_F_EventType1_Data = (CR_CDBGNODE1EAP1_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_EventType1), 64'(CSR_CDbgNode1Eap1_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_EventType1_ff   (.out(CSR_CDbgNode1Eap1_F_EventType1), .in(CSR_CDbgNode1Eap1_F_EventType1_Data), .en(CSR_CDbgNode1Eap1_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_EventType0_WrEn;
logic [CR_CDBGNODE1EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType0_Data;
logic [CR_CDBGNODE1EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap1_F_EventType0_DataEff;
assign CSR_CDbgNode1Eap1_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode1Eap1_F_EventType0_Data = (CR_CDBGNODE1EAP1_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_EventType0), 64'(CSR_CDbgNode1Eap1_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_EventType0_ff   (.out(CSR_CDbgNode1Eap1_F_EventType0), .in(CSR_CDbgNode1Eap1_F_EventType0_Data), .en(CSR_CDbgNode1Eap1_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_LogicalOp_WrEn;
logic [CR_CDBGNODE1EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap1_F_LogicalOp_Data;
logic [CR_CDBGNODE1EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap1_F_LogicalOp_DataEff;
assign CSR_CDbgNode1Eap1_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode1Eap1_F_LogicalOp_Data = (CR_CDBGNODE1EAP1_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_LogicalOp), 64'(CSR_CDbgNode1Eap1_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_LogicalOp_ff   (.out(CSR_CDbgNode1Eap1_F_LogicalOp), .in(CSR_CDbgNode1Eap1_F_LogicalOp_Data), .en(CSR_CDbgNode1Eap1_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_Action1_WrEn;
logic [CR_CDBGNODE1EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action1_Data;
logic [CR_CDBGNODE1EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action1_DataEff;
assign CSR_CDbgNode1Eap1_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode1Eap1_F_Action1_Data = (CR_CDBGNODE1EAP1_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_Action1), 64'(CSR_CDbgNode1Eap1_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_Action1_ff   (.out(CSR_CDbgNode1Eap1_F_Action1), .in(CSR_CDbgNode1Eap1_F_Action1_Data), .en(CSR_CDbgNode1Eap1_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_Action0_WrEn;
logic [CR_CDBGNODE1EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action0_Data;
logic [CR_CDBGNODE1EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap1_F_Action0_DataEff;
assign CSR_CDbgNode1Eap1_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode1Eap1_F_Action0_Data = (CR_CDBGNODE1EAP1_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_Action0), 64'(CSR_CDbgNode1Eap1_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_Action0_ff   (.out(CSR_CDbgNode1Eap1_F_Action0), .in(CSR_CDbgNode1Eap1_F_Action0_Data), .en(CSR_CDbgNode1Eap1_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap1_F_DestNode_WrEn;
logic [CR_CDBGNODE1EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap1_F_DestNode_Data;
logic [CR_CDBGNODE1EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap1_F_DestNode_DataEff;
assign CSR_CDbgNode1Eap1_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode1Eap1_F_DestNode_Data = (CR_CDBGNODE1EAP1_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap1_F_DestNode), 64'(CSR_CDbgNode1Eap1_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap1_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP1_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap1_F_DestNode_ff   (.out(CSR_CDbgNode1Eap1_F_DestNode), .in(CSR_CDbgNode1Eap1_F_DestNode_Data), .en(CSR_CDbgNode1Eap1_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE2EAP0
logic                                           CSR_CDbgNode2Eap0_F_Action3_WrEn;
logic [CR_CDBGNODE2EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action3_Data;
logic [CR_CDBGNODE2EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action3_DataEff;
assign CSR_CDbgNode2Eap0_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode2Eap0_F_Action3_Data = (CR_CDBGNODE2EAP0_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_Action3), 64'(CSR_CDbgNode2Eap0_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_Action3_ff   (.out(CSR_CDbgNode2Eap0_F_Action3), .in(CSR_CDbgNode2Eap0_F_Action3_Data), .en(CSR_CDbgNode2Eap0_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_Action2_WrEn;
logic [CR_CDBGNODE2EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action2_Data;
logic [CR_CDBGNODE2EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action2_DataEff;
assign CSR_CDbgNode2Eap0_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode2Eap0_F_Action2_Data = (CR_CDBGNODE2EAP0_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_Action2), 64'(CSR_CDbgNode2Eap0_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_Action2_ff   (.out(CSR_CDbgNode2Eap0_F_Action2), .in(CSR_CDbgNode2Eap0_F_Action2_Data), .en(CSR_CDbgNode2Eap0_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_Udf_WrEn;
logic [CR_CDBGNODE2EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap0_F_Udf_Data;
logic [CR_CDBGNODE2EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap0_F_Udf_DataEff;
assign CSR_CDbgNode2Eap0_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode2Eap0_F_Udf_Data = (CR_CDBGNODE2EAP0_UDF_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_Udf), 64'(CSR_CDbgNode2Eap0_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_Udf_ff   (.out(CSR_CDbgNode2Eap0_F_Udf), .in(CSR_CDbgNode2Eap0_F_Udf_Data), .en(CSR_CDbgNode2Eap0_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_EventType2_WrEn;
logic [CR_CDBGNODE2EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType2_Data;
logic [CR_CDBGNODE2EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType2_DataEff;
assign CSR_CDbgNode2Eap0_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode2Eap0_F_EventType2_Data = (CR_CDBGNODE2EAP0_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_EventType2), 64'(CSR_CDbgNode2Eap0_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_EventType2_ff   (.out(CSR_CDbgNode2Eap0_F_EventType2), .in(CSR_CDbgNode2Eap0_F_EventType2_Data), .en(CSR_CDbgNode2Eap0_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode2Eap0_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode2Eap0_F_CustomAction1Enable_Data = (CR_CDBGNODE2EAP0_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_CustomAction1Enable), 64'(CSR_CDbgNode2Eap0_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode2Eap0_F_CustomAction1Enable), .in(CSR_CDbgNode2Eap0_F_CustomAction1Enable_Data), .en(CSR_CDbgNode2Eap0_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode2Eap0_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode2Eap0_F_CustomAction0Enable_Data = (CR_CDBGNODE2EAP0_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_CustomAction0Enable), 64'(CSR_CDbgNode2Eap0_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode2Eap0_F_CustomAction0Enable), .in(CSR_CDbgNode2Eap0_F_CustomAction0Enable_Data), .en(CSR_CDbgNode2Eap0_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_CustomAction1_WrEn;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction1_Data;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction1_DataEff;
assign CSR_CDbgNode2Eap0_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode2Eap0_F_CustomAction1_Data = (CR_CDBGNODE2EAP0_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_CustomAction1), 64'(CSR_CDbgNode2Eap0_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_CustomAction1_ff   (.out(CSR_CDbgNode2Eap0_F_CustomAction1), .in(CSR_CDbgNode2Eap0_F_CustomAction1_Data), .en(CSR_CDbgNode2Eap0_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_CustomAction0_WrEn;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction0_Data;
logic [CR_CDBGNODE2EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap0_F_CustomAction0_DataEff;
assign CSR_CDbgNode2Eap0_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode2Eap0_F_CustomAction0_Data = (CR_CDBGNODE2EAP0_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_CustomAction0), 64'(CSR_CDbgNode2Eap0_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_CustomAction0_ff   (.out(CSR_CDbgNode2Eap0_F_CustomAction0), .in(CSR_CDbgNode2Eap0_F_CustomAction0_Data), .en(CSR_CDbgNode2Eap0_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_EventType1_WrEn;
logic [CR_CDBGNODE2EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType1_Data;
logic [CR_CDBGNODE2EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType1_DataEff;
assign CSR_CDbgNode2Eap0_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode2Eap0_F_EventType1_Data = (CR_CDBGNODE2EAP0_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_EventType1), 64'(CSR_CDbgNode2Eap0_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_EventType1_ff   (.out(CSR_CDbgNode2Eap0_F_EventType1), .in(CSR_CDbgNode2Eap0_F_EventType1_Data), .en(CSR_CDbgNode2Eap0_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_EventType0_WrEn;
logic [CR_CDBGNODE2EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType0_Data;
logic [CR_CDBGNODE2EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap0_F_EventType0_DataEff;
assign CSR_CDbgNode2Eap0_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode2Eap0_F_EventType0_Data = (CR_CDBGNODE2EAP0_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_EventType0), 64'(CSR_CDbgNode2Eap0_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_EventType0_ff   (.out(CSR_CDbgNode2Eap0_F_EventType0), .in(CSR_CDbgNode2Eap0_F_EventType0_Data), .en(CSR_CDbgNode2Eap0_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_LogicalOp_WrEn;
logic [CR_CDBGNODE2EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap0_F_LogicalOp_Data;
logic [CR_CDBGNODE2EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap0_F_LogicalOp_DataEff;
assign CSR_CDbgNode2Eap0_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode2Eap0_F_LogicalOp_Data = (CR_CDBGNODE2EAP0_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_LogicalOp), 64'(CSR_CDbgNode2Eap0_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_LogicalOp_ff   (.out(CSR_CDbgNode2Eap0_F_LogicalOp), .in(CSR_CDbgNode2Eap0_F_LogicalOp_Data), .en(CSR_CDbgNode2Eap0_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_Action1_WrEn;
logic [CR_CDBGNODE2EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action1_Data;
logic [CR_CDBGNODE2EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action1_DataEff;
assign CSR_CDbgNode2Eap0_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode2Eap0_F_Action1_Data = (CR_CDBGNODE2EAP0_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_Action1), 64'(CSR_CDbgNode2Eap0_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_Action1_ff   (.out(CSR_CDbgNode2Eap0_F_Action1), .in(CSR_CDbgNode2Eap0_F_Action1_Data), .en(CSR_CDbgNode2Eap0_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_Action0_WrEn;
logic [CR_CDBGNODE2EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action0_Data;
logic [CR_CDBGNODE2EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap0_F_Action0_DataEff;
assign CSR_CDbgNode2Eap0_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode2Eap0_F_Action0_Data = (CR_CDBGNODE2EAP0_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_Action0), 64'(CSR_CDbgNode2Eap0_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_Action0_ff   (.out(CSR_CDbgNode2Eap0_F_Action0), .in(CSR_CDbgNode2Eap0_F_Action0_Data), .en(CSR_CDbgNode2Eap0_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap0_F_DestNode_WrEn;
logic [CR_CDBGNODE2EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap0_F_DestNode_Data;
logic [CR_CDBGNODE2EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap0_F_DestNode_DataEff;
assign CSR_CDbgNode2Eap0_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode2Eap0_F_DestNode_Data = (CR_CDBGNODE2EAP0_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap0_F_DestNode), 64'(CSR_CDbgNode2Eap0_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap0_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP0_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap0_F_DestNode_ff   (.out(CSR_CDbgNode2Eap0_F_DestNode), .in(CSR_CDbgNode2Eap0_F_DestNode_Data), .en(CSR_CDbgNode2Eap0_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE2EAP1
logic                                           CSR_CDbgNode2Eap1_F_Action3_WrEn;
logic [CR_CDBGNODE2EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action3_Data;
logic [CR_CDBGNODE2EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action3_DataEff;
assign CSR_CDbgNode2Eap1_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode2Eap1_F_Action3_Data = (CR_CDBGNODE2EAP1_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_Action3), 64'(CSR_CDbgNode2Eap1_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_Action3_ff   (.out(CSR_CDbgNode2Eap1_F_Action3), .in(CSR_CDbgNode2Eap1_F_Action3_Data), .en(CSR_CDbgNode2Eap1_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_Action2_WrEn;
logic [CR_CDBGNODE2EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action2_Data;
logic [CR_CDBGNODE2EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action2_DataEff;
assign CSR_CDbgNode2Eap1_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode2Eap1_F_Action2_Data = (CR_CDBGNODE2EAP1_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_Action2), 64'(CSR_CDbgNode2Eap1_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_Action2_ff   (.out(CSR_CDbgNode2Eap1_F_Action2), .in(CSR_CDbgNode2Eap1_F_Action2_Data), .en(CSR_CDbgNode2Eap1_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_Udf_WrEn;
logic [CR_CDBGNODE2EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap1_F_Udf_Data;
logic [CR_CDBGNODE2EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap1_F_Udf_DataEff;
assign CSR_CDbgNode2Eap1_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode2Eap1_F_Udf_Data = (CR_CDBGNODE2EAP1_UDF_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_Udf), 64'(CSR_CDbgNode2Eap1_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_Udf_ff   (.out(CSR_CDbgNode2Eap1_F_Udf), .in(CSR_CDbgNode2Eap1_F_Udf_Data), .en(CSR_CDbgNode2Eap1_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_EventType2_WrEn;
logic [CR_CDBGNODE2EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType2_Data;
logic [CR_CDBGNODE2EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType2_DataEff;
assign CSR_CDbgNode2Eap1_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode2Eap1_F_EventType2_Data = (CR_CDBGNODE2EAP1_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_EventType2), 64'(CSR_CDbgNode2Eap1_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_EventType2_ff   (.out(CSR_CDbgNode2Eap1_F_EventType2), .in(CSR_CDbgNode2Eap1_F_EventType2_Data), .en(CSR_CDbgNode2Eap1_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode2Eap1_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode2Eap1_F_CustomAction1Enable_Data = (CR_CDBGNODE2EAP1_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_CustomAction1Enable), 64'(CSR_CDbgNode2Eap1_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode2Eap1_F_CustomAction1Enable), .in(CSR_CDbgNode2Eap1_F_CustomAction1Enable_Data), .en(CSR_CDbgNode2Eap1_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode2Eap1_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode2Eap1_F_CustomAction0Enable_Data = (CR_CDBGNODE2EAP1_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_CustomAction0Enable), 64'(CSR_CDbgNode2Eap1_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode2Eap1_F_CustomAction0Enable), .in(CSR_CDbgNode2Eap1_F_CustomAction0Enable_Data), .en(CSR_CDbgNode2Eap1_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_CustomAction1_WrEn;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction1_Data;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction1_DataEff;
assign CSR_CDbgNode2Eap1_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode2Eap1_F_CustomAction1_Data = (CR_CDBGNODE2EAP1_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_CustomAction1), 64'(CSR_CDbgNode2Eap1_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_CustomAction1_ff   (.out(CSR_CDbgNode2Eap1_F_CustomAction1), .in(CSR_CDbgNode2Eap1_F_CustomAction1_Data), .en(CSR_CDbgNode2Eap1_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_CustomAction0_WrEn;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction0_Data;
logic [CR_CDBGNODE2EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap1_F_CustomAction0_DataEff;
assign CSR_CDbgNode2Eap1_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode2Eap1_F_CustomAction0_Data = (CR_CDBGNODE2EAP1_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_CustomAction0), 64'(CSR_CDbgNode2Eap1_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_CustomAction0_ff   (.out(CSR_CDbgNode2Eap1_F_CustomAction0), .in(CSR_CDbgNode2Eap1_F_CustomAction0_Data), .en(CSR_CDbgNode2Eap1_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_EventType1_WrEn;
logic [CR_CDBGNODE2EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType1_Data;
logic [CR_CDBGNODE2EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType1_DataEff;
assign CSR_CDbgNode2Eap1_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode2Eap1_F_EventType1_Data = (CR_CDBGNODE2EAP1_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_EventType1), 64'(CSR_CDbgNode2Eap1_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_EventType1_ff   (.out(CSR_CDbgNode2Eap1_F_EventType1), .in(CSR_CDbgNode2Eap1_F_EventType1_Data), .en(CSR_CDbgNode2Eap1_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_EventType0_WrEn;
logic [CR_CDBGNODE2EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType0_Data;
logic [CR_CDBGNODE2EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap1_F_EventType0_DataEff;
assign CSR_CDbgNode2Eap1_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode2Eap1_F_EventType0_Data = (CR_CDBGNODE2EAP1_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_EventType0), 64'(CSR_CDbgNode2Eap1_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_EventType0_ff   (.out(CSR_CDbgNode2Eap1_F_EventType0), .in(CSR_CDbgNode2Eap1_F_EventType0_Data), .en(CSR_CDbgNode2Eap1_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_LogicalOp_WrEn;
logic [CR_CDBGNODE2EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap1_F_LogicalOp_Data;
logic [CR_CDBGNODE2EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap1_F_LogicalOp_DataEff;
assign CSR_CDbgNode2Eap1_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode2Eap1_F_LogicalOp_Data = (CR_CDBGNODE2EAP1_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_LogicalOp), 64'(CSR_CDbgNode2Eap1_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_LogicalOp_ff   (.out(CSR_CDbgNode2Eap1_F_LogicalOp), .in(CSR_CDbgNode2Eap1_F_LogicalOp_Data), .en(CSR_CDbgNode2Eap1_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_Action1_WrEn;
logic [CR_CDBGNODE2EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action1_Data;
logic [CR_CDBGNODE2EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action1_DataEff;
assign CSR_CDbgNode2Eap1_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode2Eap1_F_Action1_Data = (CR_CDBGNODE2EAP1_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_Action1), 64'(CSR_CDbgNode2Eap1_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_Action1_ff   (.out(CSR_CDbgNode2Eap1_F_Action1), .in(CSR_CDbgNode2Eap1_F_Action1_Data), .en(CSR_CDbgNode2Eap1_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_Action0_WrEn;
logic [CR_CDBGNODE2EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action0_Data;
logic [CR_CDBGNODE2EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap1_F_Action0_DataEff;
assign CSR_CDbgNode2Eap1_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode2Eap1_F_Action0_Data = (CR_CDBGNODE2EAP1_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_Action0), 64'(CSR_CDbgNode2Eap1_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_Action0_ff   (.out(CSR_CDbgNode2Eap1_F_Action0), .in(CSR_CDbgNode2Eap1_F_Action0_Data), .en(CSR_CDbgNode2Eap1_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap1_F_DestNode_WrEn;
logic [CR_CDBGNODE2EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap1_F_DestNode_Data;
logic [CR_CDBGNODE2EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap1_F_DestNode_DataEff;
assign CSR_CDbgNode2Eap1_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode2Eap1_F_DestNode_Data = (CR_CDBGNODE2EAP1_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap1_F_DestNode), 64'(CSR_CDbgNode2Eap1_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap1_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP1_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap1_F_DestNode_ff   (.out(CSR_CDbgNode2Eap1_F_DestNode), .in(CSR_CDbgNode2Eap1_F_DestNode_Data), .en(CSR_CDbgNode2Eap1_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE3EAP0
logic                                           CSR_CDbgNode3Eap0_F_Action3_WrEn;
logic [CR_CDBGNODE3EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action3_Data;
logic [CR_CDBGNODE3EAP0_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action3_DataEff;
assign CSR_CDbgNode3Eap0_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode3Eap0_F_Action3_Data = (CR_CDBGNODE3EAP0_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_Action3), 64'(CSR_CDbgNode3Eap0_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_Action3_ff   (.out(CSR_CDbgNode3Eap0_F_Action3), .in(CSR_CDbgNode3Eap0_F_Action3_Data), .en(CSR_CDbgNode3Eap0_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_Action2_WrEn;
logic [CR_CDBGNODE3EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action2_Data;
logic [CR_CDBGNODE3EAP0_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action2_DataEff;
assign CSR_CDbgNode3Eap0_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode3Eap0_F_Action2_Data = (CR_CDBGNODE3EAP0_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_Action2), 64'(CSR_CDbgNode3Eap0_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_Action2_ff   (.out(CSR_CDbgNode3Eap0_F_Action2), .in(CSR_CDbgNode3Eap0_F_Action2_Data), .en(CSR_CDbgNode3Eap0_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_Udf_WrEn;
logic [CR_CDBGNODE3EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap0_F_Udf_Data;
logic [CR_CDBGNODE3EAP0_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap0_F_Udf_DataEff;
assign CSR_CDbgNode3Eap0_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode3Eap0_F_Udf_Data = (CR_CDBGNODE3EAP0_UDF_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_Udf), 64'(CSR_CDbgNode3Eap0_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_Udf_ff   (.out(CSR_CDbgNode3Eap0_F_Udf), .in(CSR_CDbgNode3Eap0_F_Udf_Data), .en(CSR_CDbgNode3Eap0_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_EventType2_WrEn;
logic [CR_CDBGNODE3EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType2_Data;
logic [CR_CDBGNODE3EAP0_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType2_DataEff;
assign CSR_CDbgNode3Eap0_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode3Eap0_F_EventType2_Data = (CR_CDBGNODE3EAP0_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_EventType2), 64'(CSR_CDbgNode3Eap0_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_EventType2_ff   (.out(CSR_CDbgNode3Eap0_F_EventType2), .in(CSR_CDbgNode3Eap0_F_EventType2_Data), .en(CSR_CDbgNode3Eap0_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode3Eap0_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode3Eap0_F_CustomAction1Enable_Data = (CR_CDBGNODE3EAP0_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_CustomAction1Enable), 64'(CSR_CDbgNode3Eap0_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode3Eap0_F_CustomAction1Enable), .in(CSR_CDbgNode3Eap0_F_CustomAction1Enable_Data), .en(CSR_CDbgNode3Eap0_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode3Eap0_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode3Eap0_F_CustomAction0Enable_Data = (CR_CDBGNODE3EAP0_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_CustomAction0Enable), 64'(CSR_CDbgNode3Eap0_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode3Eap0_F_CustomAction0Enable), .in(CSR_CDbgNode3Eap0_F_CustomAction0Enable_Data), .en(CSR_CDbgNode3Eap0_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_CustomAction1_WrEn;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction1_Data;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction1_DataEff;
assign CSR_CDbgNode3Eap0_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode3Eap0_F_CustomAction1_Data = (CR_CDBGNODE3EAP0_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_CustomAction1), 64'(CSR_CDbgNode3Eap0_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_CustomAction1_ff   (.out(CSR_CDbgNode3Eap0_F_CustomAction1), .in(CSR_CDbgNode3Eap0_F_CustomAction1_Data), .en(CSR_CDbgNode3Eap0_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_CustomAction0_WrEn;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction0_Data;
logic [CR_CDBGNODE3EAP0_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap0_F_CustomAction0_DataEff;
assign CSR_CDbgNode3Eap0_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode3Eap0_F_CustomAction0_Data = (CR_CDBGNODE3EAP0_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_CustomAction0), 64'(CSR_CDbgNode3Eap0_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_CustomAction0_ff   (.out(CSR_CDbgNode3Eap0_F_CustomAction0), .in(CSR_CDbgNode3Eap0_F_CustomAction0_Data), .en(CSR_CDbgNode3Eap0_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_EventType1_WrEn;
logic [CR_CDBGNODE3EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType1_Data;
logic [CR_CDBGNODE3EAP0_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType1_DataEff;
assign CSR_CDbgNode3Eap0_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode3Eap0_F_EventType1_Data = (CR_CDBGNODE3EAP0_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_EventType1), 64'(CSR_CDbgNode3Eap0_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_EventType1_ff   (.out(CSR_CDbgNode3Eap0_F_EventType1), .in(CSR_CDbgNode3Eap0_F_EventType1_Data), .en(CSR_CDbgNode3Eap0_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_EventType0_WrEn;
logic [CR_CDBGNODE3EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType0_Data;
logic [CR_CDBGNODE3EAP0_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap0_F_EventType0_DataEff;
assign CSR_CDbgNode3Eap0_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode3Eap0_F_EventType0_Data = (CR_CDBGNODE3EAP0_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_EventType0), 64'(CSR_CDbgNode3Eap0_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_EventType0_ff   (.out(CSR_CDbgNode3Eap0_F_EventType0), .in(CSR_CDbgNode3Eap0_F_EventType0_Data), .en(CSR_CDbgNode3Eap0_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_LogicalOp_WrEn;
logic [CR_CDBGNODE3EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap0_F_LogicalOp_Data;
logic [CR_CDBGNODE3EAP0_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap0_F_LogicalOp_DataEff;
assign CSR_CDbgNode3Eap0_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode3Eap0_F_LogicalOp_Data = (CR_CDBGNODE3EAP0_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_LogicalOp), 64'(CSR_CDbgNode3Eap0_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_LogicalOp_ff   (.out(CSR_CDbgNode3Eap0_F_LogicalOp), .in(CSR_CDbgNode3Eap0_F_LogicalOp_Data), .en(CSR_CDbgNode3Eap0_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_Action1_WrEn;
logic [CR_CDBGNODE3EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action1_Data;
logic [CR_CDBGNODE3EAP0_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action1_DataEff;
assign CSR_CDbgNode3Eap0_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode3Eap0_F_Action1_Data = (CR_CDBGNODE3EAP0_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_Action1), 64'(CSR_CDbgNode3Eap0_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_Action1_ff   (.out(CSR_CDbgNode3Eap0_F_Action1), .in(CSR_CDbgNode3Eap0_F_Action1_Data), .en(CSR_CDbgNode3Eap0_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_Action0_WrEn;
logic [CR_CDBGNODE3EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action0_Data;
logic [CR_CDBGNODE3EAP0_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap0_F_Action0_DataEff;
assign CSR_CDbgNode3Eap0_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode3Eap0_F_Action0_Data = (CR_CDBGNODE3EAP0_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_Action0), 64'(CSR_CDbgNode3Eap0_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_Action0_ff   (.out(CSR_CDbgNode3Eap0_F_Action0), .in(CSR_CDbgNode3Eap0_F_Action0_Data), .en(CSR_CDbgNode3Eap0_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap0_F_DestNode_WrEn;
logic [CR_CDBGNODE3EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap0_F_DestNode_Data;
logic [CR_CDBGNODE3EAP0_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap0_F_DestNode_DataEff;
assign CSR_CDbgNode3Eap0_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode3Eap0_F_DestNode_Data = (CR_CDBGNODE3EAP0_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap0_F_DestNode), 64'(CSR_CDbgNode3Eap0_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap0_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP0))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP0_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap0_F_DestNode_ff   (.out(CSR_CDbgNode3Eap0_F_DestNode), .in(CSR_CDbgNode3Eap0_F_DestNode_Data), .en(CSR_CDbgNode3Eap0_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE3EAP1
logic                                           CSR_CDbgNode3Eap1_F_Action3_WrEn;
logic [CR_CDBGNODE3EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action3_Data;
logic [CR_CDBGNODE3EAP1_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action3_DataEff;
assign CSR_CDbgNode3Eap1_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode3Eap1_F_Action3_Data = (CR_CDBGNODE3EAP1_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_Action3), 64'(CSR_CDbgNode3Eap1_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_Action3_ff   (.out(CSR_CDbgNode3Eap1_F_Action3), .in(CSR_CDbgNode3Eap1_F_Action3_Data), .en(CSR_CDbgNode3Eap1_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_Action2_WrEn;
logic [CR_CDBGNODE3EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action2_Data;
logic [CR_CDBGNODE3EAP1_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action2_DataEff;
assign CSR_CDbgNode3Eap1_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode3Eap1_F_Action2_Data = (CR_CDBGNODE3EAP1_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_Action2), 64'(CSR_CDbgNode3Eap1_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_Action2_ff   (.out(CSR_CDbgNode3Eap1_F_Action2), .in(CSR_CDbgNode3Eap1_F_Action2_Data), .en(CSR_CDbgNode3Eap1_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_Udf_WrEn;
logic [CR_CDBGNODE3EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap1_F_Udf_Data;
logic [CR_CDBGNODE3EAP1_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap1_F_Udf_DataEff;
assign CSR_CDbgNode3Eap1_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode3Eap1_F_Udf_Data = (CR_CDBGNODE3EAP1_UDF_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_Udf), 64'(CSR_CDbgNode3Eap1_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_Udf_ff   (.out(CSR_CDbgNode3Eap1_F_Udf), .in(CSR_CDbgNode3Eap1_F_Udf_Data), .en(CSR_CDbgNode3Eap1_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_EventType2_WrEn;
logic [CR_CDBGNODE3EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType2_Data;
logic [CR_CDBGNODE3EAP1_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType2_DataEff;
assign CSR_CDbgNode3Eap1_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode3Eap1_F_EventType2_Data = (CR_CDBGNODE3EAP1_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_EventType2), 64'(CSR_CDbgNode3Eap1_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_EventType2_ff   (.out(CSR_CDbgNode3Eap1_F_EventType2), .in(CSR_CDbgNode3Eap1_F_EventType2_Data), .en(CSR_CDbgNode3Eap1_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode3Eap1_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode3Eap1_F_CustomAction1Enable_Data = (CR_CDBGNODE3EAP1_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_CustomAction1Enable), 64'(CSR_CDbgNode3Eap1_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode3Eap1_F_CustomAction1Enable), .in(CSR_CDbgNode3Eap1_F_CustomAction1Enable_Data), .en(CSR_CDbgNode3Eap1_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode3Eap1_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode3Eap1_F_CustomAction0Enable_Data = (CR_CDBGNODE3EAP1_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_CustomAction0Enable), 64'(CSR_CDbgNode3Eap1_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode3Eap1_F_CustomAction0Enable), .in(CSR_CDbgNode3Eap1_F_CustomAction0Enable_Data), .en(CSR_CDbgNode3Eap1_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_CustomAction1_WrEn;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction1_Data;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction1_DataEff;
assign CSR_CDbgNode3Eap1_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode3Eap1_F_CustomAction1_Data = (CR_CDBGNODE3EAP1_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_CustomAction1), 64'(CSR_CDbgNode3Eap1_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_CustomAction1_ff   (.out(CSR_CDbgNode3Eap1_F_CustomAction1), .in(CSR_CDbgNode3Eap1_F_CustomAction1_Data), .en(CSR_CDbgNode3Eap1_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_CustomAction0_WrEn;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction0_Data;
logic [CR_CDBGNODE3EAP1_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap1_F_CustomAction0_DataEff;
assign CSR_CDbgNode3Eap1_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode3Eap1_F_CustomAction0_Data = (CR_CDBGNODE3EAP1_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_CustomAction0), 64'(CSR_CDbgNode3Eap1_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_CustomAction0_ff   (.out(CSR_CDbgNode3Eap1_F_CustomAction0), .in(CSR_CDbgNode3Eap1_F_CustomAction0_Data), .en(CSR_CDbgNode3Eap1_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_EventType1_WrEn;
logic [CR_CDBGNODE3EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType1_Data;
logic [CR_CDBGNODE3EAP1_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType1_DataEff;
assign CSR_CDbgNode3Eap1_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode3Eap1_F_EventType1_Data = (CR_CDBGNODE3EAP1_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_EventType1), 64'(CSR_CDbgNode3Eap1_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_EventType1_ff   (.out(CSR_CDbgNode3Eap1_F_EventType1), .in(CSR_CDbgNode3Eap1_F_EventType1_Data), .en(CSR_CDbgNode3Eap1_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_EventType0_WrEn;
logic [CR_CDBGNODE3EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType0_Data;
logic [CR_CDBGNODE3EAP1_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap1_F_EventType0_DataEff;
assign CSR_CDbgNode3Eap1_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode3Eap1_F_EventType0_Data = (CR_CDBGNODE3EAP1_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_EventType0), 64'(CSR_CDbgNode3Eap1_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_EventType0_ff   (.out(CSR_CDbgNode3Eap1_F_EventType0), .in(CSR_CDbgNode3Eap1_F_EventType0_Data), .en(CSR_CDbgNode3Eap1_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_LogicalOp_WrEn;
logic [CR_CDBGNODE3EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap1_F_LogicalOp_Data;
logic [CR_CDBGNODE3EAP1_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap1_F_LogicalOp_DataEff;
assign CSR_CDbgNode3Eap1_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode3Eap1_F_LogicalOp_Data = (CR_CDBGNODE3EAP1_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_LogicalOp), 64'(CSR_CDbgNode3Eap1_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_LogicalOp_ff   (.out(CSR_CDbgNode3Eap1_F_LogicalOp), .in(CSR_CDbgNode3Eap1_F_LogicalOp_Data), .en(CSR_CDbgNode3Eap1_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_Action1_WrEn;
logic [CR_CDBGNODE3EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action1_Data;
logic [CR_CDBGNODE3EAP1_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action1_DataEff;
assign CSR_CDbgNode3Eap1_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode3Eap1_F_Action1_Data = (CR_CDBGNODE3EAP1_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_Action1), 64'(CSR_CDbgNode3Eap1_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_Action1_ff   (.out(CSR_CDbgNode3Eap1_F_Action1), .in(CSR_CDbgNode3Eap1_F_Action1_Data), .en(CSR_CDbgNode3Eap1_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_Action0_WrEn;
logic [CR_CDBGNODE3EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action0_Data;
logic [CR_CDBGNODE3EAP1_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap1_F_Action0_DataEff;
assign CSR_CDbgNode3Eap1_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode3Eap1_F_Action0_Data = (CR_CDBGNODE3EAP1_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_Action0), 64'(CSR_CDbgNode3Eap1_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_Action0_ff   (.out(CSR_CDbgNode3Eap1_F_Action0), .in(CSR_CDbgNode3Eap1_F_Action0_Data), .en(CSR_CDbgNode3Eap1_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap1_F_DestNode_WrEn;
logic [CR_CDBGNODE3EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap1_F_DestNode_Data;
logic [CR_CDBGNODE3EAP1_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap1_F_DestNode_DataEff;
assign CSR_CDbgNode3Eap1_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode3Eap1_F_DestNode_Data = (CR_CDBGNODE3EAP1_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap1_F_DestNode), 64'(CSR_CDbgNode3Eap1_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap1_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP1))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP1_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap1_F_DestNode_ff   (.out(CSR_CDbgNode3Eap1_F_DestNode), .in(CSR_CDbgNode3Eap1_F_DestNode_Data), .en(CSR_CDbgNode3Eap1_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMASK0
logic                                           CSR_CDbgSignalMask0_F_Value_WrEn;
logic [CR_CDBGSIGNALMASK0_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask0_F_Value_Data;
logic [CR_CDBGSIGNALMASK0_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask0_F_Value_DataEff;
assign CSR_CDbgSignalMask0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMask0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMask0_F_Value[31:0]};
assign CSR_CDbgSignalMask0_F_Value_Data = (CR_CDBGSIGNALMASK0_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMask0_F_Value), 64'(CSR_CDbgSignalMask0_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMask0_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMASK0))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMASK0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMask0_F_Value_ff   (.out(CSR_CDbgSignalMask0_F_Value), .in(CSR_CDbgSignalMask0_F_Value_Data), .en(CSR_CDbgSignalMask0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMATCH0
logic                                           CSR_CDbgSignalMatch0_F_Value_WrEn;
logic [CR_CDBGSIGNALMATCH0_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch0_F_Value_Data;
logic [CR_CDBGSIGNALMATCH0_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch0_F_Value_DataEff;
assign CSR_CDbgSignalMatch0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMatch0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMatch0_F_Value[31:0]};
assign CSR_CDbgSignalMatch0_F_Value_Data = (CR_CDBGSIGNALMATCH0_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMatch0_F_Value), 64'(CSR_CDbgSignalMatch0_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMatch0_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMATCH0))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMATCH0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMatch0_F_Value_ff   (.out(CSR_CDbgSignalMatch0_F_Value), .in(CSR_CDbgSignalMatch0_F_Value_Data), .en(CSR_CDbgSignalMatch0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMASK1
logic                                           CSR_CDbgSignalMask1_F_Value_WrEn;
logic [CR_CDBGSIGNALMASK1_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask1_F_Value_Data;
logic [CR_CDBGSIGNALMASK1_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask1_F_Value_DataEff;
assign CSR_CDbgSignalMask1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMask1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMask1_F_Value[31:0]};
assign CSR_CDbgSignalMask1_F_Value_Data = (CR_CDBGSIGNALMASK1_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMask1_F_Value), 64'(CSR_CDbgSignalMask1_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMask1_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMASK1))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMASK1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMask1_F_Value_ff   (.out(CSR_CDbgSignalMask1_F_Value), .in(CSR_CDbgSignalMask1_F_Value_Data), .en(CSR_CDbgSignalMask1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMATCH1
logic                                           CSR_CDbgSignalMatch1_F_Value_WrEn;
logic [CR_CDBGSIGNALMATCH1_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch1_F_Value_Data;
logic [CR_CDBGSIGNALMATCH1_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch1_F_Value_DataEff;
assign CSR_CDbgSignalMatch1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMatch1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMatch1_F_Value[31:0]};
assign CSR_CDbgSignalMatch1_F_Value_Data = (CR_CDBGSIGNALMATCH1_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMatch1_F_Value), 64'(CSR_CDbgSignalMatch1_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMatch1_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMATCH1))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMATCH1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMatch1_F_Value_ff   (.out(CSR_CDbgSignalMatch1_F_Value), .in(CSR_CDbgSignalMatch1_F_Value_Data), .en(CSR_CDbgSignalMatch1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALEDGEDETECTCFG
logic                                           CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_WrEn;
logic [CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL1_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_Data;
logic [CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL1_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_DataEff;
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_DataEff = {reg_wr_data[13:13]};
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_Data = (CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL1_WIDTH'(update_value(64'(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1), 64'(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALEDGEDETECTCFG))));
generic_dff #(.WIDTH(CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL1_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_ff   (.out(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1), .in(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_Data), .en(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_WrEn;
logic [CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL1SELECT_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_Data;
logic [CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL1SELECT_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_DataEff;
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_DataEff = {reg_wr_data[12:7]};
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_Data = (CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL1SELECT_WIDTH'(update_value(64'(CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select), 64'(CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALEDGEDETECTCFG))));
generic_dff #(.WIDTH(CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL1SELECT_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_ff   (.out(CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select), .in(CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_Data), .en(CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_WrEn;
logic [CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL0_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_Data;
logic [CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL0_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_DataEff;
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_DataEff = {reg_wr_data[6:6]};
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_Data = (CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL0_WIDTH'(update_value(64'(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0), 64'(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALEDGEDETECTCFG))));
generic_dff #(.WIDTH(CR_CDBGSIGNALEDGEDETECTCFG_POSEDGESIGNAL0_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_ff   (.out(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0), .in(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_Data), .en(CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_WrEn;
logic [CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL0SELECT_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_Data;
logic [CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL0SELECT_WIDTH-1:0] CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_DataEff;
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_DataEff = {reg_wr_data[5:0]};
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_Data = (CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL0SELECT_WIDTH'(update_value(64'(CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select), 64'(CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALEDGEDETECTCFG))));
generic_dff #(.WIDTH(CR_CDBGSIGNALEDGEDETECTCFG_SIGNAL0SELECT_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_ff   (.out(CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select), .in(CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_Data), .en(CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGEAPSTATUS
logic                                           CSR_CDbgEapStatus_F_Node3Eap3W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap3W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap3W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap3W2C_DataEff = {reg_wr_data[47:47]};
assign CSR_CDbgEapStatus_F_Node3Eap3W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE3EAP3W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node3Eap3W2C), 64'(CSR_CDbgEapStatus_F_Node3Eap3W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node3Eap3W2C);
assign CSR_CDbgEapStatus_F_Node3Eap3W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node3Eap3W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP3W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap3W2C_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap3W2C), .in(CSR_CDbgEapStatus_F_Node3Eap3W2C_Data), .en(CSR_CDbgEapStatus_F_Node3Eap3W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap2W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap2W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap2W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap2W2C_DataEff = {reg_wr_data[46:46]};
assign CSR_CDbgEapStatus_F_Node3Eap2W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE3EAP2W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node3Eap2W2C), 64'(CSR_CDbgEapStatus_F_Node3Eap2W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node3Eap2W2C);
assign CSR_CDbgEapStatus_F_Node3Eap2W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node3Eap2W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP2W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap2W2C_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap2W2C), .in(CSR_CDbgEapStatus_F_Node3Eap2W2C_Data), .en(CSR_CDbgEapStatus_F_Node3Eap2W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap1W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap1W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap1W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap1W2C_DataEff = {reg_wr_data[45:45]};
assign CSR_CDbgEapStatus_F_Node3Eap1W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE3EAP1W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node3Eap1W2C), 64'(CSR_CDbgEapStatus_F_Node3Eap1W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node3Eap1W2C);
assign CSR_CDbgEapStatus_F_Node3Eap1W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node3Eap1W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP1W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap1W2C_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap1W2C), .in(CSR_CDbgEapStatus_F_Node3Eap1W2C_Data), .en(CSR_CDbgEapStatus_F_Node3Eap1W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap0W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap0W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node3Eap0W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap0W2C_DataEff = {reg_wr_data[44:44]};
assign CSR_CDbgEapStatus_F_Node3Eap0W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE3EAP0W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node3Eap0W2C), 64'(CSR_CDbgEapStatus_F_Node3Eap0W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node3Eap0W2C);
assign CSR_CDbgEapStatus_F_Node3Eap0W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node3Eap0W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP0W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap0W2C_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap0W2C), .in(CSR_CDbgEapStatus_F_Node3Eap0W2C_Data), .en(CSR_CDbgEapStatus_F_Node3Eap0W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap3W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap3W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap3W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap3W2C_DataEff = {reg_wr_data[43:43]};
assign CSR_CDbgEapStatus_F_Node2Eap3W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE2EAP3W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node2Eap3W2C), 64'(CSR_CDbgEapStatus_F_Node2Eap3W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node2Eap3W2C);
assign CSR_CDbgEapStatus_F_Node2Eap3W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node2Eap3W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP3W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap3W2C_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap3W2C), .in(CSR_CDbgEapStatus_F_Node2Eap3W2C_Data), .en(CSR_CDbgEapStatus_F_Node2Eap3W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap2W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap2W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap2W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap2W2C_DataEff = {reg_wr_data[42:42]};
assign CSR_CDbgEapStatus_F_Node2Eap2W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE2EAP2W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node2Eap2W2C), 64'(CSR_CDbgEapStatus_F_Node2Eap2W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node2Eap2W2C);
assign CSR_CDbgEapStatus_F_Node2Eap2W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node2Eap2W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP2W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap2W2C_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap2W2C), .in(CSR_CDbgEapStatus_F_Node2Eap2W2C_Data), .en(CSR_CDbgEapStatus_F_Node2Eap2W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap1W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap1W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap1W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap1W2C_DataEff = {reg_wr_data[41:41]};
assign CSR_CDbgEapStatus_F_Node2Eap1W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE2EAP1W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node2Eap1W2C), 64'(CSR_CDbgEapStatus_F_Node2Eap1W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node2Eap1W2C);
assign CSR_CDbgEapStatus_F_Node2Eap1W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node2Eap1W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP1W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap1W2C_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap1W2C), .in(CSR_CDbgEapStatus_F_Node2Eap1W2C_Data), .en(CSR_CDbgEapStatus_F_Node2Eap1W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap0W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap0W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node2Eap0W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap0W2C_DataEff = {reg_wr_data[40:40]};
assign CSR_CDbgEapStatus_F_Node2Eap0W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE2EAP0W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node2Eap0W2C), 64'(CSR_CDbgEapStatus_F_Node2Eap0W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node2Eap0W2C);
assign CSR_CDbgEapStatus_F_Node2Eap0W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node2Eap0W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP0W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap0W2C_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap0W2C), .in(CSR_CDbgEapStatus_F_Node2Eap0W2C_Data), .en(CSR_CDbgEapStatus_F_Node2Eap0W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap3W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap3W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap3W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap3W2C_DataEff = {reg_wr_data[39:39]};
assign CSR_CDbgEapStatus_F_Node1Eap3W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE1EAP3W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node1Eap3W2C), 64'(CSR_CDbgEapStatus_F_Node1Eap3W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node1Eap3W2C);
assign CSR_CDbgEapStatus_F_Node1Eap3W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node1Eap3W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP3W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap3W2C_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap3W2C), .in(CSR_CDbgEapStatus_F_Node1Eap3W2C_Data), .en(CSR_CDbgEapStatus_F_Node1Eap3W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap2W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap2W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap2W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap2W2C_DataEff = {reg_wr_data[38:38]};
assign CSR_CDbgEapStatus_F_Node1Eap2W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE1EAP2W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node1Eap2W2C), 64'(CSR_CDbgEapStatus_F_Node1Eap2W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node1Eap2W2C);
assign CSR_CDbgEapStatus_F_Node1Eap2W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node1Eap2W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP2W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap2W2C_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap2W2C), .in(CSR_CDbgEapStatus_F_Node1Eap2W2C_Data), .en(CSR_CDbgEapStatus_F_Node1Eap2W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap1W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap1W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap1W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap1W2C_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgEapStatus_F_Node1Eap1W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE1EAP1W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node1Eap1W2C), 64'(CSR_CDbgEapStatus_F_Node1Eap1W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node1Eap1W2C);
assign CSR_CDbgEapStatus_F_Node1Eap1W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node1Eap1W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP1W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap1W2C_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap1W2C), .in(CSR_CDbgEapStatus_F_Node1Eap1W2C_Data), .en(CSR_CDbgEapStatus_F_Node1Eap1W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap0W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap0W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node1Eap0W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap0W2C_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgEapStatus_F_Node1Eap0W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE1EAP0W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node1Eap0W2C), 64'(CSR_CDbgEapStatus_F_Node1Eap0W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node1Eap0W2C);
assign CSR_CDbgEapStatus_F_Node1Eap0W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node1Eap0W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP0W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap0W2C_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap0W2C), .in(CSR_CDbgEapStatus_F_Node1Eap0W2C_Data), .en(CSR_CDbgEapStatus_F_Node1Eap0W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap3W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap3W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP3W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap3W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap3W2C_DataEff = {reg_wr_data[35:35]};
assign CSR_CDbgEapStatus_F_Node0Eap3W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE0EAP3W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node0Eap3W2C), 64'(CSR_CDbgEapStatus_F_Node0Eap3W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node0Eap3W2C);
assign CSR_CDbgEapStatus_F_Node0Eap3W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node0Eap3W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP3W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap3W2C_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap3W2C), .in(CSR_CDbgEapStatus_F_Node0Eap3W2C_Data), .en(CSR_CDbgEapStatus_F_Node0Eap3W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap2W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap2W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP2W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap2W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap2W2C_DataEff = {reg_wr_data[34:34]};
assign CSR_CDbgEapStatus_F_Node0Eap2W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE0EAP2W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node0Eap2W2C), 64'(CSR_CDbgEapStatus_F_Node0Eap2W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node0Eap2W2C);
assign CSR_CDbgEapStatus_F_Node0Eap2W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node0Eap2W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP2W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap2W2C_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap2W2C), .in(CSR_CDbgEapStatus_F_Node0Eap2W2C_Data), .en(CSR_CDbgEapStatus_F_Node0Eap2W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap1W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap1W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP1W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap1W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap1W2C_DataEff = {reg_wr_data[33:33]};
assign CSR_CDbgEapStatus_F_Node0Eap1W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE0EAP1W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node0Eap1W2C), 64'(CSR_CDbgEapStatus_F_Node0Eap1W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node0Eap1W2C);
assign CSR_CDbgEapStatus_F_Node0Eap1W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node0Eap1W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP1W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap1W2C_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap1W2C), .in(CSR_CDbgEapStatus_F_Node0Eap1W2C_Data), .en(CSR_CDbgEapStatus_F_Node0Eap1W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap0W2C_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap0W2C_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP0W2C_WIDTH-1:0] CSR_CDbgEapStatus_F_Node0Eap0W2C_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap0W2C_DataEff = {reg_wr_data[32:32]};
assign CSR_CDbgEapStatus_F_Node0Eap0W2C_Data = ((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) ? CR_CDBGEAPSTATUS_NODE0EAP0W2C_WIDTH'(update_value(64'(CSR_CDbgEapStatus_F_Node0Eap0W2C), 64'(CSR_CDbgEapStatus_F_Node0Eap0W2C_DataEff[0:0]), reg_wr_instr_type)) : CrCsrCdbgeapstatusWr.Data.Node0Eap0W2C);
assign CSR_CDbgEapStatus_F_Node0Eap0W2C_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGEAPSTATUS)) | CrCsrCdbgeapstatusWr.Node0Eap0W2CWrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP0W2C_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap0W2C_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap0W2C), .in(CSR_CDbgEapStatus_F_Node0Eap0W2C_Data), .en(CSR_CDbgEapStatus_F_Node0Eap0W2C_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Rsvd3116_WrEn;
logic [CR_CDBGEAPSTATUS_RSVD3116_WIDTH    -1:0] CSR_CDbgEapStatus_F_Rsvd3116_Data;
logic [CR_CDBGEAPSTATUS_RSVD3116_WIDTH    -1:0] CSR_CDbgEapStatus_F_Rsvd3116_DataEff;
assign CSR_CDbgEapStatus_F_Rsvd3116_DataEff = {reg_wr_data[31:16]};
assign CSR_CDbgEapStatus_F_Rsvd3116_Data = (CrCsrCdbgeapstatusWr.Data.Rsvd3116);
assign CSR_CDbgEapStatus_F_Rsvd3116_WrEn = ((CrCsrCdbgeapstatusWr.Rsvd3116WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_RSVD3116_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Rsvd3116_ff   (.out(CSR_CDbgEapStatus_F_Rsvd3116), .in(CSR_CDbgEapStatus_F_Rsvd3116_Data), .en(CSR_CDbgEapStatus_F_Rsvd3116_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap3_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap3_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap3_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap3_DataEff = {reg_wr_data[15:15]};
assign CSR_CDbgEapStatus_F_Node3Eap3_Data = (CrCsrCdbgeapstatusWr.Data.Node3Eap3);
assign CSR_CDbgEapStatus_F_Node3Eap3_WrEn = ((CrCsrCdbgeapstatusWr.Node3Eap3WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP3_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap3_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap3), .in(CSR_CDbgEapStatus_F_Node3Eap3_Data), .en(CSR_CDbgEapStatus_F_Node3Eap3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap2_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap2_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap2_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap2_DataEff = {reg_wr_data[14:14]};
assign CSR_CDbgEapStatus_F_Node3Eap2_Data = (CrCsrCdbgeapstatusWr.Data.Node3Eap2);
assign CSR_CDbgEapStatus_F_Node3Eap2_WrEn = ((CrCsrCdbgeapstatusWr.Node3Eap2WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP2_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap2_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap2), .in(CSR_CDbgEapStatus_F_Node3Eap2_Data), .en(CSR_CDbgEapStatus_F_Node3Eap2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap1_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap1_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap1_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap1_DataEff = {reg_wr_data[13:13]};
assign CSR_CDbgEapStatus_F_Node3Eap1_Data = (CrCsrCdbgeapstatusWr.Data.Node3Eap1);
assign CSR_CDbgEapStatus_F_Node3Eap1_WrEn = ((CrCsrCdbgeapstatusWr.Node3Eap1WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP1_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap1_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap1), .in(CSR_CDbgEapStatus_F_Node3Eap1_Data), .en(CSR_CDbgEapStatus_F_Node3Eap1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node3Eap0_WrEn;
logic [CR_CDBGEAPSTATUS_NODE3EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap0_Data;
logic [CR_CDBGEAPSTATUS_NODE3EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node3Eap0_DataEff;
assign CSR_CDbgEapStatus_F_Node3Eap0_DataEff = {reg_wr_data[12:12]};
assign CSR_CDbgEapStatus_F_Node3Eap0_Data = (CrCsrCdbgeapstatusWr.Data.Node3Eap0);
assign CSR_CDbgEapStatus_F_Node3Eap0_WrEn = ((CrCsrCdbgeapstatusWr.Node3Eap0WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE3EAP0_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node3Eap0_ff   (.out(CSR_CDbgEapStatus_F_Node3Eap0), .in(CSR_CDbgEapStatus_F_Node3Eap0_Data), .en(CSR_CDbgEapStatus_F_Node3Eap0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap3_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap3_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap3_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap3_DataEff = {reg_wr_data[11:11]};
assign CSR_CDbgEapStatus_F_Node2Eap3_Data = (CrCsrCdbgeapstatusWr.Data.Node2Eap3);
assign CSR_CDbgEapStatus_F_Node2Eap3_WrEn = ((CrCsrCdbgeapstatusWr.Node2Eap3WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP3_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap3_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap3), .in(CSR_CDbgEapStatus_F_Node2Eap3_Data), .en(CSR_CDbgEapStatus_F_Node2Eap3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap2_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap2_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap2_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap2_DataEff = {reg_wr_data[10:10]};
assign CSR_CDbgEapStatus_F_Node2Eap2_Data = (CrCsrCdbgeapstatusWr.Data.Node2Eap2);
assign CSR_CDbgEapStatus_F_Node2Eap2_WrEn = ((CrCsrCdbgeapstatusWr.Node2Eap2WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP2_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap2_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap2), .in(CSR_CDbgEapStatus_F_Node2Eap2_Data), .en(CSR_CDbgEapStatus_F_Node2Eap2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap1_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap1_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap1_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap1_DataEff = {reg_wr_data[9:9]};
assign CSR_CDbgEapStatus_F_Node2Eap1_Data = (CrCsrCdbgeapstatusWr.Data.Node2Eap1);
assign CSR_CDbgEapStatus_F_Node2Eap1_WrEn = ((CrCsrCdbgeapstatusWr.Node2Eap1WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP1_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap1_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap1), .in(CSR_CDbgEapStatus_F_Node2Eap1_Data), .en(CSR_CDbgEapStatus_F_Node2Eap1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node2Eap0_WrEn;
logic [CR_CDBGEAPSTATUS_NODE2EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap0_Data;
logic [CR_CDBGEAPSTATUS_NODE2EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node2Eap0_DataEff;
assign CSR_CDbgEapStatus_F_Node2Eap0_DataEff = {reg_wr_data[8:8]};
assign CSR_CDbgEapStatus_F_Node2Eap0_Data = (CrCsrCdbgeapstatusWr.Data.Node2Eap0);
assign CSR_CDbgEapStatus_F_Node2Eap0_WrEn = ((CrCsrCdbgeapstatusWr.Node2Eap0WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE2EAP0_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node2Eap0_ff   (.out(CSR_CDbgEapStatus_F_Node2Eap0), .in(CSR_CDbgEapStatus_F_Node2Eap0_Data), .en(CSR_CDbgEapStatus_F_Node2Eap0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap3_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap3_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap3_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap3_DataEff = {reg_wr_data[7:7]};
assign CSR_CDbgEapStatus_F_Node1Eap3_Data = (CrCsrCdbgeapstatusWr.Data.Node1Eap3);
assign CSR_CDbgEapStatus_F_Node1Eap3_WrEn = ((CrCsrCdbgeapstatusWr.Node1Eap3WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP3_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap3_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap3), .in(CSR_CDbgEapStatus_F_Node1Eap3_Data), .en(CSR_CDbgEapStatus_F_Node1Eap3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap2_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap2_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap2_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap2_DataEff = {reg_wr_data[6:6]};
assign CSR_CDbgEapStatus_F_Node1Eap2_Data = (CrCsrCdbgeapstatusWr.Data.Node1Eap2);
assign CSR_CDbgEapStatus_F_Node1Eap2_WrEn = ((CrCsrCdbgeapstatusWr.Node1Eap2WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP2_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap2_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap2), .in(CSR_CDbgEapStatus_F_Node1Eap2_Data), .en(CSR_CDbgEapStatus_F_Node1Eap2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap1_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap1_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap1_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap1_DataEff = {reg_wr_data[5:5]};
assign CSR_CDbgEapStatus_F_Node1Eap1_Data = (CrCsrCdbgeapstatusWr.Data.Node1Eap1);
assign CSR_CDbgEapStatus_F_Node1Eap1_WrEn = ((CrCsrCdbgeapstatusWr.Node1Eap1WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP1_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap1_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap1), .in(CSR_CDbgEapStatus_F_Node1Eap1_Data), .en(CSR_CDbgEapStatus_F_Node1Eap1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node1Eap0_WrEn;
logic [CR_CDBGEAPSTATUS_NODE1EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap0_Data;
logic [CR_CDBGEAPSTATUS_NODE1EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node1Eap0_DataEff;
assign CSR_CDbgEapStatus_F_Node1Eap0_DataEff = {reg_wr_data[4:4]};
assign CSR_CDbgEapStatus_F_Node1Eap0_Data = (CrCsrCdbgeapstatusWr.Data.Node1Eap0);
assign CSR_CDbgEapStatus_F_Node1Eap0_WrEn = ((CrCsrCdbgeapstatusWr.Node1Eap0WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE1EAP0_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node1Eap0_ff   (.out(CSR_CDbgEapStatus_F_Node1Eap0), .in(CSR_CDbgEapStatus_F_Node1Eap0_Data), .en(CSR_CDbgEapStatus_F_Node1Eap0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap3_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap3_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP3_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap3_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap3_DataEff = {reg_wr_data[3:3]};
assign CSR_CDbgEapStatus_F_Node0Eap3_Data = (CrCsrCdbgeapstatusWr.Data.Node0Eap3);
assign CSR_CDbgEapStatus_F_Node0Eap3_WrEn = ((CrCsrCdbgeapstatusWr.Node0Eap3WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP3_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap3_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap3), .in(CSR_CDbgEapStatus_F_Node0Eap3_Data), .en(CSR_CDbgEapStatus_F_Node0Eap3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap2_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap2_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP2_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap2_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap2_DataEff = {reg_wr_data[2:2]};
assign CSR_CDbgEapStatus_F_Node0Eap2_Data = (CrCsrCdbgeapstatusWr.Data.Node0Eap2);
assign CSR_CDbgEapStatus_F_Node0Eap2_WrEn = ((CrCsrCdbgeapstatusWr.Node0Eap2WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP2_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap2_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap2), .in(CSR_CDbgEapStatus_F_Node0Eap2_Data), .en(CSR_CDbgEapStatus_F_Node0Eap2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap1_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap1_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP1_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap1_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap1_DataEff = {reg_wr_data[1:1]};
assign CSR_CDbgEapStatus_F_Node0Eap1_Data = (CrCsrCdbgeapstatusWr.Data.Node0Eap1);
assign CSR_CDbgEapStatus_F_Node0Eap1_WrEn = ((CrCsrCdbgeapstatusWr.Node0Eap1WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP1_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap1_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap1), .in(CSR_CDbgEapStatus_F_Node0Eap1_Data), .en(CSR_CDbgEapStatus_F_Node0Eap1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgEapStatus_F_Node0Eap0_WrEn;
logic [CR_CDBGEAPSTATUS_NODE0EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap0_Data;
logic [CR_CDBGEAPSTATUS_NODE0EAP0_WIDTH   -1:0] CSR_CDbgEapStatus_F_Node0Eap0_DataEff;
assign CSR_CDbgEapStatus_F_Node0Eap0_DataEff = {reg_wr_data[0:0]};
assign CSR_CDbgEapStatus_F_Node0Eap0_Data = (CrCsrCdbgeapstatusWr.Data.Node0Eap0);
assign CSR_CDbgEapStatus_F_Node0Eap0_WrEn = ((CrCsrCdbgeapstatusWr.Node0Eap0WrEn));
generic_dff #(.WIDTH(CR_CDBGEAPSTATUS_NODE0EAP0_WIDTH), .RESET_VALUE(0)) CSR_CDbgEapStatus_F_Node0Eap0_ff   (.out(CSR_CDbgEapStatus_F_Node0Eap0), .in(CSR_CDbgEapStatus_F_Node0Eap0_Data), .en(CSR_CDbgEapStatus_F_Node0Eap0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLACTRLSTATUS
logic                                           CSR_CDbgClaCtrlStatus_F_ClaLock_WrEn;
logic [CR_CDBGCLACTRLSTATUS_CLALOCK_WIDTH -1:0] CSR_CDbgClaCtrlStatus_F_ClaLock_Data;
logic [CR_CDBGCLACTRLSTATUS_CLALOCK_WIDTH -1:0] CSR_CDbgClaCtrlStatus_F_ClaLock_DataEff;
assign CSR_CDbgClaCtrlStatus_F_ClaLock_DataEff = {reg_wr_data[63:63]};
assign CSR_CDbgClaCtrlStatus_F_ClaLock_Data = (CR_CDBGCLACTRLSTATUS_CLALOCK_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_ClaLock), 64'(CSR_CDbgClaCtrlStatus_F_ClaLock_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_ClaLock_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS)))) & ~CSR_CDbgClaCtrlStatus_F_ClaLock;
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_CLALOCK_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_ClaLock_ff   (.out(CSR_CDbgClaCtrlStatus_F_ClaLock), .in(CSR_CDbgClaCtrlStatus_F_ClaLock_Data), .en(CSR_CDbgClaCtrlStatus_F_ClaLock_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_Rsvd6216_WrEn;
logic [CR_CDBGCLACTRLSTATUS_RSVD6216_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_Rsvd6216_Data;
logic [CR_CDBGCLACTRLSTATUS_RSVD6216_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_Rsvd6216_DataEff;
assign CSR_CDbgClaCtrlStatus_F_Rsvd6216_DataEff = {reg_wr_strb[1] ? reg_wr_data[62:32] : CSR_CDbgClaCtrlStatus_F_Rsvd6216[46:16] , reg_wr_strb[0] ? reg_wr_data[31:16] : CSR_CDbgClaCtrlStatus_F_Rsvd6216[15:0]};
assign CSR_CDbgClaCtrlStatus_F_Rsvd6216_Data = (CR_CDBGCLACTRLSTATUS_RSVD6216_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_Rsvd6216), 64'(CSR_CDbgClaCtrlStatus_F_Rsvd6216_DataEff[46:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_Rsvd6216_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS))));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_RSVD6216_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_Rsvd6216_ff   (.out(CSR_CDbgClaCtrlStatus_F_Rsvd6216), .in(CSR_CDbgClaCtrlStatus_F_Rsvd6216_Data), .en(CSR_CDbgClaCtrlStatus_F_Rsvd6216_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_WrEn;
logic [CR_CDBGCLACTRLSTATUS_DISABLELOCALCLOCKHALT_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_Data;
logic [CR_CDBGCLACTRLSTATUS_DISABLELOCALCLOCKHALT_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_DataEff;
assign CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_DataEff = {reg_wr_data[15:15]};
assign CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_Data = (CR_CDBGCLACTRLSTATUS_DISABLELOCALCLOCKHALT_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt), 64'(CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS))));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_DISABLELOCALCLOCKHALT_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_ff   (.out(CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt), .in(CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_Data), .en(CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_WrEn;
logic [CR_CDBGCLACTRLSTATUS_DISABLEGLOBALCLOCKHALT_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_Data;
logic [CR_CDBGCLACTRLSTATUS_DISABLEGLOBALCLOCKHALT_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_DataEff;
assign CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_DataEff = {reg_wr_data[14:14]};
assign CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_Data = (CR_CDBGCLACTRLSTATUS_DISABLEGLOBALCLOCKHALT_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt), 64'(CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS))));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_DISABLEGLOBALCLOCKHALT_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_ff   (.out(CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt), .in(CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_Data), .en(CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_WrEn;
logic [CR_CDBGCLACTRLSTATUS_CLACHAINLOOPDELAY_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_Data;
logic [CR_CDBGCLACTRLSTATUS_CLACHAINLOOPDELAY_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_DataEff;
assign CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_DataEff = {reg_wr_data[13:7]};
assign CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_Data = (CR_CDBGCLACTRLSTATUS_CLACHAINLOOPDELAY_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay), 64'(CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_DataEff[6:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS))));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_CLACHAINLOOPDELAY_WIDTH), .RESET_VALUE(7'h36)) CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_ff   (.out(CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay), .in(CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_Data), .en(CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_EnableCla_WrEn;
logic [CR_CDBGCLACTRLSTATUS_ENABLECLA_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_EnableCla_Data;
logic [CR_CDBGCLACTRLSTATUS_ENABLECLA_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_EnableCla_DataEff;
assign CSR_CDbgClaCtrlStatus_F_EnableCla_DataEff = {reg_wr_data[6:6]};
assign CSR_CDbgClaCtrlStatus_F_EnableCla_Data = (CR_CDBGCLACTRLSTATUS_ENABLECLA_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_EnableCla), 64'(CSR_CDbgClaCtrlStatus_F_EnableCla_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_EnableCla_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS)))) & ~CSR_CDbgClaCtrlStatus_F_ClaLock;
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_ENABLECLA_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_EnableCla_ff   (.out(CSR_CDbgClaCtrlStatus_F_EnableCla), .in(CSR_CDbgClaCtrlStatus_F_EnableCla_Data), .en(CSR_CDbgClaCtrlStatus_F_EnableCla_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_EnableEap_WrEn;
logic [CR_CDBGCLACTRLSTATUS_ENABLEEAP_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_EnableEap_Data;
logic [CR_CDBGCLACTRLSTATUS_ENABLEEAP_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_EnableEap_DataEff;
assign CSR_CDbgClaCtrlStatus_F_EnableEap_DataEff = {reg_wr_data[5:5]};
assign CSR_CDbgClaCtrlStatus_F_EnableEap_Data = (CR_CDBGCLACTRLSTATUS_ENABLEEAP_WIDTH'(update_value(64'(CSR_CDbgClaCtrlStatus_F_EnableEap), 64'(CSR_CDbgClaCtrlStatus_F_EnableEap_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaCtrlStatus_F_EnableEap_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLACTRLSTATUS))));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_ENABLEEAP_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_EnableEap_ff   (.out(CSR_CDbgClaCtrlStatus_F_EnableEap), .in(CSR_CDbgClaCtrlStatus_F_EnableEap_Data), .en(CSR_CDbgClaCtrlStatus_F_EnableEap_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaCtrlStatus_F_CurrentNode_WrEn;
logic [CR_CDBGCLACTRLSTATUS_CURRENTNODE_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_CurrentNode_Data;
logic [CR_CDBGCLACTRLSTATUS_CURRENTNODE_WIDTH-1:0] CSR_CDbgClaCtrlStatus_F_CurrentNode_DataEff;
assign CSR_CDbgClaCtrlStatus_F_CurrentNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgClaCtrlStatus_F_CurrentNode_Data = (CrCsrCdbgclactrlstatusWr.Data.CurrentNode);
assign CSR_CDbgClaCtrlStatus_F_CurrentNode_WrEn = ((CrCsrCdbgclactrlstatusWr.CurrentNodeWrEn));
generic_dff #(.WIDTH(CR_CDBGCLACTRLSTATUS_CURRENTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaCtrlStatus_F_CurrentNode_ff   (.out(CSR_CDbgClaCtrlStatus_F_CurrentNode), .in(CSR_CDbgClaCtrlStatus_F_CurrentNode_Data), .en(CSR_CDbgClaCtrlStatus_F_CurrentNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGRSVD0
logic                                           CSR_CDbgRsvd0_F_Value_WrEn;
logic [CR_CDBGRSVD0_VALUE_WIDTH           -1:0] CSR_CDbgRsvd0_F_Value_Data;
logic [CR_CDBGRSVD0_VALUE_WIDTH           -1:0] CSR_CDbgRsvd0_F_Value_DataEff;
assign CSR_CDbgRsvd0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgRsvd0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgRsvd0_F_Value[31:0]};
assign CSR_CDbgRsvd0_F_Value_Data = (CR_CDBGRSVD0_VALUE_WIDTH'(update_value(64'(CSR_CDbgRsvd0_F_Value), 64'(CSR_CDbgRsvd0_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgRsvd0_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGRSVD0))));
generic_dff #(.WIDTH(CR_CDBGRSVD0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgRsvd0_F_Value_ff   (.out(CSR_CDbgRsvd0_F_Value), .in(CSR_CDbgRsvd0_F_Value_Data), .en(CSR_CDbgRsvd0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGRSVD1
logic                                           CSR_CDbgRsvd1_F_Value_WrEn;
logic [CR_CDBGRSVD1_VALUE_WIDTH           -1:0] CSR_CDbgRsvd1_F_Value_Data;
logic [CR_CDBGRSVD1_VALUE_WIDTH           -1:0] CSR_CDbgRsvd1_F_Value_DataEff;
assign CSR_CDbgRsvd1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgRsvd1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgRsvd1_F_Value[31:0]};
assign CSR_CDbgRsvd1_F_Value_Data = (CR_CDBGRSVD1_VALUE_WIDTH'(update_value(64'(CSR_CDbgRsvd1_F_Value), 64'(CSR_CDbgRsvd1_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgRsvd1_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGRSVD1))));
generic_dff #(.WIDTH(CR_CDBGRSVD1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgRsvd1_F_Value_ff   (.out(CSR_CDbgRsvd1_F_Value), .in(CSR_CDbgRsvd1_F_Value_Data), .en(CSR_CDbgRsvd1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGRSVD2
logic                                           CSR_CDbgRsvd2_F_Value_WrEn;
logic [CR_CDBGRSVD2_VALUE_WIDTH           -1:0] CSR_CDbgRsvd2_F_Value_Data;
logic [CR_CDBGRSVD2_VALUE_WIDTH           -1:0] CSR_CDbgRsvd2_F_Value_DataEff;
assign CSR_CDbgRsvd2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgRsvd2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgRsvd2_F_Value[31:0]};
assign CSR_CDbgRsvd2_F_Value_Data = (CR_CDBGRSVD2_VALUE_WIDTH'(update_value(64'(CSR_CDbgRsvd2_F_Value), 64'(CSR_CDbgRsvd2_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgRsvd2_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGRSVD2))));
generic_dff #(.WIDTH(CR_CDBGRSVD2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgRsvd2_F_Value_ff   (.out(CSR_CDbgRsvd2_F_Value), .in(CSR_CDbgRsvd2_F_Value_Data), .en(CSR_CDbgRsvd2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGTRANSITIONMASK
logic                                           CSR_CDbgTransitionMask_F_Value_WrEn;
logic [CR_CDBGTRANSITIONMASK_VALUE_WIDTH  -1:0] CSR_CDbgTransitionMask_F_Value_Data;
logic [CR_CDBGTRANSITIONMASK_VALUE_WIDTH  -1:0] CSR_CDbgTransitionMask_F_Value_DataEff;
assign CSR_CDbgTransitionMask_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgTransitionMask_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgTransitionMask_F_Value[31:0]};
assign CSR_CDbgTransitionMask_F_Value_Data = (CR_CDBGTRANSITIONMASK_VALUE_WIDTH'(update_value(64'(CSR_CDbgTransitionMask_F_Value), 64'(CSR_CDbgTransitionMask_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgTransitionMask_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGTRANSITIONMASK))));
generic_dff #(.WIDTH(CR_CDBGTRANSITIONMASK_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgTransitionMask_F_Value_ff   (.out(CSR_CDbgTransitionMask_F_Value), .in(CSR_CDbgTransitionMask_F_Value_Data), .en(CSR_CDbgTransitionMask_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGTRANSITIONFROMVALUE
logic                                           CSR_CDbgTransitionFromValue_F_Value_WrEn;
logic [CR_CDBGTRANSITIONFROMVALUE_VALUE_WIDTH-1:0] CSR_CDbgTransitionFromValue_F_Value_Data;
logic [CR_CDBGTRANSITIONFROMVALUE_VALUE_WIDTH-1:0] CSR_CDbgTransitionFromValue_F_Value_DataEff;
assign CSR_CDbgTransitionFromValue_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgTransitionFromValue_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgTransitionFromValue_F_Value[31:0]};
assign CSR_CDbgTransitionFromValue_F_Value_Data = (CR_CDBGTRANSITIONFROMVALUE_VALUE_WIDTH'(update_value(64'(CSR_CDbgTransitionFromValue_F_Value), 64'(CSR_CDbgTransitionFromValue_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgTransitionFromValue_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGTRANSITIONFROMVALUE))));
generic_dff #(.WIDTH(CR_CDBGTRANSITIONFROMVALUE_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgTransitionFromValue_F_Value_ff   (.out(CSR_CDbgTransitionFromValue_F_Value), .in(CSR_CDbgTransitionFromValue_F_Value_Data), .en(CSR_CDbgTransitionFromValue_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGTRANSITIONTOVALUE
logic                                           CSR_CDbgTransitionToValue_F_Value_WrEn;
logic [CR_CDBGTRANSITIONTOVALUE_VALUE_WIDTH-1:0] CSR_CDbgTransitionToValue_F_Value_Data;
logic [CR_CDBGTRANSITIONTOVALUE_VALUE_WIDTH-1:0] CSR_CDbgTransitionToValue_F_Value_DataEff;
assign CSR_CDbgTransitionToValue_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgTransitionToValue_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgTransitionToValue_F_Value[31:0]};
assign CSR_CDbgTransitionToValue_F_Value_Data = (CR_CDBGTRANSITIONTOVALUE_VALUE_WIDTH'(update_value(64'(CSR_CDbgTransitionToValue_F_Value), 64'(CSR_CDbgTransitionToValue_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgTransitionToValue_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGTRANSITIONTOVALUE))));
generic_dff #(.WIDTH(CR_CDBGTRANSITIONTOVALUE_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgTransitionToValue_F_Value_ff   (.out(CSR_CDbgTransitionToValue_F_Value), .in(CSR_CDbgTransitionToValue_F_Value_Data), .en(CSR_CDbgTransitionToValue_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGONESCOUNTMASK
logic                                           CSR_CDbgOnesCountMask_F_Value_WrEn;
logic [CR_CDBGONESCOUNTMASK_VALUE_WIDTH   -1:0] CSR_CDbgOnesCountMask_F_Value_Data;
logic [CR_CDBGONESCOUNTMASK_VALUE_WIDTH   -1:0] CSR_CDbgOnesCountMask_F_Value_DataEff;
assign CSR_CDbgOnesCountMask_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgOnesCountMask_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgOnesCountMask_F_Value[31:0]};
assign CSR_CDbgOnesCountMask_F_Value_Data = (CR_CDBGONESCOUNTMASK_VALUE_WIDTH'(update_value(64'(CSR_CDbgOnesCountMask_F_Value), 64'(CSR_CDbgOnesCountMask_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgOnesCountMask_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGONESCOUNTMASK))));
generic_dff #(.WIDTH(CR_CDBGONESCOUNTMASK_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgOnesCountMask_F_Value_ff   (.out(CSR_CDbgOnesCountMask_F_Value), .in(CSR_CDbgOnesCountMask_F_Value_Data), .en(CSR_CDbgOnesCountMask_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGONESCOUNTVALUE
logic                                           CSR_CDbgOnesCountValue_F_Value_WrEn;
logic [CR_CDBGONESCOUNTVALUE_VALUE_WIDTH  -1:0] CSR_CDbgOnesCountValue_F_Value_Data;
logic [CR_CDBGONESCOUNTVALUE_VALUE_WIDTH  -1:0] CSR_CDbgOnesCountValue_F_Value_DataEff;
assign CSR_CDbgOnesCountValue_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgOnesCountValue_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgOnesCountValue_F_Value[31:0]};
assign CSR_CDbgOnesCountValue_F_Value_Data = (CR_CDBGONESCOUNTVALUE_VALUE_WIDTH'(update_value(64'(CSR_CDbgOnesCountValue_F_Value), 64'(CSR_CDbgOnesCountValue_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgOnesCountValue_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGONESCOUNTVALUE))));
generic_dff #(.WIDTH(CR_CDBGONESCOUNTVALUE_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgOnesCountValue_F_Value_ff   (.out(CSR_CDbgOnesCountValue_F_Value), .in(CSR_CDbgOnesCountValue_F_Value_Data), .en(CSR_CDbgOnesCountValue_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGANYCHANGE
logic                                           CSR_CDbgAnyChange_F_Mask_WrEn;
logic [CR_CDBGANYCHANGE_MASK_WIDTH        -1:0] CSR_CDbgAnyChange_F_Mask_Data;
logic [CR_CDBGANYCHANGE_MASK_WIDTH        -1:0] CSR_CDbgAnyChange_F_Mask_DataEff;
assign CSR_CDbgAnyChange_F_Mask_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgAnyChange_F_Mask[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgAnyChange_F_Mask[31:0]};
assign CSR_CDbgAnyChange_F_Mask_Data = (CR_CDBGANYCHANGE_MASK_WIDTH'(update_value(64'(CSR_CDbgAnyChange_F_Mask), 64'(CSR_CDbgAnyChange_F_Mask_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgAnyChange_F_Mask_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGANYCHANGE))));
generic_dff #(.WIDTH(CR_CDBGANYCHANGE_MASK_WIDTH), .RESET_VALUE(0)) CSR_CDbgAnyChange_F_Mask_ff   (.out(CSR_CDbgAnyChange_F_Mask), .in(CSR_CDbgAnyChange_F_Mask_Data), .en(CSR_CDbgAnyChange_F_Mask_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE0EAP0
logic                                           CSR_CDbgSignalSnapshotNode0Eap0_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap0_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap0_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode0Eap0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode0Eap0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode0Eap0_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode0Eap0_F_Value_Data = (CrCsrCdbgsignalsnapshotnode0Eap0Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode0Eap0_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode0Eap0Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE0EAP0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode0Eap0_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode0Eap0_F_Value), .in(CSR_CDbgSignalSnapshotNode0Eap0_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode0Eap0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE0EAP1
logic                                           CSR_CDbgSignalSnapshotNode0Eap1_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap1_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap1_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode0Eap1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode0Eap1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode0Eap1_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode0Eap1_F_Value_Data = (CrCsrCdbgsignalsnapshotnode0Eap1Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode0Eap1_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode0Eap1Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE0EAP1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode0Eap1_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode0Eap1_F_Value), .in(CSR_CDbgSignalSnapshotNode0Eap1_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode0Eap1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE1EAP0
logic                                           CSR_CDbgSignalSnapshotNode1Eap0_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap0_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap0_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode1Eap0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode1Eap0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode1Eap0_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode1Eap0_F_Value_Data = (CrCsrCdbgsignalsnapshotnode1Eap0Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode1Eap0_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode1Eap0Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE1EAP0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode1Eap0_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode1Eap0_F_Value), .in(CSR_CDbgSignalSnapshotNode1Eap0_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode1Eap0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE1EAP1
logic                                           CSR_CDbgSignalSnapshotNode1Eap1_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap1_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap1_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode1Eap1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode1Eap1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode1Eap1_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode1Eap1_F_Value_Data = (CrCsrCdbgsignalsnapshotnode1Eap1Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode1Eap1_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode1Eap1Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE1EAP1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode1Eap1_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode1Eap1_F_Value), .in(CSR_CDbgSignalSnapshotNode1Eap1_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode1Eap1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE2EAP0
logic                                           CSR_CDbgSignalSnapshotNode2Eap0_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap0_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap0_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode2Eap0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode2Eap0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode2Eap0_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode2Eap0_F_Value_Data = (CrCsrCdbgsignalsnapshotnode2Eap0Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode2Eap0_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode2Eap0Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE2EAP0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode2Eap0_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode2Eap0_F_Value), .in(CSR_CDbgSignalSnapshotNode2Eap0_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode2Eap0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE2EAP1
logic                                           CSR_CDbgSignalSnapshotNode2Eap1_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap1_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap1_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode2Eap1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode2Eap1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode2Eap1_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode2Eap1_F_Value_Data = (CrCsrCdbgsignalsnapshotnode2Eap1Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode2Eap1_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode2Eap1Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE2EAP1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode2Eap1_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode2Eap1_F_Value), .in(CSR_CDbgSignalSnapshotNode2Eap1_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode2Eap1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE3EAP0
logic                                           CSR_CDbgSignalSnapshotNode3Eap0_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap0_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP0_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap0_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode3Eap0_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode3Eap0_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode3Eap0_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode3Eap0_F_Value_Data = (CrCsrCdbgsignalsnapshotnode3Eap0Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode3Eap0_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode3Eap0Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE3EAP0_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode3Eap0_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode3Eap0_F_Value), .in(CSR_CDbgSignalSnapshotNode3Eap0_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode3Eap0_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE3EAP1
logic                                           CSR_CDbgSignalSnapshotNode3Eap1_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap1_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP1_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap1_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode3Eap1_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode3Eap1_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode3Eap1_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode3Eap1_F_Value_Data = (CrCsrCdbgsignalsnapshotnode3Eap1Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode3Eap1_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode3Eap1Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE3EAP1_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode3Eap1_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode3Eap1_F_Value), .in(CSR_CDbgSignalSnapshotNode3Eap1_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode3Eap1_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLATIMEMATCH
logic                                           CSR_CDbgClaTimeMatch_F_TimeMatchVal_WrEn;
logic [CR_CDBGCLATIMEMATCH_TIMEMATCHVAL_WIDTH-1:0] CSR_CDbgClaTimeMatch_F_TimeMatchVal_Data;
logic [CR_CDBGCLATIMEMATCH_TIMEMATCHVAL_WIDTH-1:0] CSR_CDbgClaTimeMatch_F_TimeMatchVal_DataEff;
assign CSR_CDbgClaTimeMatch_F_TimeMatchVal_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgClaTimeMatch_F_TimeMatchVal[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgClaTimeMatch_F_TimeMatchVal[31:0]};
assign CSR_CDbgClaTimeMatch_F_TimeMatchVal_Data = (CR_CDBGCLATIMEMATCH_TIMEMATCHVAL_WIDTH'(update_value(64'(CSR_CDbgClaTimeMatch_F_TimeMatchVal), 64'(CSR_CDbgClaTimeMatch_F_TimeMatchVal_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgClaTimeMatch_F_TimeMatchVal_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGCLATIMEMATCH))));
generic_dff #(.WIDTH(CR_CDBGCLATIMEMATCH_TIMEMATCHVAL_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaTimeMatch_F_TimeMatchVal_ff   (.out(CSR_CDbgClaTimeMatch_F_TimeMatchVal), .in(CSR_CDbgClaTimeMatch_F_TimeMatchVal_Data), .en(CSR_CDbgClaTimeMatch_F_TimeMatchVal_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMASK2
logic                                           CSR_CDbgSignalMask2_F_Value_WrEn;
logic [CR_CDBGSIGNALMASK2_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask2_F_Value_Data;
logic [CR_CDBGSIGNALMASK2_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask2_F_Value_DataEff;
assign CSR_CDbgSignalMask2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMask2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMask2_F_Value[31:0]};
assign CSR_CDbgSignalMask2_F_Value_Data = (CR_CDBGSIGNALMASK2_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMask2_F_Value), 64'(CSR_CDbgSignalMask2_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMask2_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMASK2))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMASK2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMask2_F_Value_ff   (.out(CSR_CDbgSignalMask2_F_Value), .in(CSR_CDbgSignalMask2_F_Value_Data), .en(CSR_CDbgSignalMask2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMATCH2
logic                                           CSR_CDbgSignalMatch2_F_Value_WrEn;
logic [CR_CDBGSIGNALMATCH2_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch2_F_Value_Data;
logic [CR_CDBGSIGNALMATCH2_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch2_F_Value_DataEff;
assign CSR_CDbgSignalMatch2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMatch2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMatch2_F_Value[31:0]};
assign CSR_CDbgSignalMatch2_F_Value_Data = (CR_CDBGSIGNALMATCH2_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMatch2_F_Value), 64'(CSR_CDbgSignalMatch2_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMatch2_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMATCH2))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMATCH2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMatch2_F_Value_ff   (.out(CSR_CDbgSignalMatch2_F_Value), .in(CSR_CDbgSignalMatch2_F_Value_Data), .en(CSR_CDbgSignalMatch2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMASK3
logic                                           CSR_CDbgSignalMask3_F_Value_WrEn;
logic [CR_CDBGSIGNALMASK3_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask3_F_Value_Data;
logic [CR_CDBGSIGNALMASK3_VALUE_WIDTH     -1:0] CSR_CDbgSignalMask3_F_Value_DataEff;
assign CSR_CDbgSignalMask3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMask3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMask3_F_Value[31:0]};
assign CSR_CDbgSignalMask3_F_Value_Data = (CR_CDBGSIGNALMASK3_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMask3_F_Value), 64'(CSR_CDbgSignalMask3_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMask3_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMASK3))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMASK3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMask3_F_Value_ff   (.out(CSR_CDbgSignalMask3_F_Value), .in(CSR_CDbgSignalMask3_F_Value_Data), .en(CSR_CDbgSignalMask3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALMATCH3
logic                                           CSR_CDbgSignalMatch3_F_Value_WrEn;
logic [CR_CDBGSIGNALMATCH3_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch3_F_Value_Data;
logic [CR_CDBGSIGNALMATCH3_VALUE_WIDTH    -1:0] CSR_CDbgSignalMatch3_F_Value_DataEff;
assign CSR_CDbgSignalMatch3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalMatch3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalMatch3_F_Value[31:0]};
assign CSR_CDbgSignalMatch3_F_Value_Data = (CR_CDBGSIGNALMATCH3_VALUE_WIDTH'(update_value(64'(CSR_CDbgSignalMatch3_F_Value), 64'(CSR_CDbgSignalMatch3_F_Value_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalMatch3_F_Value_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALMATCH3))));
generic_dff #(.WIDTH(CR_CDBGSIGNALMATCH3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalMatch3_F_Value_ff   (.out(CSR_CDbgSignalMatch3_F_Value), .in(CSR_CDbgSignalMatch3_F_Value_Data), .en(CSR_CDbgSignalMatch3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE0EAP2
logic                                           CSR_CDbgNode0Eap2_F_Action3_WrEn;
logic [CR_CDBGNODE0EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action3_Data;
logic [CR_CDBGNODE0EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action3_DataEff;
assign CSR_CDbgNode0Eap2_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode0Eap2_F_Action3_Data = (CR_CDBGNODE0EAP2_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_Action3), 64'(CSR_CDbgNode0Eap2_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_Action3_ff   (.out(CSR_CDbgNode0Eap2_F_Action3), .in(CSR_CDbgNode0Eap2_F_Action3_Data), .en(CSR_CDbgNode0Eap2_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_Action2_WrEn;
logic [CR_CDBGNODE0EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action2_Data;
logic [CR_CDBGNODE0EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action2_DataEff;
assign CSR_CDbgNode0Eap2_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode0Eap2_F_Action2_Data = (CR_CDBGNODE0EAP2_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_Action2), 64'(CSR_CDbgNode0Eap2_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_Action2_ff   (.out(CSR_CDbgNode0Eap2_F_Action2), .in(CSR_CDbgNode0Eap2_F_Action2_Data), .en(CSR_CDbgNode0Eap2_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_Udf_WrEn;
logic [CR_CDBGNODE0EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap2_F_Udf_Data;
logic [CR_CDBGNODE0EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap2_F_Udf_DataEff;
assign CSR_CDbgNode0Eap2_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode0Eap2_F_Udf_Data = (CR_CDBGNODE0EAP2_UDF_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_Udf), 64'(CSR_CDbgNode0Eap2_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_Udf_ff   (.out(CSR_CDbgNode0Eap2_F_Udf), .in(CSR_CDbgNode0Eap2_F_Udf_Data), .en(CSR_CDbgNode0Eap2_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_EventType2_WrEn;
logic [CR_CDBGNODE0EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType2_Data;
logic [CR_CDBGNODE0EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType2_DataEff;
assign CSR_CDbgNode0Eap2_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode0Eap2_F_EventType2_Data = (CR_CDBGNODE0EAP2_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_EventType2), 64'(CSR_CDbgNode0Eap2_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_EventType2_ff   (.out(CSR_CDbgNode0Eap2_F_EventType2), .in(CSR_CDbgNode0Eap2_F_EventType2_Data), .en(CSR_CDbgNode0Eap2_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode0Eap2_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode0Eap2_F_CustomAction1Enable_Data = (CR_CDBGNODE0EAP2_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_CustomAction1Enable), 64'(CSR_CDbgNode0Eap2_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode0Eap2_F_CustomAction1Enable), .in(CSR_CDbgNode0Eap2_F_CustomAction1Enable_Data), .en(CSR_CDbgNode0Eap2_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode0Eap2_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode0Eap2_F_CustomAction0Enable_Data = (CR_CDBGNODE0EAP2_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_CustomAction0Enable), 64'(CSR_CDbgNode0Eap2_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode0Eap2_F_CustomAction0Enable), .in(CSR_CDbgNode0Eap2_F_CustomAction0Enable_Data), .en(CSR_CDbgNode0Eap2_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_CustomAction1_WrEn;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction1_Data;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction1_DataEff;
assign CSR_CDbgNode0Eap2_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode0Eap2_F_CustomAction1_Data = (CR_CDBGNODE0EAP2_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_CustomAction1), 64'(CSR_CDbgNode0Eap2_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_CustomAction1_ff   (.out(CSR_CDbgNode0Eap2_F_CustomAction1), .in(CSR_CDbgNode0Eap2_F_CustomAction1_Data), .en(CSR_CDbgNode0Eap2_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_CustomAction0_WrEn;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction0_Data;
logic [CR_CDBGNODE0EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap2_F_CustomAction0_DataEff;
assign CSR_CDbgNode0Eap2_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode0Eap2_F_CustomAction0_Data = (CR_CDBGNODE0EAP2_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_CustomAction0), 64'(CSR_CDbgNode0Eap2_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_CustomAction0_ff   (.out(CSR_CDbgNode0Eap2_F_CustomAction0), .in(CSR_CDbgNode0Eap2_F_CustomAction0_Data), .en(CSR_CDbgNode0Eap2_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_EventType1_WrEn;
logic [CR_CDBGNODE0EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType1_Data;
logic [CR_CDBGNODE0EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType1_DataEff;
assign CSR_CDbgNode0Eap2_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode0Eap2_F_EventType1_Data = (CR_CDBGNODE0EAP2_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_EventType1), 64'(CSR_CDbgNode0Eap2_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_EventType1_ff   (.out(CSR_CDbgNode0Eap2_F_EventType1), .in(CSR_CDbgNode0Eap2_F_EventType1_Data), .en(CSR_CDbgNode0Eap2_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_EventType0_WrEn;
logic [CR_CDBGNODE0EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType0_Data;
logic [CR_CDBGNODE0EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap2_F_EventType0_DataEff;
assign CSR_CDbgNode0Eap2_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode0Eap2_F_EventType0_Data = (CR_CDBGNODE0EAP2_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_EventType0), 64'(CSR_CDbgNode0Eap2_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_EventType0_ff   (.out(CSR_CDbgNode0Eap2_F_EventType0), .in(CSR_CDbgNode0Eap2_F_EventType0_Data), .en(CSR_CDbgNode0Eap2_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_LogicalOp_WrEn;
logic [CR_CDBGNODE0EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap2_F_LogicalOp_Data;
logic [CR_CDBGNODE0EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap2_F_LogicalOp_DataEff;
assign CSR_CDbgNode0Eap2_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode0Eap2_F_LogicalOp_Data = (CR_CDBGNODE0EAP2_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_LogicalOp), 64'(CSR_CDbgNode0Eap2_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_LogicalOp_ff   (.out(CSR_CDbgNode0Eap2_F_LogicalOp), .in(CSR_CDbgNode0Eap2_F_LogicalOp_Data), .en(CSR_CDbgNode0Eap2_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_Action1_WrEn;
logic [CR_CDBGNODE0EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action1_Data;
logic [CR_CDBGNODE0EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action1_DataEff;
assign CSR_CDbgNode0Eap2_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode0Eap2_F_Action1_Data = (CR_CDBGNODE0EAP2_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_Action1), 64'(CSR_CDbgNode0Eap2_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_Action1_ff   (.out(CSR_CDbgNode0Eap2_F_Action1), .in(CSR_CDbgNode0Eap2_F_Action1_Data), .en(CSR_CDbgNode0Eap2_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_Action0_WrEn;
logic [CR_CDBGNODE0EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action0_Data;
logic [CR_CDBGNODE0EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap2_F_Action0_DataEff;
assign CSR_CDbgNode0Eap2_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode0Eap2_F_Action0_Data = (CR_CDBGNODE0EAP2_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_Action0), 64'(CSR_CDbgNode0Eap2_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_Action0_ff   (.out(CSR_CDbgNode0Eap2_F_Action0), .in(CSR_CDbgNode0Eap2_F_Action0_Data), .en(CSR_CDbgNode0Eap2_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap2_F_DestNode_WrEn;
logic [CR_CDBGNODE0EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap2_F_DestNode_Data;
logic [CR_CDBGNODE0EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap2_F_DestNode_DataEff;
assign CSR_CDbgNode0Eap2_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode0Eap2_F_DestNode_Data = (CR_CDBGNODE0EAP2_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap2_F_DestNode), 64'(CSR_CDbgNode0Eap2_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap2_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP2_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap2_F_DestNode_ff   (.out(CSR_CDbgNode0Eap2_F_DestNode), .in(CSR_CDbgNode0Eap2_F_DestNode_Data), .en(CSR_CDbgNode0Eap2_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE0EAP3
logic                                           CSR_CDbgNode0Eap3_F_Action3_WrEn;
logic [CR_CDBGNODE0EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action3_Data;
logic [CR_CDBGNODE0EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action3_DataEff;
assign CSR_CDbgNode0Eap3_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode0Eap3_F_Action3_Data = (CR_CDBGNODE0EAP3_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_Action3), 64'(CSR_CDbgNode0Eap3_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_Action3_ff   (.out(CSR_CDbgNode0Eap3_F_Action3), .in(CSR_CDbgNode0Eap3_F_Action3_Data), .en(CSR_CDbgNode0Eap3_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_Action2_WrEn;
logic [CR_CDBGNODE0EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action2_Data;
logic [CR_CDBGNODE0EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action2_DataEff;
assign CSR_CDbgNode0Eap3_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode0Eap3_F_Action2_Data = (CR_CDBGNODE0EAP3_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_Action2), 64'(CSR_CDbgNode0Eap3_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_Action2_ff   (.out(CSR_CDbgNode0Eap3_F_Action2), .in(CSR_CDbgNode0Eap3_F_Action2_Data), .en(CSR_CDbgNode0Eap3_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_Udf_WrEn;
logic [CR_CDBGNODE0EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap3_F_Udf_Data;
logic [CR_CDBGNODE0EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode0Eap3_F_Udf_DataEff;
assign CSR_CDbgNode0Eap3_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode0Eap3_F_Udf_Data = (CR_CDBGNODE0EAP3_UDF_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_Udf), 64'(CSR_CDbgNode0Eap3_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_Udf_ff   (.out(CSR_CDbgNode0Eap3_F_Udf), .in(CSR_CDbgNode0Eap3_F_Udf_Data), .en(CSR_CDbgNode0Eap3_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_EventType2_WrEn;
logic [CR_CDBGNODE0EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType2_Data;
logic [CR_CDBGNODE0EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType2_DataEff;
assign CSR_CDbgNode0Eap3_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode0Eap3_F_EventType2_Data = (CR_CDBGNODE0EAP3_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_EventType2), 64'(CSR_CDbgNode0Eap3_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_EventType2_ff   (.out(CSR_CDbgNode0Eap3_F_EventType2), .in(CSR_CDbgNode0Eap3_F_EventType2_Data), .en(CSR_CDbgNode0Eap3_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode0Eap3_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode0Eap3_F_CustomAction1Enable_Data = (CR_CDBGNODE0EAP3_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_CustomAction1Enable), 64'(CSR_CDbgNode0Eap3_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode0Eap3_F_CustomAction1Enable), .in(CSR_CDbgNode0Eap3_F_CustomAction1Enable_Data), .en(CSR_CDbgNode0Eap3_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode0Eap3_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode0Eap3_F_CustomAction0Enable_Data = (CR_CDBGNODE0EAP3_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_CustomAction0Enable), 64'(CSR_CDbgNode0Eap3_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode0Eap3_F_CustomAction0Enable), .in(CSR_CDbgNode0Eap3_F_CustomAction0Enable_Data), .en(CSR_CDbgNode0Eap3_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_CustomAction1_WrEn;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction1_Data;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction1_DataEff;
assign CSR_CDbgNode0Eap3_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode0Eap3_F_CustomAction1_Data = (CR_CDBGNODE0EAP3_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_CustomAction1), 64'(CSR_CDbgNode0Eap3_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_CustomAction1_ff   (.out(CSR_CDbgNode0Eap3_F_CustomAction1), .in(CSR_CDbgNode0Eap3_F_CustomAction1_Data), .en(CSR_CDbgNode0Eap3_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_CustomAction0_WrEn;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction0_Data;
logic [CR_CDBGNODE0EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode0Eap3_F_CustomAction0_DataEff;
assign CSR_CDbgNode0Eap3_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode0Eap3_F_CustomAction0_Data = (CR_CDBGNODE0EAP3_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_CustomAction0), 64'(CSR_CDbgNode0Eap3_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_CustomAction0_ff   (.out(CSR_CDbgNode0Eap3_F_CustomAction0), .in(CSR_CDbgNode0Eap3_F_CustomAction0_Data), .en(CSR_CDbgNode0Eap3_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_EventType1_WrEn;
logic [CR_CDBGNODE0EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType1_Data;
logic [CR_CDBGNODE0EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType1_DataEff;
assign CSR_CDbgNode0Eap3_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode0Eap3_F_EventType1_Data = (CR_CDBGNODE0EAP3_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_EventType1), 64'(CSR_CDbgNode0Eap3_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_EventType1_ff   (.out(CSR_CDbgNode0Eap3_F_EventType1), .in(CSR_CDbgNode0Eap3_F_EventType1_Data), .en(CSR_CDbgNode0Eap3_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_EventType0_WrEn;
logic [CR_CDBGNODE0EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType0_Data;
logic [CR_CDBGNODE0EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode0Eap3_F_EventType0_DataEff;
assign CSR_CDbgNode0Eap3_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode0Eap3_F_EventType0_Data = (CR_CDBGNODE0EAP3_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_EventType0), 64'(CSR_CDbgNode0Eap3_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_EventType0_ff   (.out(CSR_CDbgNode0Eap3_F_EventType0), .in(CSR_CDbgNode0Eap3_F_EventType0_Data), .en(CSR_CDbgNode0Eap3_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_LogicalOp_WrEn;
logic [CR_CDBGNODE0EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap3_F_LogicalOp_Data;
logic [CR_CDBGNODE0EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode0Eap3_F_LogicalOp_DataEff;
assign CSR_CDbgNode0Eap3_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode0Eap3_F_LogicalOp_Data = (CR_CDBGNODE0EAP3_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_LogicalOp), 64'(CSR_CDbgNode0Eap3_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_LogicalOp_ff   (.out(CSR_CDbgNode0Eap3_F_LogicalOp), .in(CSR_CDbgNode0Eap3_F_LogicalOp_Data), .en(CSR_CDbgNode0Eap3_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_Action1_WrEn;
logic [CR_CDBGNODE0EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action1_Data;
logic [CR_CDBGNODE0EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action1_DataEff;
assign CSR_CDbgNode0Eap3_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode0Eap3_F_Action1_Data = (CR_CDBGNODE0EAP3_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_Action1), 64'(CSR_CDbgNode0Eap3_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_Action1_ff   (.out(CSR_CDbgNode0Eap3_F_Action1), .in(CSR_CDbgNode0Eap3_F_Action1_Data), .en(CSR_CDbgNode0Eap3_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_Action0_WrEn;
logic [CR_CDBGNODE0EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action0_Data;
logic [CR_CDBGNODE0EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode0Eap3_F_Action0_DataEff;
assign CSR_CDbgNode0Eap3_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode0Eap3_F_Action0_Data = (CR_CDBGNODE0EAP3_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_Action0), 64'(CSR_CDbgNode0Eap3_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_Action0_ff   (.out(CSR_CDbgNode0Eap3_F_Action0), .in(CSR_CDbgNode0Eap3_F_Action0_Data), .en(CSR_CDbgNode0Eap3_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode0Eap3_F_DestNode_WrEn;
logic [CR_CDBGNODE0EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap3_F_DestNode_Data;
logic [CR_CDBGNODE0EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode0Eap3_F_DestNode_DataEff;
assign CSR_CDbgNode0Eap3_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode0Eap3_F_DestNode_Data = (CR_CDBGNODE0EAP3_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode0Eap3_F_DestNode), 64'(CSR_CDbgNode0Eap3_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode0Eap3_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE0EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE0EAP3_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode0Eap3_F_DestNode_ff   (.out(CSR_CDbgNode0Eap3_F_DestNode), .in(CSR_CDbgNode0Eap3_F_DestNode_Data), .en(CSR_CDbgNode0Eap3_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE1EAP2
logic                                           CSR_CDbgNode1Eap2_F_Action3_WrEn;
logic [CR_CDBGNODE1EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action3_Data;
logic [CR_CDBGNODE1EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action3_DataEff;
assign CSR_CDbgNode1Eap2_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode1Eap2_F_Action3_Data = (CR_CDBGNODE1EAP2_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_Action3), 64'(CSR_CDbgNode1Eap2_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_Action3_ff   (.out(CSR_CDbgNode1Eap2_F_Action3), .in(CSR_CDbgNode1Eap2_F_Action3_Data), .en(CSR_CDbgNode1Eap2_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_Action2_WrEn;
logic [CR_CDBGNODE1EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action2_Data;
logic [CR_CDBGNODE1EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action2_DataEff;
assign CSR_CDbgNode1Eap2_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode1Eap2_F_Action2_Data = (CR_CDBGNODE1EAP2_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_Action2), 64'(CSR_CDbgNode1Eap2_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_Action2_ff   (.out(CSR_CDbgNode1Eap2_F_Action2), .in(CSR_CDbgNode1Eap2_F_Action2_Data), .en(CSR_CDbgNode1Eap2_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_Udf_WrEn;
logic [CR_CDBGNODE1EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap2_F_Udf_Data;
logic [CR_CDBGNODE1EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap2_F_Udf_DataEff;
assign CSR_CDbgNode1Eap2_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode1Eap2_F_Udf_Data = (CR_CDBGNODE1EAP2_UDF_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_Udf), 64'(CSR_CDbgNode1Eap2_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_Udf_ff   (.out(CSR_CDbgNode1Eap2_F_Udf), .in(CSR_CDbgNode1Eap2_F_Udf_Data), .en(CSR_CDbgNode1Eap2_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_EventType2_WrEn;
logic [CR_CDBGNODE1EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType2_Data;
logic [CR_CDBGNODE1EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType2_DataEff;
assign CSR_CDbgNode1Eap2_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode1Eap2_F_EventType2_Data = (CR_CDBGNODE1EAP2_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_EventType2), 64'(CSR_CDbgNode1Eap2_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_EventType2_ff   (.out(CSR_CDbgNode1Eap2_F_EventType2), .in(CSR_CDbgNode1Eap2_F_EventType2_Data), .en(CSR_CDbgNode1Eap2_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode1Eap2_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode1Eap2_F_CustomAction1Enable_Data = (CR_CDBGNODE1EAP2_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_CustomAction1Enable), 64'(CSR_CDbgNode1Eap2_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode1Eap2_F_CustomAction1Enable), .in(CSR_CDbgNode1Eap2_F_CustomAction1Enable_Data), .en(CSR_CDbgNode1Eap2_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode1Eap2_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode1Eap2_F_CustomAction0Enable_Data = (CR_CDBGNODE1EAP2_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_CustomAction0Enable), 64'(CSR_CDbgNode1Eap2_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode1Eap2_F_CustomAction0Enable), .in(CSR_CDbgNode1Eap2_F_CustomAction0Enable_Data), .en(CSR_CDbgNode1Eap2_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_CustomAction1_WrEn;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction1_Data;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction1_DataEff;
assign CSR_CDbgNode1Eap2_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode1Eap2_F_CustomAction1_Data = (CR_CDBGNODE1EAP2_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_CustomAction1), 64'(CSR_CDbgNode1Eap2_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_CustomAction1_ff   (.out(CSR_CDbgNode1Eap2_F_CustomAction1), .in(CSR_CDbgNode1Eap2_F_CustomAction1_Data), .en(CSR_CDbgNode1Eap2_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_CustomAction0_WrEn;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction0_Data;
logic [CR_CDBGNODE1EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap2_F_CustomAction0_DataEff;
assign CSR_CDbgNode1Eap2_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode1Eap2_F_CustomAction0_Data = (CR_CDBGNODE1EAP2_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_CustomAction0), 64'(CSR_CDbgNode1Eap2_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_CustomAction0_ff   (.out(CSR_CDbgNode1Eap2_F_CustomAction0), .in(CSR_CDbgNode1Eap2_F_CustomAction0_Data), .en(CSR_CDbgNode1Eap2_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_EventType1_WrEn;
logic [CR_CDBGNODE1EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType1_Data;
logic [CR_CDBGNODE1EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType1_DataEff;
assign CSR_CDbgNode1Eap2_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode1Eap2_F_EventType1_Data = (CR_CDBGNODE1EAP2_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_EventType1), 64'(CSR_CDbgNode1Eap2_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_EventType1_ff   (.out(CSR_CDbgNode1Eap2_F_EventType1), .in(CSR_CDbgNode1Eap2_F_EventType1_Data), .en(CSR_CDbgNode1Eap2_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_EventType0_WrEn;
logic [CR_CDBGNODE1EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType0_Data;
logic [CR_CDBGNODE1EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap2_F_EventType0_DataEff;
assign CSR_CDbgNode1Eap2_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode1Eap2_F_EventType0_Data = (CR_CDBGNODE1EAP2_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_EventType0), 64'(CSR_CDbgNode1Eap2_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_EventType0_ff   (.out(CSR_CDbgNode1Eap2_F_EventType0), .in(CSR_CDbgNode1Eap2_F_EventType0_Data), .en(CSR_CDbgNode1Eap2_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_LogicalOp_WrEn;
logic [CR_CDBGNODE1EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap2_F_LogicalOp_Data;
logic [CR_CDBGNODE1EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap2_F_LogicalOp_DataEff;
assign CSR_CDbgNode1Eap2_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode1Eap2_F_LogicalOp_Data = (CR_CDBGNODE1EAP2_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_LogicalOp), 64'(CSR_CDbgNode1Eap2_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_LogicalOp_ff   (.out(CSR_CDbgNode1Eap2_F_LogicalOp), .in(CSR_CDbgNode1Eap2_F_LogicalOp_Data), .en(CSR_CDbgNode1Eap2_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_Action1_WrEn;
logic [CR_CDBGNODE1EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action1_Data;
logic [CR_CDBGNODE1EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action1_DataEff;
assign CSR_CDbgNode1Eap2_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode1Eap2_F_Action1_Data = (CR_CDBGNODE1EAP2_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_Action1), 64'(CSR_CDbgNode1Eap2_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_Action1_ff   (.out(CSR_CDbgNode1Eap2_F_Action1), .in(CSR_CDbgNode1Eap2_F_Action1_Data), .en(CSR_CDbgNode1Eap2_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_Action0_WrEn;
logic [CR_CDBGNODE1EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action0_Data;
logic [CR_CDBGNODE1EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap2_F_Action0_DataEff;
assign CSR_CDbgNode1Eap2_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode1Eap2_F_Action0_Data = (CR_CDBGNODE1EAP2_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_Action0), 64'(CSR_CDbgNode1Eap2_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_Action0_ff   (.out(CSR_CDbgNode1Eap2_F_Action0), .in(CSR_CDbgNode1Eap2_F_Action0_Data), .en(CSR_CDbgNode1Eap2_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap2_F_DestNode_WrEn;
logic [CR_CDBGNODE1EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap2_F_DestNode_Data;
logic [CR_CDBGNODE1EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap2_F_DestNode_DataEff;
assign CSR_CDbgNode1Eap2_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode1Eap2_F_DestNode_Data = (CR_CDBGNODE1EAP2_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap2_F_DestNode), 64'(CSR_CDbgNode1Eap2_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap2_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP2_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap2_F_DestNode_ff   (.out(CSR_CDbgNode1Eap2_F_DestNode), .in(CSR_CDbgNode1Eap2_F_DestNode_Data), .en(CSR_CDbgNode1Eap2_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE1EAP3
logic                                           CSR_CDbgNode1Eap3_F_Action3_WrEn;
logic [CR_CDBGNODE1EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action3_Data;
logic [CR_CDBGNODE1EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action3_DataEff;
assign CSR_CDbgNode1Eap3_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode1Eap3_F_Action3_Data = (CR_CDBGNODE1EAP3_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_Action3), 64'(CSR_CDbgNode1Eap3_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_Action3_ff   (.out(CSR_CDbgNode1Eap3_F_Action3), .in(CSR_CDbgNode1Eap3_F_Action3_Data), .en(CSR_CDbgNode1Eap3_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_Action2_WrEn;
logic [CR_CDBGNODE1EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action2_Data;
logic [CR_CDBGNODE1EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action2_DataEff;
assign CSR_CDbgNode1Eap3_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode1Eap3_F_Action2_Data = (CR_CDBGNODE1EAP3_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_Action2), 64'(CSR_CDbgNode1Eap3_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_Action2_ff   (.out(CSR_CDbgNode1Eap3_F_Action2), .in(CSR_CDbgNode1Eap3_F_Action2_Data), .en(CSR_CDbgNode1Eap3_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_Udf_WrEn;
logic [CR_CDBGNODE1EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap3_F_Udf_Data;
logic [CR_CDBGNODE1EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode1Eap3_F_Udf_DataEff;
assign CSR_CDbgNode1Eap3_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode1Eap3_F_Udf_Data = (CR_CDBGNODE1EAP3_UDF_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_Udf), 64'(CSR_CDbgNode1Eap3_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_Udf_ff   (.out(CSR_CDbgNode1Eap3_F_Udf), .in(CSR_CDbgNode1Eap3_F_Udf_Data), .en(CSR_CDbgNode1Eap3_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_EventType2_WrEn;
logic [CR_CDBGNODE1EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType2_Data;
logic [CR_CDBGNODE1EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType2_DataEff;
assign CSR_CDbgNode1Eap3_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode1Eap3_F_EventType2_Data = (CR_CDBGNODE1EAP3_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_EventType2), 64'(CSR_CDbgNode1Eap3_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_EventType2_ff   (.out(CSR_CDbgNode1Eap3_F_EventType2), .in(CSR_CDbgNode1Eap3_F_EventType2_Data), .en(CSR_CDbgNode1Eap3_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode1Eap3_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode1Eap3_F_CustomAction1Enable_Data = (CR_CDBGNODE1EAP3_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_CustomAction1Enable), 64'(CSR_CDbgNode1Eap3_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode1Eap3_F_CustomAction1Enable), .in(CSR_CDbgNode1Eap3_F_CustomAction1Enable_Data), .en(CSR_CDbgNode1Eap3_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode1Eap3_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode1Eap3_F_CustomAction0Enable_Data = (CR_CDBGNODE1EAP3_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_CustomAction0Enable), 64'(CSR_CDbgNode1Eap3_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode1Eap3_F_CustomAction0Enable), .in(CSR_CDbgNode1Eap3_F_CustomAction0Enable_Data), .en(CSR_CDbgNode1Eap3_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_CustomAction1_WrEn;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction1_Data;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction1_DataEff;
assign CSR_CDbgNode1Eap3_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode1Eap3_F_CustomAction1_Data = (CR_CDBGNODE1EAP3_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_CustomAction1), 64'(CSR_CDbgNode1Eap3_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_CustomAction1_ff   (.out(CSR_CDbgNode1Eap3_F_CustomAction1), .in(CSR_CDbgNode1Eap3_F_CustomAction1_Data), .en(CSR_CDbgNode1Eap3_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_CustomAction0_WrEn;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction0_Data;
logic [CR_CDBGNODE1EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode1Eap3_F_CustomAction0_DataEff;
assign CSR_CDbgNode1Eap3_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode1Eap3_F_CustomAction0_Data = (CR_CDBGNODE1EAP3_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_CustomAction0), 64'(CSR_CDbgNode1Eap3_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_CustomAction0_ff   (.out(CSR_CDbgNode1Eap3_F_CustomAction0), .in(CSR_CDbgNode1Eap3_F_CustomAction0_Data), .en(CSR_CDbgNode1Eap3_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_EventType1_WrEn;
logic [CR_CDBGNODE1EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType1_Data;
logic [CR_CDBGNODE1EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType1_DataEff;
assign CSR_CDbgNode1Eap3_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode1Eap3_F_EventType1_Data = (CR_CDBGNODE1EAP3_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_EventType1), 64'(CSR_CDbgNode1Eap3_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_EventType1_ff   (.out(CSR_CDbgNode1Eap3_F_EventType1), .in(CSR_CDbgNode1Eap3_F_EventType1_Data), .en(CSR_CDbgNode1Eap3_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_EventType0_WrEn;
logic [CR_CDBGNODE1EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType0_Data;
logic [CR_CDBGNODE1EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode1Eap3_F_EventType0_DataEff;
assign CSR_CDbgNode1Eap3_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode1Eap3_F_EventType0_Data = (CR_CDBGNODE1EAP3_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_EventType0), 64'(CSR_CDbgNode1Eap3_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_EventType0_ff   (.out(CSR_CDbgNode1Eap3_F_EventType0), .in(CSR_CDbgNode1Eap3_F_EventType0_Data), .en(CSR_CDbgNode1Eap3_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_LogicalOp_WrEn;
logic [CR_CDBGNODE1EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap3_F_LogicalOp_Data;
logic [CR_CDBGNODE1EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode1Eap3_F_LogicalOp_DataEff;
assign CSR_CDbgNode1Eap3_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode1Eap3_F_LogicalOp_Data = (CR_CDBGNODE1EAP3_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_LogicalOp), 64'(CSR_CDbgNode1Eap3_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_LogicalOp_ff   (.out(CSR_CDbgNode1Eap3_F_LogicalOp), .in(CSR_CDbgNode1Eap3_F_LogicalOp_Data), .en(CSR_CDbgNode1Eap3_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_Action1_WrEn;
logic [CR_CDBGNODE1EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action1_Data;
logic [CR_CDBGNODE1EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action1_DataEff;
assign CSR_CDbgNode1Eap3_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode1Eap3_F_Action1_Data = (CR_CDBGNODE1EAP3_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_Action1), 64'(CSR_CDbgNode1Eap3_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_Action1_ff   (.out(CSR_CDbgNode1Eap3_F_Action1), .in(CSR_CDbgNode1Eap3_F_Action1_Data), .en(CSR_CDbgNode1Eap3_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_Action0_WrEn;
logic [CR_CDBGNODE1EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action0_Data;
logic [CR_CDBGNODE1EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode1Eap3_F_Action0_DataEff;
assign CSR_CDbgNode1Eap3_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode1Eap3_F_Action0_Data = (CR_CDBGNODE1EAP3_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_Action0), 64'(CSR_CDbgNode1Eap3_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_Action0_ff   (.out(CSR_CDbgNode1Eap3_F_Action0), .in(CSR_CDbgNode1Eap3_F_Action0_Data), .en(CSR_CDbgNode1Eap3_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode1Eap3_F_DestNode_WrEn;
logic [CR_CDBGNODE1EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap3_F_DestNode_Data;
logic [CR_CDBGNODE1EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode1Eap3_F_DestNode_DataEff;
assign CSR_CDbgNode1Eap3_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode1Eap3_F_DestNode_Data = (CR_CDBGNODE1EAP3_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode1Eap3_F_DestNode), 64'(CSR_CDbgNode1Eap3_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode1Eap3_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE1EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE1EAP3_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode1Eap3_F_DestNode_ff   (.out(CSR_CDbgNode1Eap3_F_DestNode), .in(CSR_CDbgNode1Eap3_F_DestNode_Data), .en(CSR_CDbgNode1Eap3_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE2EAP2
logic                                           CSR_CDbgNode2Eap2_F_Action3_WrEn;
logic [CR_CDBGNODE2EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action3_Data;
logic [CR_CDBGNODE2EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action3_DataEff;
assign CSR_CDbgNode2Eap2_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode2Eap2_F_Action3_Data = (CR_CDBGNODE2EAP2_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_Action3), 64'(CSR_CDbgNode2Eap2_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_Action3_ff   (.out(CSR_CDbgNode2Eap2_F_Action3), .in(CSR_CDbgNode2Eap2_F_Action3_Data), .en(CSR_CDbgNode2Eap2_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_Action2_WrEn;
logic [CR_CDBGNODE2EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action2_Data;
logic [CR_CDBGNODE2EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action2_DataEff;
assign CSR_CDbgNode2Eap2_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode2Eap2_F_Action2_Data = (CR_CDBGNODE2EAP2_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_Action2), 64'(CSR_CDbgNode2Eap2_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_Action2_ff   (.out(CSR_CDbgNode2Eap2_F_Action2), .in(CSR_CDbgNode2Eap2_F_Action2_Data), .en(CSR_CDbgNode2Eap2_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_Udf_WrEn;
logic [CR_CDBGNODE2EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap2_F_Udf_Data;
logic [CR_CDBGNODE2EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap2_F_Udf_DataEff;
assign CSR_CDbgNode2Eap2_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode2Eap2_F_Udf_Data = (CR_CDBGNODE2EAP2_UDF_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_Udf), 64'(CSR_CDbgNode2Eap2_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_Udf_ff   (.out(CSR_CDbgNode2Eap2_F_Udf), .in(CSR_CDbgNode2Eap2_F_Udf_Data), .en(CSR_CDbgNode2Eap2_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_EventType2_WrEn;
logic [CR_CDBGNODE2EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType2_Data;
logic [CR_CDBGNODE2EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType2_DataEff;
assign CSR_CDbgNode2Eap2_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode2Eap2_F_EventType2_Data = (CR_CDBGNODE2EAP2_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_EventType2), 64'(CSR_CDbgNode2Eap2_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_EventType2_ff   (.out(CSR_CDbgNode2Eap2_F_EventType2), .in(CSR_CDbgNode2Eap2_F_EventType2_Data), .en(CSR_CDbgNode2Eap2_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode2Eap2_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode2Eap2_F_CustomAction1Enable_Data = (CR_CDBGNODE2EAP2_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_CustomAction1Enable), 64'(CSR_CDbgNode2Eap2_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode2Eap2_F_CustomAction1Enable), .in(CSR_CDbgNode2Eap2_F_CustomAction1Enable_Data), .en(CSR_CDbgNode2Eap2_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode2Eap2_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode2Eap2_F_CustomAction0Enable_Data = (CR_CDBGNODE2EAP2_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_CustomAction0Enable), 64'(CSR_CDbgNode2Eap2_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode2Eap2_F_CustomAction0Enable), .in(CSR_CDbgNode2Eap2_F_CustomAction0Enable_Data), .en(CSR_CDbgNode2Eap2_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_CustomAction1_WrEn;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction1_Data;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction1_DataEff;
assign CSR_CDbgNode2Eap2_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode2Eap2_F_CustomAction1_Data = (CR_CDBGNODE2EAP2_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_CustomAction1), 64'(CSR_CDbgNode2Eap2_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_CustomAction1_ff   (.out(CSR_CDbgNode2Eap2_F_CustomAction1), .in(CSR_CDbgNode2Eap2_F_CustomAction1_Data), .en(CSR_CDbgNode2Eap2_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_CustomAction0_WrEn;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction0_Data;
logic [CR_CDBGNODE2EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap2_F_CustomAction0_DataEff;
assign CSR_CDbgNode2Eap2_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode2Eap2_F_CustomAction0_Data = (CR_CDBGNODE2EAP2_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_CustomAction0), 64'(CSR_CDbgNode2Eap2_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_CustomAction0_ff   (.out(CSR_CDbgNode2Eap2_F_CustomAction0), .in(CSR_CDbgNode2Eap2_F_CustomAction0_Data), .en(CSR_CDbgNode2Eap2_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_EventType1_WrEn;
logic [CR_CDBGNODE2EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType1_Data;
logic [CR_CDBGNODE2EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType1_DataEff;
assign CSR_CDbgNode2Eap2_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode2Eap2_F_EventType1_Data = (CR_CDBGNODE2EAP2_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_EventType1), 64'(CSR_CDbgNode2Eap2_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_EventType1_ff   (.out(CSR_CDbgNode2Eap2_F_EventType1), .in(CSR_CDbgNode2Eap2_F_EventType1_Data), .en(CSR_CDbgNode2Eap2_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_EventType0_WrEn;
logic [CR_CDBGNODE2EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType0_Data;
logic [CR_CDBGNODE2EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap2_F_EventType0_DataEff;
assign CSR_CDbgNode2Eap2_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode2Eap2_F_EventType0_Data = (CR_CDBGNODE2EAP2_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_EventType0), 64'(CSR_CDbgNode2Eap2_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_EventType0_ff   (.out(CSR_CDbgNode2Eap2_F_EventType0), .in(CSR_CDbgNode2Eap2_F_EventType0_Data), .en(CSR_CDbgNode2Eap2_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_LogicalOp_WrEn;
logic [CR_CDBGNODE2EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap2_F_LogicalOp_Data;
logic [CR_CDBGNODE2EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap2_F_LogicalOp_DataEff;
assign CSR_CDbgNode2Eap2_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode2Eap2_F_LogicalOp_Data = (CR_CDBGNODE2EAP2_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_LogicalOp), 64'(CSR_CDbgNode2Eap2_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_LogicalOp_ff   (.out(CSR_CDbgNode2Eap2_F_LogicalOp), .in(CSR_CDbgNode2Eap2_F_LogicalOp_Data), .en(CSR_CDbgNode2Eap2_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_Action1_WrEn;
logic [CR_CDBGNODE2EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action1_Data;
logic [CR_CDBGNODE2EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action1_DataEff;
assign CSR_CDbgNode2Eap2_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode2Eap2_F_Action1_Data = (CR_CDBGNODE2EAP2_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_Action1), 64'(CSR_CDbgNode2Eap2_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_Action1_ff   (.out(CSR_CDbgNode2Eap2_F_Action1), .in(CSR_CDbgNode2Eap2_F_Action1_Data), .en(CSR_CDbgNode2Eap2_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_Action0_WrEn;
logic [CR_CDBGNODE2EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action0_Data;
logic [CR_CDBGNODE2EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap2_F_Action0_DataEff;
assign CSR_CDbgNode2Eap2_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode2Eap2_F_Action0_Data = (CR_CDBGNODE2EAP2_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_Action0), 64'(CSR_CDbgNode2Eap2_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_Action0_ff   (.out(CSR_CDbgNode2Eap2_F_Action0), .in(CSR_CDbgNode2Eap2_F_Action0_Data), .en(CSR_CDbgNode2Eap2_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap2_F_DestNode_WrEn;
logic [CR_CDBGNODE2EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap2_F_DestNode_Data;
logic [CR_CDBGNODE2EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap2_F_DestNode_DataEff;
assign CSR_CDbgNode2Eap2_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode2Eap2_F_DestNode_Data = (CR_CDBGNODE2EAP2_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap2_F_DestNode), 64'(CSR_CDbgNode2Eap2_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap2_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP2_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap2_F_DestNode_ff   (.out(CSR_CDbgNode2Eap2_F_DestNode), .in(CSR_CDbgNode2Eap2_F_DestNode_Data), .en(CSR_CDbgNode2Eap2_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE2EAP3
logic                                           CSR_CDbgNode2Eap3_F_Action3_WrEn;
logic [CR_CDBGNODE2EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action3_Data;
logic [CR_CDBGNODE2EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action3_DataEff;
assign CSR_CDbgNode2Eap3_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode2Eap3_F_Action3_Data = (CR_CDBGNODE2EAP3_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_Action3), 64'(CSR_CDbgNode2Eap3_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_Action3_ff   (.out(CSR_CDbgNode2Eap3_F_Action3), .in(CSR_CDbgNode2Eap3_F_Action3_Data), .en(CSR_CDbgNode2Eap3_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_Action2_WrEn;
logic [CR_CDBGNODE2EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action2_Data;
logic [CR_CDBGNODE2EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action2_DataEff;
assign CSR_CDbgNode2Eap3_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode2Eap3_F_Action2_Data = (CR_CDBGNODE2EAP3_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_Action2), 64'(CSR_CDbgNode2Eap3_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_Action2_ff   (.out(CSR_CDbgNode2Eap3_F_Action2), .in(CSR_CDbgNode2Eap3_F_Action2_Data), .en(CSR_CDbgNode2Eap3_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_Udf_WrEn;
logic [CR_CDBGNODE2EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap3_F_Udf_Data;
logic [CR_CDBGNODE2EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode2Eap3_F_Udf_DataEff;
assign CSR_CDbgNode2Eap3_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode2Eap3_F_Udf_Data = (CR_CDBGNODE2EAP3_UDF_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_Udf), 64'(CSR_CDbgNode2Eap3_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_Udf_ff   (.out(CSR_CDbgNode2Eap3_F_Udf), .in(CSR_CDbgNode2Eap3_F_Udf_Data), .en(CSR_CDbgNode2Eap3_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_EventType2_WrEn;
logic [CR_CDBGNODE2EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType2_Data;
logic [CR_CDBGNODE2EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType2_DataEff;
assign CSR_CDbgNode2Eap3_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode2Eap3_F_EventType2_Data = (CR_CDBGNODE2EAP3_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_EventType2), 64'(CSR_CDbgNode2Eap3_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_EventType2_ff   (.out(CSR_CDbgNode2Eap3_F_EventType2), .in(CSR_CDbgNode2Eap3_F_EventType2_Data), .en(CSR_CDbgNode2Eap3_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode2Eap3_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode2Eap3_F_CustomAction1Enable_Data = (CR_CDBGNODE2EAP3_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_CustomAction1Enable), 64'(CSR_CDbgNode2Eap3_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode2Eap3_F_CustomAction1Enable), .in(CSR_CDbgNode2Eap3_F_CustomAction1Enable_Data), .en(CSR_CDbgNode2Eap3_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode2Eap3_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode2Eap3_F_CustomAction0Enable_Data = (CR_CDBGNODE2EAP3_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_CustomAction0Enable), 64'(CSR_CDbgNode2Eap3_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode2Eap3_F_CustomAction0Enable), .in(CSR_CDbgNode2Eap3_F_CustomAction0Enable_Data), .en(CSR_CDbgNode2Eap3_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_CustomAction1_WrEn;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction1_Data;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction1_DataEff;
assign CSR_CDbgNode2Eap3_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode2Eap3_F_CustomAction1_Data = (CR_CDBGNODE2EAP3_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_CustomAction1), 64'(CSR_CDbgNode2Eap3_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_CustomAction1_ff   (.out(CSR_CDbgNode2Eap3_F_CustomAction1), .in(CSR_CDbgNode2Eap3_F_CustomAction1_Data), .en(CSR_CDbgNode2Eap3_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_CustomAction0_WrEn;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction0_Data;
logic [CR_CDBGNODE2EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode2Eap3_F_CustomAction0_DataEff;
assign CSR_CDbgNode2Eap3_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode2Eap3_F_CustomAction0_Data = (CR_CDBGNODE2EAP3_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_CustomAction0), 64'(CSR_CDbgNode2Eap3_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_CustomAction0_ff   (.out(CSR_CDbgNode2Eap3_F_CustomAction0), .in(CSR_CDbgNode2Eap3_F_CustomAction0_Data), .en(CSR_CDbgNode2Eap3_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_EventType1_WrEn;
logic [CR_CDBGNODE2EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType1_Data;
logic [CR_CDBGNODE2EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType1_DataEff;
assign CSR_CDbgNode2Eap3_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode2Eap3_F_EventType1_Data = (CR_CDBGNODE2EAP3_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_EventType1), 64'(CSR_CDbgNode2Eap3_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_EventType1_ff   (.out(CSR_CDbgNode2Eap3_F_EventType1), .in(CSR_CDbgNode2Eap3_F_EventType1_Data), .en(CSR_CDbgNode2Eap3_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_EventType0_WrEn;
logic [CR_CDBGNODE2EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType0_Data;
logic [CR_CDBGNODE2EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode2Eap3_F_EventType0_DataEff;
assign CSR_CDbgNode2Eap3_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode2Eap3_F_EventType0_Data = (CR_CDBGNODE2EAP3_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_EventType0), 64'(CSR_CDbgNode2Eap3_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_EventType0_ff   (.out(CSR_CDbgNode2Eap3_F_EventType0), .in(CSR_CDbgNode2Eap3_F_EventType0_Data), .en(CSR_CDbgNode2Eap3_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_LogicalOp_WrEn;
logic [CR_CDBGNODE2EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap3_F_LogicalOp_Data;
logic [CR_CDBGNODE2EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode2Eap3_F_LogicalOp_DataEff;
assign CSR_CDbgNode2Eap3_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode2Eap3_F_LogicalOp_Data = (CR_CDBGNODE2EAP3_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_LogicalOp), 64'(CSR_CDbgNode2Eap3_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_LogicalOp_ff   (.out(CSR_CDbgNode2Eap3_F_LogicalOp), .in(CSR_CDbgNode2Eap3_F_LogicalOp_Data), .en(CSR_CDbgNode2Eap3_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_Action1_WrEn;
logic [CR_CDBGNODE2EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action1_Data;
logic [CR_CDBGNODE2EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action1_DataEff;
assign CSR_CDbgNode2Eap3_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode2Eap3_F_Action1_Data = (CR_CDBGNODE2EAP3_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_Action1), 64'(CSR_CDbgNode2Eap3_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_Action1_ff   (.out(CSR_CDbgNode2Eap3_F_Action1), .in(CSR_CDbgNode2Eap3_F_Action1_Data), .en(CSR_CDbgNode2Eap3_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_Action0_WrEn;
logic [CR_CDBGNODE2EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action0_Data;
logic [CR_CDBGNODE2EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode2Eap3_F_Action0_DataEff;
assign CSR_CDbgNode2Eap3_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode2Eap3_F_Action0_Data = (CR_CDBGNODE2EAP3_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_Action0), 64'(CSR_CDbgNode2Eap3_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_Action0_ff   (.out(CSR_CDbgNode2Eap3_F_Action0), .in(CSR_CDbgNode2Eap3_F_Action0_Data), .en(CSR_CDbgNode2Eap3_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode2Eap3_F_DestNode_WrEn;
logic [CR_CDBGNODE2EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap3_F_DestNode_Data;
logic [CR_CDBGNODE2EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode2Eap3_F_DestNode_DataEff;
assign CSR_CDbgNode2Eap3_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode2Eap3_F_DestNode_Data = (CR_CDBGNODE2EAP3_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode2Eap3_F_DestNode), 64'(CSR_CDbgNode2Eap3_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode2Eap3_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE2EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE2EAP3_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode2Eap3_F_DestNode_ff   (.out(CSR_CDbgNode2Eap3_F_DestNode), .in(CSR_CDbgNode2Eap3_F_DestNode_Data), .en(CSR_CDbgNode2Eap3_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE3EAP2
logic                                           CSR_CDbgNode3Eap2_F_Action3_WrEn;
logic [CR_CDBGNODE3EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action3_Data;
logic [CR_CDBGNODE3EAP2_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action3_DataEff;
assign CSR_CDbgNode3Eap2_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode3Eap2_F_Action3_Data = (CR_CDBGNODE3EAP2_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_Action3), 64'(CSR_CDbgNode3Eap2_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_Action3_ff   (.out(CSR_CDbgNode3Eap2_F_Action3), .in(CSR_CDbgNode3Eap2_F_Action3_Data), .en(CSR_CDbgNode3Eap2_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_Action2_WrEn;
logic [CR_CDBGNODE3EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action2_Data;
logic [CR_CDBGNODE3EAP2_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action2_DataEff;
assign CSR_CDbgNode3Eap2_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode3Eap2_F_Action2_Data = (CR_CDBGNODE3EAP2_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_Action2), 64'(CSR_CDbgNode3Eap2_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_Action2_ff   (.out(CSR_CDbgNode3Eap2_F_Action2), .in(CSR_CDbgNode3Eap2_F_Action2_Data), .en(CSR_CDbgNode3Eap2_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_Udf_WrEn;
logic [CR_CDBGNODE3EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap2_F_Udf_Data;
logic [CR_CDBGNODE3EAP2_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap2_F_Udf_DataEff;
assign CSR_CDbgNode3Eap2_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode3Eap2_F_Udf_Data = (CR_CDBGNODE3EAP2_UDF_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_Udf), 64'(CSR_CDbgNode3Eap2_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_Udf_ff   (.out(CSR_CDbgNode3Eap2_F_Udf), .in(CSR_CDbgNode3Eap2_F_Udf_Data), .en(CSR_CDbgNode3Eap2_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_EventType2_WrEn;
logic [CR_CDBGNODE3EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType2_Data;
logic [CR_CDBGNODE3EAP2_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType2_DataEff;
assign CSR_CDbgNode3Eap2_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode3Eap2_F_EventType2_Data = (CR_CDBGNODE3EAP2_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_EventType2), 64'(CSR_CDbgNode3Eap2_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_EventType2_ff   (.out(CSR_CDbgNode3Eap2_F_EventType2), .in(CSR_CDbgNode3Eap2_F_EventType2_Data), .en(CSR_CDbgNode3Eap2_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode3Eap2_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode3Eap2_F_CustomAction1Enable_Data = (CR_CDBGNODE3EAP2_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_CustomAction1Enable), 64'(CSR_CDbgNode3Eap2_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode3Eap2_F_CustomAction1Enable), .in(CSR_CDbgNode3Eap2_F_CustomAction1Enable_Data), .en(CSR_CDbgNode3Eap2_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode3Eap2_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode3Eap2_F_CustomAction0Enable_Data = (CR_CDBGNODE3EAP2_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_CustomAction0Enable), 64'(CSR_CDbgNode3Eap2_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode3Eap2_F_CustomAction0Enable), .in(CSR_CDbgNode3Eap2_F_CustomAction0Enable_Data), .en(CSR_CDbgNode3Eap2_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_CustomAction1_WrEn;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction1_Data;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction1_DataEff;
assign CSR_CDbgNode3Eap2_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode3Eap2_F_CustomAction1_Data = (CR_CDBGNODE3EAP2_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_CustomAction1), 64'(CSR_CDbgNode3Eap2_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_CustomAction1_ff   (.out(CSR_CDbgNode3Eap2_F_CustomAction1), .in(CSR_CDbgNode3Eap2_F_CustomAction1_Data), .en(CSR_CDbgNode3Eap2_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_CustomAction0_WrEn;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction0_Data;
logic [CR_CDBGNODE3EAP2_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap2_F_CustomAction0_DataEff;
assign CSR_CDbgNode3Eap2_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode3Eap2_F_CustomAction0_Data = (CR_CDBGNODE3EAP2_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_CustomAction0), 64'(CSR_CDbgNode3Eap2_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_CustomAction0_ff   (.out(CSR_CDbgNode3Eap2_F_CustomAction0), .in(CSR_CDbgNode3Eap2_F_CustomAction0_Data), .en(CSR_CDbgNode3Eap2_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_EventType1_WrEn;
logic [CR_CDBGNODE3EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType1_Data;
logic [CR_CDBGNODE3EAP2_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType1_DataEff;
assign CSR_CDbgNode3Eap2_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode3Eap2_F_EventType1_Data = (CR_CDBGNODE3EAP2_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_EventType1), 64'(CSR_CDbgNode3Eap2_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_EventType1_ff   (.out(CSR_CDbgNode3Eap2_F_EventType1), .in(CSR_CDbgNode3Eap2_F_EventType1_Data), .en(CSR_CDbgNode3Eap2_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_EventType0_WrEn;
logic [CR_CDBGNODE3EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType0_Data;
logic [CR_CDBGNODE3EAP2_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap2_F_EventType0_DataEff;
assign CSR_CDbgNode3Eap2_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode3Eap2_F_EventType0_Data = (CR_CDBGNODE3EAP2_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_EventType0), 64'(CSR_CDbgNode3Eap2_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_EventType0_ff   (.out(CSR_CDbgNode3Eap2_F_EventType0), .in(CSR_CDbgNode3Eap2_F_EventType0_Data), .en(CSR_CDbgNode3Eap2_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_LogicalOp_WrEn;
logic [CR_CDBGNODE3EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap2_F_LogicalOp_Data;
logic [CR_CDBGNODE3EAP2_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap2_F_LogicalOp_DataEff;
assign CSR_CDbgNode3Eap2_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode3Eap2_F_LogicalOp_Data = (CR_CDBGNODE3EAP2_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_LogicalOp), 64'(CSR_CDbgNode3Eap2_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_LogicalOp_ff   (.out(CSR_CDbgNode3Eap2_F_LogicalOp), .in(CSR_CDbgNode3Eap2_F_LogicalOp_Data), .en(CSR_CDbgNode3Eap2_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_Action1_WrEn;
logic [CR_CDBGNODE3EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action1_Data;
logic [CR_CDBGNODE3EAP2_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action1_DataEff;
assign CSR_CDbgNode3Eap2_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode3Eap2_F_Action1_Data = (CR_CDBGNODE3EAP2_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_Action1), 64'(CSR_CDbgNode3Eap2_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_Action1_ff   (.out(CSR_CDbgNode3Eap2_F_Action1), .in(CSR_CDbgNode3Eap2_F_Action1_Data), .en(CSR_CDbgNode3Eap2_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_Action0_WrEn;
logic [CR_CDBGNODE3EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action0_Data;
logic [CR_CDBGNODE3EAP2_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap2_F_Action0_DataEff;
assign CSR_CDbgNode3Eap2_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode3Eap2_F_Action0_Data = (CR_CDBGNODE3EAP2_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_Action0), 64'(CSR_CDbgNode3Eap2_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_Action0_ff   (.out(CSR_CDbgNode3Eap2_F_Action0), .in(CSR_CDbgNode3Eap2_F_Action0_Data), .en(CSR_CDbgNode3Eap2_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap2_F_DestNode_WrEn;
logic [CR_CDBGNODE3EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap2_F_DestNode_Data;
logic [CR_CDBGNODE3EAP2_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap2_F_DestNode_DataEff;
assign CSR_CDbgNode3Eap2_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode3Eap2_F_DestNode_Data = (CR_CDBGNODE3EAP2_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap2_F_DestNode), 64'(CSR_CDbgNode3Eap2_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap2_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP2))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP2_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap2_F_DestNode_ff   (.out(CSR_CDbgNode3Eap2_F_DestNode), .in(CSR_CDbgNode3Eap2_F_DestNode_Data), .en(CSR_CDbgNode3Eap2_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGNODE3EAP3
logic                                           CSR_CDbgNode3Eap3_F_Action3_WrEn;
logic [CR_CDBGNODE3EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action3_Data;
logic [CR_CDBGNODE3EAP3_ACTION3_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action3_DataEff;
assign CSR_CDbgNode3Eap3_F_Action3_DataEff = {reg_wr_data[63:58]};
assign CSR_CDbgNode3Eap3_F_Action3_Data = (CR_CDBGNODE3EAP3_ACTION3_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_Action3), 64'(CSR_CDbgNode3Eap3_F_Action3_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_Action3_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_ACTION3_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_Action3_ff   (.out(CSR_CDbgNode3Eap3_F_Action3), .in(CSR_CDbgNode3Eap3_F_Action3_Data), .en(CSR_CDbgNode3Eap3_F_Action3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_Action2_WrEn;
logic [CR_CDBGNODE3EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action2_Data;
logic [CR_CDBGNODE3EAP3_ACTION2_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action2_DataEff;
assign CSR_CDbgNode3Eap3_F_Action2_DataEff = {reg_wr_data[57:52]};
assign CSR_CDbgNode3Eap3_F_Action2_Data = (CR_CDBGNODE3EAP3_ACTION2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_Action2), 64'(CSR_CDbgNode3Eap3_F_Action2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_Action2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_ACTION2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_Action2_ff   (.out(CSR_CDbgNode3Eap3_F_Action2), .in(CSR_CDbgNode3Eap3_F_Action2_Data), .en(CSR_CDbgNode3Eap3_F_Action2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_Udf_WrEn;
logic [CR_CDBGNODE3EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap3_F_Udf_Data;
logic [CR_CDBGNODE3EAP3_UDF_WIDTH         -1:0] CSR_CDbgNode3Eap3_F_Udf_DataEff;
assign CSR_CDbgNode3Eap3_F_Udf_DataEff = {reg_wr_data[51:44]};
assign CSR_CDbgNode3Eap3_F_Udf_Data = (CR_CDBGNODE3EAP3_UDF_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_Udf), 64'(CSR_CDbgNode3Eap3_F_Udf_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_Udf_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_UDF_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_Udf_ff   (.out(CSR_CDbgNode3Eap3_F_Udf), .in(CSR_CDbgNode3Eap3_F_Udf_Data), .en(CSR_CDbgNode3Eap3_F_Udf_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_EventType2_WrEn;
logic [CR_CDBGNODE3EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType2_Data;
logic [CR_CDBGNODE3EAP3_EVENTTYPE2_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType2_DataEff;
assign CSR_CDbgNode3Eap3_F_EventType2_DataEff = {reg_wr_data[43:38]};
assign CSR_CDbgNode3Eap3_F_EventType2_Data = (CR_CDBGNODE3EAP3_EVENTTYPE2_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_EventType2), 64'(CSR_CDbgNode3Eap3_F_EventType2_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_EventType2_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_EVENTTYPE2_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_EventType2_ff   (.out(CSR_CDbgNode3Eap3_F_EventType2), .in(CSR_CDbgNode3Eap3_F_EventType2_Data), .en(CSR_CDbgNode3Eap3_F_EventType2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_CustomAction1Enable_WrEn;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction1Enable_Data;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION1ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction1Enable_DataEff;
assign CSR_CDbgNode3Eap3_F_CustomAction1Enable_DataEff = {reg_wr_data[37:37]};
assign CSR_CDbgNode3Eap3_F_CustomAction1Enable_Data = (CR_CDBGNODE3EAP3_CUSTOMACTION1ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_CustomAction1Enable), 64'(CSR_CDbgNode3Eap3_F_CustomAction1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_CustomAction1Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_CUSTOMACTION1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_CustomAction1Enable_ff   (.out(CSR_CDbgNode3Eap3_F_CustomAction1Enable), .in(CSR_CDbgNode3Eap3_F_CustomAction1Enable_Data), .en(CSR_CDbgNode3Eap3_F_CustomAction1Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_CustomAction0Enable_WrEn;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction0Enable_Data;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION0ENABLE_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction0Enable_DataEff;
assign CSR_CDbgNode3Eap3_F_CustomAction0Enable_DataEff = {reg_wr_data[36:36]};
assign CSR_CDbgNode3Eap3_F_CustomAction0Enable_Data = (CR_CDBGNODE3EAP3_CUSTOMACTION0ENABLE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_CustomAction0Enable), 64'(CSR_CDbgNode3Eap3_F_CustomAction0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_CustomAction0Enable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_CUSTOMACTION0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_CustomAction0Enable_ff   (.out(CSR_CDbgNode3Eap3_F_CustomAction0Enable), .in(CSR_CDbgNode3Eap3_F_CustomAction0Enable_Data), .en(CSR_CDbgNode3Eap3_F_CustomAction0Enable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_CustomAction1_WrEn;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction1_Data;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION1_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction1_DataEff;
assign CSR_CDbgNode3Eap3_F_CustomAction1_DataEff = {reg_wr_data[35:32]};
assign CSR_CDbgNode3Eap3_F_CustomAction1_Data = (CR_CDBGNODE3EAP3_CUSTOMACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_CustomAction1), 64'(CSR_CDbgNode3Eap3_F_CustomAction1_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_CustomAction1_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_CUSTOMACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_CustomAction1_ff   (.out(CSR_CDbgNode3Eap3_F_CustomAction1), .in(CSR_CDbgNode3Eap3_F_CustomAction1_Data), .en(CSR_CDbgNode3Eap3_F_CustomAction1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_CustomAction0_WrEn;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction0_Data;
logic [CR_CDBGNODE3EAP3_CUSTOMACTION0_WIDTH-1:0] CSR_CDbgNode3Eap3_F_CustomAction0_DataEff;
assign CSR_CDbgNode3Eap3_F_CustomAction0_DataEff = {reg_wr_data[31:28]};
assign CSR_CDbgNode3Eap3_F_CustomAction0_Data = (CR_CDBGNODE3EAP3_CUSTOMACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_CustomAction0), 64'(CSR_CDbgNode3Eap3_F_CustomAction0_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_CustomAction0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_CUSTOMACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_CustomAction0_ff   (.out(CSR_CDbgNode3Eap3_F_CustomAction0), .in(CSR_CDbgNode3Eap3_F_CustomAction0_Data), .en(CSR_CDbgNode3Eap3_F_CustomAction0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_EventType1_WrEn;
logic [CR_CDBGNODE3EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType1_Data;
logic [CR_CDBGNODE3EAP3_EVENTTYPE1_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType1_DataEff;
assign CSR_CDbgNode3Eap3_F_EventType1_DataEff = {reg_wr_data[27:22]};
assign CSR_CDbgNode3Eap3_F_EventType1_Data = (CR_CDBGNODE3EAP3_EVENTTYPE1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_EventType1), 64'(CSR_CDbgNode3Eap3_F_EventType1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_EventType1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_EVENTTYPE1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_EventType1_ff   (.out(CSR_CDbgNode3Eap3_F_EventType1), .in(CSR_CDbgNode3Eap3_F_EventType1_Data), .en(CSR_CDbgNode3Eap3_F_EventType1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_EventType0_WrEn;
logic [CR_CDBGNODE3EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType0_Data;
logic [CR_CDBGNODE3EAP3_EVENTTYPE0_WIDTH  -1:0] CSR_CDbgNode3Eap3_F_EventType0_DataEff;
assign CSR_CDbgNode3Eap3_F_EventType0_DataEff = {reg_wr_data[21:16]};
assign CSR_CDbgNode3Eap3_F_EventType0_Data = (CR_CDBGNODE3EAP3_EVENTTYPE0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_EventType0), 64'(CSR_CDbgNode3Eap3_F_EventType0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_EventType0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_EVENTTYPE0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_EventType0_ff   (.out(CSR_CDbgNode3Eap3_F_EventType0), .in(CSR_CDbgNode3Eap3_F_EventType0_Data), .en(CSR_CDbgNode3Eap3_F_EventType0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_LogicalOp_WrEn;
logic [CR_CDBGNODE3EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap3_F_LogicalOp_Data;
logic [CR_CDBGNODE3EAP3_LOGICALOP_WIDTH   -1:0] CSR_CDbgNode3Eap3_F_LogicalOp_DataEff;
assign CSR_CDbgNode3Eap3_F_LogicalOp_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgNode3Eap3_F_LogicalOp_Data = (CR_CDBGNODE3EAP3_LOGICALOP_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_LogicalOp), 64'(CSR_CDbgNode3Eap3_F_LogicalOp_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_LogicalOp_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_LOGICALOP_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_LogicalOp_ff   (.out(CSR_CDbgNode3Eap3_F_LogicalOp), .in(CSR_CDbgNode3Eap3_F_LogicalOp_Data), .en(CSR_CDbgNode3Eap3_F_LogicalOp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_Action1_WrEn;
logic [CR_CDBGNODE3EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action1_Data;
logic [CR_CDBGNODE3EAP3_ACTION1_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action1_DataEff;
assign CSR_CDbgNode3Eap3_F_Action1_DataEff = {reg_wr_data[13:8]};
assign CSR_CDbgNode3Eap3_F_Action1_Data = (CR_CDBGNODE3EAP3_ACTION1_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_Action1), 64'(CSR_CDbgNode3Eap3_F_Action1_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_Action1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_ACTION1_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_Action1_ff   (.out(CSR_CDbgNode3Eap3_F_Action1), .in(CSR_CDbgNode3Eap3_F_Action1_Data), .en(CSR_CDbgNode3Eap3_F_Action1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_Action0_WrEn;
logic [CR_CDBGNODE3EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action0_Data;
logic [CR_CDBGNODE3EAP3_ACTION0_WIDTH     -1:0] CSR_CDbgNode3Eap3_F_Action0_DataEff;
assign CSR_CDbgNode3Eap3_F_Action0_DataEff = {reg_wr_data[7:2]};
assign CSR_CDbgNode3Eap3_F_Action0_Data = (CR_CDBGNODE3EAP3_ACTION0_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_Action0), 64'(CSR_CDbgNode3Eap3_F_Action0_DataEff[5:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_Action0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_ACTION0_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_Action0_ff   (.out(CSR_CDbgNode3Eap3_F_Action0), .in(CSR_CDbgNode3Eap3_F_Action0_Data), .en(CSR_CDbgNode3Eap3_F_Action0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgNode3Eap3_F_DestNode_WrEn;
logic [CR_CDBGNODE3EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap3_F_DestNode_Data;
logic [CR_CDBGNODE3EAP3_DESTNODE_WIDTH    -1:0] CSR_CDbgNode3Eap3_F_DestNode_DataEff;
assign CSR_CDbgNode3Eap3_F_DestNode_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgNode3Eap3_F_DestNode_Data = (CR_CDBGNODE3EAP3_DESTNODE_WIDTH'(update_value(64'(CSR_CDbgNode3Eap3_F_DestNode), 64'(CSR_CDbgNode3Eap3_F_DestNode_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgNode3Eap3_F_DestNode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGNODE3EAP3))));
generic_dff #(.WIDTH(CR_CDBGNODE3EAP3_DESTNODE_WIDTH), .RESET_VALUE(0)) CSR_CDbgNode3Eap3_F_DestNode_ff   (.out(CSR_CDbgNode3Eap3_F_DestNode), .in(CSR_CDbgNode3Eap3_F_DestNode_Data), .en(CSR_CDbgNode3Eap3_F_DestNode_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE0EAP2
logic                                           CSR_CDbgSignalSnapshotNode0Eap2_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap2_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap2_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode0Eap2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode0Eap2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode0Eap2_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode0Eap2_F_Value_Data = (CrCsrCdbgsignalsnapshotnode0Eap2Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode0Eap2_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode0Eap2Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE0EAP2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode0Eap2_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode0Eap2_F_Value), .in(CSR_CDbgSignalSnapshotNode0Eap2_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode0Eap2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE0EAP3
logic                                           CSR_CDbgSignalSnapshotNode0Eap3_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap3_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE0EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode0Eap3_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode0Eap3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode0Eap3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode0Eap3_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode0Eap3_F_Value_Data = (CrCsrCdbgsignalsnapshotnode0Eap3Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode0Eap3_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode0Eap3Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE0EAP3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode0Eap3_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode0Eap3_F_Value), .in(CSR_CDbgSignalSnapshotNode0Eap3_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode0Eap3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE1EAP2
logic                                           CSR_CDbgSignalSnapshotNode1Eap2_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap2_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap2_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode1Eap2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode1Eap2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode1Eap2_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode1Eap2_F_Value_Data = (CrCsrCdbgsignalsnapshotnode1Eap2Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode1Eap2_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode1Eap2Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE1EAP2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode1Eap2_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode1Eap2_F_Value), .in(CSR_CDbgSignalSnapshotNode1Eap2_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode1Eap2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE1EAP3
logic                                           CSR_CDbgSignalSnapshotNode1Eap3_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap3_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE1EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode1Eap3_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode1Eap3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode1Eap3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode1Eap3_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode1Eap3_F_Value_Data = (CrCsrCdbgsignalsnapshotnode1Eap3Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode1Eap3_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode1Eap3Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE1EAP3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode1Eap3_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode1Eap3_F_Value), .in(CSR_CDbgSignalSnapshotNode1Eap3_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode1Eap3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE2EAP2
logic                                           CSR_CDbgSignalSnapshotNode2Eap2_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap2_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap2_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode2Eap2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode2Eap2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode2Eap2_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode2Eap2_F_Value_Data = (CrCsrCdbgsignalsnapshotnode2Eap2Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode2Eap2_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode2Eap2Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE2EAP2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode2Eap2_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode2Eap2_F_Value), .in(CSR_CDbgSignalSnapshotNode2Eap2_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode2Eap2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE2EAP3
logic                                           CSR_CDbgSignalSnapshotNode2Eap3_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap3_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE2EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode2Eap3_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode2Eap3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode2Eap3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode2Eap3_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode2Eap3_F_Value_Data = (CrCsrCdbgsignalsnapshotnode2Eap3Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode2Eap3_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode2Eap3Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE2EAP3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode2Eap3_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode2Eap3_F_Value), .in(CSR_CDbgSignalSnapshotNode2Eap3_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode2Eap3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE3EAP2
logic                                           CSR_CDbgSignalSnapshotNode3Eap2_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap2_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP2_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap2_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode3Eap2_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode3Eap2_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode3Eap2_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode3Eap2_F_Value_Data = (CrCsrCdbgsignalsnapshotnode3Eap2Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode3Eap2_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode3Eap2Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE3EAP2_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode3Eap2_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode3Eap2_F_Value), .in(CSR_CDbgSignalSnapshotNode3Eap2_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode3Eap2_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALSNAPSHOTNODE3EAP3
logic                                           CSR_CDbgSignalSnapshotNode3Eap3_F_Value_WrEn;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap3_F_Value_Data;
logic [CR_CDBGSIGNALSNAPSHOTNODE3EAP3_VALUE_WIDTH-1:0] CSR_CDbgSignalSnapshotNode3Eap3_F_Value_DataEff;
assign CSR_CDbgSignalSnapshotNode3Eap3_F_Value_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalSnapshotNode3Eap3_F_Value[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgSignalSnapshotNode3Eap3_F_Value[31:0]};
assign CSR_CDbgSignalSnapshotNode3Eap3_F_Value_Data = (CrCsrCdbgsignalsnapshotnode3Eap3Wr.Data.Value);
assign CSR_CDbgSignalSnapshotNode3Eap3_F_Value_WrEn = ((CrCsrCdbgsignalsnapshotnode3Eap3Wr.ValueWrEn));
generic_dff #(.WIDTH(CR_CDBGSIGNALSNAPSHOTNODE3EAP3_VALUE_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalSnapshotNode3Eap3_F_Value_ff   (.out(CSR_CDbgSignalSnapshotNode3Eap3_F_Value), .in(CSR_CDbgSignalSnapshotNode3Eap3_F_Value_Data), .en(CSR_CDbgSignalSnapshotNode3Eap3_F_Value_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGSIGNALDELAYMUXSEL
logic                                           CSR_CDbgSignalDelayMuxSel_F_Rsvd_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_RSVD_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Rsvd_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_RSVD_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Rsvd_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Rsvd_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgSignalDelayMuxSel_F_Rsvd[47:16] , reg_wr_strb[0] ? reg_wr_data[31:16] : CSR_CDbgSignalDelayMuxSel_F_Rsvd[15:0]};
assign CSR_CDbgSignalDelayMuxSel_F_Rsvd_Data = (CR_CDBGSIGNALDELAYMUXSEL_RSVD_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Rsvd), 64'(CSR_CDbgSignalDelayMuxSel_F_Rsvd_DataEff[47:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Rsvd_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_RSVD_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Rsvd_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Rsvd), .in(CSR_CDbgSignalDelayMuxSel_F_Rsvd_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Rsvd_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG7_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG7_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_DataEff = {reg_wr_data[15:14]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG7_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg7), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG7_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg7), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg7_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG6_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG6_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_DataEff = {reg_wr_data[13:12]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG6_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg6), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG6_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg6), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg6_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG5_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG5_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_DataEff = {reg_wr_data[11:10]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG5_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg5), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG5_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg5), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg5_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG4_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG4_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_DataEff = {reg_wr_data[9:8]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG4_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg4), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG4_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg4), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg4_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG3_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG3_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_DataEff = {reg_wr_data[7:6]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG3_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg3), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG3_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg3), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg3_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG2_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG2_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_DataEff = {reg_wr_data[5:4]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG2_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg2), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG2_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg2), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg2_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG1_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG1_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_DataEff = {reg_wr_data[3:2]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG1_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg1), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG1_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg1), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg1_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_WrEn;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG0_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_Data;
logic [CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG0_WIDTH-1:0] CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_DataEff;
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_DataEff = {reg_wr_data[1:0]};
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_Data = (CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG0_WIDTH'(update_value(64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg0), 64'(CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGSIGNALDELAYMUXSEL))));
generic_dff #(.WIDTH(CR_CDBGSIGNALDELAYMUXSEL_MUXSELSEG0_WIDTH), .RESET_VALUE(0)) CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_ff   (.out(CSR_CDbgSignalDelayMuxSel_F_Muxselseg0), .in(CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_Data), .en(CSR_CDbgSignalDelayMuxSel_F_Muxselseg0_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLATIMESTAMPSYNC
logic                                           CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_WrEn;
logic [CR_CDBGCLATIMESTAMPSYNC_TIMESYNCMODEENABLE_WIDTH-1:0] CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_Data;
logic [CR_CDBGCLATIMESTAMPSYNC_TIMESYNCMODEENABLE_WIDTH-1:0] CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_DataEff;
assign CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_DataEff = {reg_wr_data[63:63]};
assign CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_Data = (CR_CDBGCLATIMESTAMPSYNC_TIMESYNCMODEENABLE_WIDTH'(update_value(64'(CSR_CDbgClaTimestampsync_F_Timesyncmodeenable), 64'(CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_WrEn = (((reg_write & reg_wr_strb[1] & (reg_addr == ADDR_CSR_CDBGCLATIMESTAMPSYNC))));
generic_dff #(.WIDTH(CR_CDBGCLATIMESTAMPSYNC_TIMESYNCMODEENABLE_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_ff   (.out(CSR_CDbgClaTimestampsync_F_Timesyncmodeenable), .in(CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_Data), .en(CSR_CDbgClaTimestampsync_F_Timesyncmodeenable_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaTimestampsync_F_Timestamp_WrEn;
logic [CR_CDBGCLATIMESTAMPSYNC_TIMESTAMP_WIDTH-1:0] CSR_CDbgClaTimestampsync_F_Timestamp_Data;
logic [CR_CDBGCLATIMESTAMPSYNC_TIMESTAMP_WIDTH-1:0] CSR_CDbgClaTimestampsync_F_Timestamp_DataEff;
assign CSR_CDbgClaTimestampsync_F_Timestamp_DataEff = {reg_wr_strb[1] ? reg_wr_data[62:32] : CSR_CDbgClaTimestampsync_F_Timestamp[62:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CDbgClaTimestampsync_F_Timestamp[31:0]};
assign CSR_CDbgClaTimestampsync_F_Timestamp_Data = (CR_CDBGCLATIMESTAMPSYNC_TIMESTAMP_WIDTH'(update_value(64'(CSR_CDbgClaTimestampsync_F_Timestamp), 64'(CSR_CDbgClaTimestampsync_F_Timestamp_DataEff[62:0]), reg_wr_instr_type)));
assign CSR_CDbgClaTimestampsync_F_Timestamp_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGCLATIMESTAMPSYNC))));
generic_dff #(.WIDTH(CR_CDBGCLATIMESTAMPSYNC_TIMESTAMP_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaTimestampsync_F_Timestamp_ff   (.out(CSR_CDbgClaTimestampsync_F_Timestamp), .in(CSR_CDbgClaTimestampsync_F_Timestamp_Data), .en(CSR_CDbgClaTimestampsync_F_Timestamp_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CDBGCLAXTRIGGERTIMESTRETCH
logic                                           CSR_CDbgClaXtriggerTimestretch_F_Rsvd_WrEn;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_RSVD_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Rsvd_Data;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_RSVD_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Rsvd_DataEff;
assign CSR_CDbgClaXtriggerTimestretch_F_Rsvd_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CDbgClaXtriggerTimestretch_F_Rsvd[47:16] , reg_wr_strb[0] ? reg_wr_data[31:16] : CSR_CDbgClaXtriggerTimestretch_F_Rsvd[15:0]};
assign CSR_CDbgClaXtriggerTimestretch_F_Rsvd_Data = (CR_CDBGCLAXTRIGGERTIMESTRETCH_RSVD_WIDTH'(update_value(64'(CSR_CDbgClaXtriggerTimestretch_F_Rsvd), 64'(CSR_CDbgClaXtriggerTimestretch_F_Rsvd_DataEff[47:0]), reg_wr_instr_type)));
assign CSR_CDbgClaXtriggerTimestretch_F_Rsvd_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH))));
generic_dff #(.WIDTH(CR_CDBGCLAXTRIGGERTIMESTRETCH_RSVD_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaXtriggerTimestretch_F_Rsvd_ff   (.out(CSR_CDbgClaXtriggerTimestretch_F_Rsvd), .in(CSR_CDbgClaXtriggerTimestretch_F_Rsvd_Data), .en(CSR_CDbgClaXtriggerTimestretch_F_Rsvd_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_WrEn;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER1STRETCH_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_Data;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER1STRETCH_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_DataEff;
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_DataEff = {reg_wr_data[15:8]};
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_Data = (CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER1STRETCH_WIDTH'(update_value(64'(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch), 64'(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH))));
generic_dff #(.WIDTH(CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER1STRETCH_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_ff   (.out(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch), .in(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_Data), .en(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

logic                                           CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_WrEn;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER0STRETCH_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_Data;
logic [CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER0STRETCH_WIDTH-1:0] CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_DataEff;
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_DataEff = {reg_wr_data[7:0]};
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_Data = (CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER0STRETCH_WIDTH'(update_value(64'(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch), 64'(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH))));
generic_dff #(.WIDTH(CR_CDBGCLAXTRIGGERTIMESTRETCH_XTRIGGER0STRETCH_WIDTH), .RESET_VALUE(0)) CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_ff   (.out(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch), .in(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_Data), .en(CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch_WrEn), .clk(clk), .rst_n(reset_n_warm_ovrride));

//Register: CSR_CRSCRATCHPAD
logic                                           CSR_CrScratchpad_F_Data_WrEn;
logic [CR_CRSCRATCHPAD_DATA_WIDTH         -1:0] CSR_CrScratchpad_F_Data_Data;
logic [CR_CRSCRATCHPAD_DATA_WIDTH         -1:0] CSR_CrScratchpad_F_Data_DataEff;
assign CSR_CrScratchpad_F_Data_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_CrScratchpad_F_Data[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_CrScratchpad_F_Data[31:0]};
assign CSR_CrScratchpad_F_Data_Data = (CR_CRSCRATCHPAD_DATA_WIDTH'(update_value(64'(CSR_CrScratchpad_F_Data), 64'(CSR_CrScratchpad_F_Data_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_CrScratchpad_F_Data_WrEn = (((reg_write & (reg_addr == ADDR_CSR_CRSCRATCHPAD))));
generic_dff #(.WIDTH(CR_CRSCRATCHPAD_DATA_WIDTH), .RESET_VALUE(64'hBFBFBFBFBFBFBFBF)) CSR_CrScratchpad_F_Data_ff   (.out(CSR_CrScratchpad_F_Data), .in(CSR_CrScratchpad_F_Data_Data), .en(CSR_CrScratchpad_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_SCRATCH
logic                                           CSR_Scratch_F_Data_WrEn;
logic [CR_SCRATCH_DATA_WIDTH              -1:0] CSR_Scratch_F_Data_Data;
logic [CR_SCRATCH_DATA_WIDTH              -1:0] CSR_Scratch_F_Data_DataEff;
assign CSR_Scratch_F_Data_DataEff = {reg_wr_strb[1] ? reg_wr_data[63:32] : CSR_Scratch_F_Data[63:32] , reg_wr_strb[0] ? reg_wr_data[31:0] : CSR_Scratch_F_Data[31:0]};
assign CSR_Scratch_F_Data_Data = (CR_SCRATCH_DATA_WIDTH'(update_value(64'(CSR_Scratch_F_Data), 64'(CSR_Scratch_F_Data_DataEff[63:0]), reg_wr_instr_type)));
assign CSR_Scratch_F_Data_WrEn = (((reg_write & (reg_addr == ADDR_CSR_SCRATCH))));
generic_dff #(.WIDTH(CR_SCRATCH_DATA_WIDTH), .RESET_VALUE(0)) CSR_Scratch_F_Data_ff   (.out(CSR_Scratch_F_Data), .in(CSR_Scratch_F_Data_Data), .en(CSR_Scratch_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//------------------------------------------------------------------------------
// Register Reads
//------------------------------------------------------------------------------

// Construct register vectors
assign CSR_CDbgClaCounter0Cfg = {
    CSR_CDbgClaCounter0Cfg_F_Rsvd,
    CSR_CDbgClaCounter0Cfg_F_UpperTarget,
    CSR_CDbgClaCounter0Cfg_F_UpperCounter,
    CSR_CDbgClaCounter0Cfg_F_ResetOnTarget,
    CSR_CDbgClaCounter0Cfg_F_Target,
    CSR_CDbgClaCounter0Cfg_F_Counter
};
assign CSR_CDbgClaCounter1Cfg = {
    CSR_CDbgClaCounter1Cfg_F_Rsvd,
    CSR_CDbgClaCounter1Cfg_F_UpperTarget,
    CSR_CDbgClaCounter1Cfg_F_UpperCounter,
    CSR_CDbgClaCounter1Cfg_F_ResetOnTarget,
    CSR_CDbgClaCounter1Cfg_F_Target,
    CSR_CDbgClaCounter1Cfg_F_Counter
};
assign CSR_CDbgClaCounter2Cfg = {
    CSR_CDbgClaCounter2Cfg_F_Rsvd,
    CSR_CDbgClaCounter2Cfg_F_UpperTarget,
    CSR_CDbgClaCounter2Cfg_F_UpperCounter,
    CSR_CDbgClaCounter2Cfg_F_ResetOnTarget,
    CSR_CDbgClaCounter2Cfg_F_Target,
    CSR_CDbgClaCounter2Cfg_F_Counter
};
assign CSR_CDbgClaCounter3Cfg = {
    CSR_CDbgClaCounter3Cfg_F_Rsvd,
    CSR_CDbgClaCounter3Cfg_F_UpperTarget,
    CSR_CDbgClaCounter3Cfg_F_UpperCounter,
    CSR_CDbgClaCounter3Cfg_F_ResetOnTarget,
    CSR_CDbgClaCounter3Cfg_F_Target,
    CSR_CDbgClaCounter3Cfg_F_Counter
};
assign CSR_CDbgNode0Eap0 = {
    CSR_CDbgNode0Eap0_F_Action3,
    CSR_CDbgNode0Eap0_F_Action2,
    CSR_CDbgNode0Eap0_F_Udf,
    CSR_CDbgNode0Eap0_F_EventType2,
    CSR_CDbgNode0Eap0_F_CustomAction1Enable,
    CSR_CDbgNode0Eap0_F_CustomAction0Enable,
    CSR_CDbgNode0Eap0_F_CustomAction1,
    CSR_CDbgNode0Eap0_F_CustomAction0,
    CSR_CDbgNode0Eap0_F_EventType1,
    CSR_CDbgNode0Eap0_F_EventType0,
    CSR_CDbgNode0Eap0_F_LogicalOp,
    CSR_CDbgNode0Eap0_F_Action1,
    CSR_CDbgNode0Eap0_F_Action0,
    CSR_CDbgNode0Eap0_F_DestNode
};
assign CSR_CDbgNode0Eap1 = {
    CSR_CDbgNode0Eap1_F_Action3,
    CSR_CDbgNode0Eap1_F_Action2,
    CSR_CDbgNode0Eap1_F_Udf,
    CSR_CDbgNode0Eap1_F_EventType2,
    CSR_CDbgNode0Eap1_F_CustomAction1Enable,
    CSR_CDbgNode0Eap1_F_CustomAction0Enable,
    CSR_CDbgNode0Eap1_F_CustomAction1,
    CSR_CDbgNode0Eap1_F_CustomAction0,
    CSR_CDbgNode0Eap1_F_EventType1,
    CSR_CDbgNode0Eap1_F_EventType0,
    CSR_CDbgNode0Eap1_F_LogicalOp,
    CSR_CDbgNode0Eap1_F_Action1,
    CSR_CDbgNode0Eap1_F_Action0,
    CSR_CDbgNode0Eap1_F_DestNode
};
assign CSR_CDbgNode1Eap0 = {
    CSR_CDbgNode1Eap0_F_Action3,
    CSR_CDbgNode1Eap0_F_Action2,
    CSR_CDbgNode1Eap0_F_Udf,
    CSR_CDbgNode1Eap0_F_EventType2,
    CSR_CDbgNode1Eap0_F_CustomAction1Enable,
    CSR_CDbgNode1Eap0_F_CustomAction0Enable,
    CSR_CDbgNode1Eap0_F_CustomAction1,
    CSR_CDbgNode1Eap0_F_CustomAction0,
    CSR_CDbgNode1Eap0_F_EventType1,
    CSR_CDbgNode1Eap0_F_EventType0,
    CSR_CDbgNode1Eap0_F_LogicalOp,
    CSR_CDbgNode1Eap0_F_Action1,
    CSR_CDbgNode1Eap0_F_Action0,
    CSR_CDbgNode1Eap0_F_DestNode
};
assign CSR_CDbgNode1Eap1 = {
    CSR_CDbgNode1Eap1_F_Action3,
    CSR_CDbgNode1Eap1_F_Action2,
    CSR_CDbgNode1Eap1_F_Udf,
    CSR_CDbgNode1Eap1_F_EventType2,
    CSR_CDbgNode1Eap1_F_CustomAction1Enable,
    CSR_CDbgNode1Eap1_F_CustomAction0Enable,
    CSR_CDbgNode1Eap1_F_CustomAction1,
    CSR_CDbgNode1Eap1_F_CustomAction0,
    CSR_CDbgNode1Eap1_F_EventType1,
    CSR_CDbgNode1Eap1_F_EventType0,
    CSR_CDbgNode1Eap1_F_LogicalOp,
    CSR_CDbgNode1Eap1_F_Action1,
    CSR_CDbgNode1Eap1_F_Action0,
    CSR_CDbgNode1Eap1_F_DestNode
};
assign CSR_CDbgNode2Eap0 = {
    CSR_CDbgNode2Eap0_F_Action3,
    CSR_CDbgNode2Eap0_F_Action2,
    CSR_CDbgNode2Eap0_F_Udf,
    CSR_CDbgNode2Eap0_F_EventType2,
    CSR_CDbgNode2Eap0_F_CustomAction1Enable,
    CSR_CDbgNode2Eap0_F_CustomAction0Enable,
    CSR_CDbgNode2Eap0_F_CustomAction1,
    CSR_CDbgNode2Eap0_F_CustomAction0,
    CSR_CDbgNode2Eap0_F_EventType1,
    CSR_CDbgNode2Eap0_F_EventType0,
    CSR_CDbgNode2Eap0_F_LogicalOp,
    CSR_CDbgNode2Eap0_F_Action1,
    CSR_CDbgNode2Eap0_F_Action0,
    CSR_CDbgNode2Eap0_F_DestNode
};
assign CSR_CDbgNode2Eap1 = {
    CSR_CDbgNode2Eap1_F_Action3,
    CSR_CDbgNode2Eap1_F_Action2,
    CSR_CDbgNode2Eap1_F_Udf,
    CSR_CDbgNode2Eap1_F_EventType2,
    CSR_CDbgNode2Eap1_F_CustomAction1Enable,
    CSR_CDbgNode2Eap1_F_CustomAction0Enable,
    CSR_CDbgNode2Eap1_F_CustomAction1,
    CSR_CDbgNode2Eap1_F_CustomAction0,
    CSR_CDbgNode2Eap1_F_EventType1,
    CSR_CDbgNode2Eap1_F_EventType0,
    CSR_CDbgNode2Eap1_F_LogicalOp,
    CSR_CDbgNode2Eap1_F_Action1,
    CSR_CDbgNode2Eap1_F_Action0,
    CSR_CDbgNode2Eap1_F_DestNode
};
assign CSR_CDbgNode3Eap0 = {
    CSR_CDbgNode3Eap0_F_Action3,
    CSR_CDbgNode3Eap0_F_Action2,
    CSR_CDbgNode3Eap0_F_Udf,
    CSR_CDbgNode3Eap0_F_EventType2,
    CSR_CDbgNode3Eap0_F_CustomAction1Enable,
    CSR_CDbgNode3Eap0_F_CustomAction0Enable,
    CSR_CDbgNode3Eap0_F_CustomAction1,
    CSR_CDbgNode3Eap0_F_CustomAction0,
    CSR_CDbgNode3Eap0_F_EventType1,
    CSR_CDbgNode3Eap0_F_EventType0,
    CSR_CDbgNode3Eap0_F_LogicalOp,
    CSR_CDbgNode3Eap0_F_Action1,
    CSR_CDbgNode3Eap0_F_Action0,
    CSR_CDbgNode3Eap0_F_DestNode
};
assign CSR_CDbgNode3Eap1 = {
    CSR_CDbgNode3Eap1_F_Action3,
    CSR_CDbgNode3Eap1_F_Action2,
    CSR_CDbgNode3Eap1_F_Udf,
    CSR_CDbgNode3Eap1_F_EventType2,
    CSR_CDbgNode3Eap1_F_CustomAction1Enable,
    CSR_CDbgNode3Eap1_F_CustomAction0Enable,
    CSR_CDbgNode3Eap1_F_CustomAction1,
    CSR_CDbgNode3Eap1_F_CustomAction0,
    CSR_CDbgNode3Eap1_F_EventType1,
    CSR_CDbgNode3Eap1_F_EventType0,
    CSR_CDbgNode3Eap1_F_LogicalOp,
    CSR_CDbgNode3Eap1_F_Action1,
    CSR_CDbgNode3Eap1_F_Action0,
    CSR_CDbgNode3Eap1_F_DestNode
};
assign CSR_CDbgSignalMask0 = {
    CSR_CDbgSignalMask0_F_Value
};
assign CSR_CDbgSignalMatch0 = {
    CSR_CDbgSignalMatch0_F_Value
};
assign CSR_CDbgSignalMask1 = {
    CSR_CDbgSignalMask1_F_Value
};
assign CSR_CDbgSignalMatch1 = {
    CSR_CDbgSignalMatch1_F_Value
};
assign CSR_CDbgSignalEdgeDetectCfg = {
    50'h0,
    CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1,
    CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select,
    CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0,
    CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select
};
assign CSR_CDbgEapStatus = {
    16'h0,
    CSR_CDbgEapStatus_F_Node3Eap3W2C,
    CSR_CDbgEapStatus_F_Node3Eap2W2C,
    CSR_CDbgEapStatus_F_Node3Eap1W2C,
    CSR_CDbgEapStatus_F_Node3Eap0W2C,
    CSR_CDbgEapStatus_F_Node2Eap3W2C,
    CSR_CDbgEapStatus_F_Node2Eap2W2C,
    CSR_CDbgEapStatus_F_Node2Eap1W2C,
    CSR_CDbgEapStatus_F_Node2Eap0W2C,
    CSR_CDbgEapStatus_F_Node1Eap3W2C,
    CSR_CDbgEapStatus_F_Node1Eap2W2C,
    CSR_CDbgEapStatus_F_Node1Eap1W2C,
    CSR_CDbgEapStatus_F_Node1Eap0W2C,
    CSR_CDbgEapStatus_F_Node0Eap3W2C,
    CSR_CDbgEapStatus_F_Node0Eap2W2C,
    CSR_CDbgEapStatus_F_Node0Eap1W2C,
    CSR_CDbgEapStatus_F_Node0Eap0W2C,
    CSR_CDbgEapStatus_F_Rsvd3116,
    CSR_CDbgEapStatus_F_Node3Eap3,
    CSR_CDbgEapStatus_F_Node3Eap2,
    CSR_CDbgEapStatus_F_Node3Eap1,
    CSR_CDbgEapStatus_F_Node3Eap0,
    CSR_CDbgEapStatus_F_Node2Eap3,
    CSR_CDbgEapStatus_F_Node2Eap2,
    CSR_CDbgEapStatus_F_Node2Eap1,
    CSR_CDbgEapStatus_F_Node2Eap0,
    CSR_CDbgEapStatus_F_Node1Eap3,
    CSR_CDbgEapStatus_F_Node1Eap2,
    CSR_CDbgEapStatus_F_Node1Eap1,
    CSR_CDbgEapStatus_F_Node1Eap0,
    CSR_CDbgEapStatus_F_Node0Eap3,
    CSR_CDbgEapStatus_F_Node0Eap2,
    CSR_CDbgEapStatus_F_Node0Eap1,
    CSR_CDbgEapStatus_F_Node0Eap0
};
assign CSR_CDbgClaCtrlStatus = {
    CSR_CDbgClaCtrlStatus_F_ClaLock,
    CSR_CDbgClaCtrlStatus_F_Rsvd6216,
    CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt,
    CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt,
    CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay,
    CSR_CDbgClaCtrlStatus_F_EnableCla,
    CSR_CDbgClaCtrlStatus_F_EnableEap,
    3'h0,
    CSR_CDbgClaCtrlStatus_F_CurrentNode
};
assign CSR_CDbgRsvd0 = {
    CSR_CDbgRsvd0_F_Value
};
assign CSR_CDbgRsvd1 = {
    CSR_CDbgRsvd1_F_Value
};
assign CSR_CDbgRsvd2 = {
    CSR_CDbgRsvd2_F_Value
};
assign CSR_CDbgTransitionMask = {
    CSR_CDbgTransitionMask_F_Value
};
assign CSR_CDbgTransitionFromValue = {
    CSR_CDbgTransitionFromValue_F_Value
};
assign CSR_CDbgTransitionToValue = {
    CSR_CDbgTransitionToValue_F_Value
};
assign CSR_CDbgOnesCountMask = {
    CSR_CDbgOnesCountMask_F_Value
};
assign CSR_CDbgOnesCountValue = {
    CSR_CDbgOnesCountValue_F_Value
};
assign CSR_CDbgAnyChange = {
    CSR_CDbgAnyChange_F_Mask
};
assign CSR_CDbgSignalSnapshotNode0Eap0 = {
    CSR_CDbgSignalSnapshotNode0Eap0_F_Value
};
assign CSR_CDbgSignalSnapshotNode0Eap1 = {
    CSR_CDbgSignalSnapshotNode0Eap1_F_Value
};
assign CSR_CDbgSignalSnapshotNode1Eap0 = {
    CSR_CDbgSignalSnapshotNode1Eap0_F_Value
};
assign CSR_CDbgSignalSnapshotNode1Eap1 = {
    CSR_CDbgSignalSnapshotNode1Eap1_F_Value
};
assign CSR_CDbgSignalSnapshotNode2Eap0 = {
    CSR_CDbgSignalSnapshotNode2Eap0_F_Value
};
assign CSR_CDbgSignalSnapshotNode2Eap1 = {
    CSR_CDbgSignalSnapshotNode2Eap1_F_Value
};
assign CSR_CDbgSignalSnapshotNode3Eap0 = {
    CSR_CDbgSignalSnapshotNode3Eap0_F_Value
};
assign CSR_CDbgSignalSnapshotNode3Eap1 = {
    CSR_CDbgSignalSnapshotNode3Eap1_F_Value
};
assign CSR_CDbgClaTimeMatch = {
    CSR_CDbgClaTimeMatch_F_TimeMatchVal
};
assign CSR_CDbgSignalMask2 = {
    CSR_CDbgSignalMask2_F_Value
};
assign CSR_CDbgSignalMatch2 = {
    CSR_CDbgSignalMatch2_F_Value
};
assign CSR_CDbgSignalMask3 = {
    CSR_CDbgSignalMask3_F_Value
};
assign CSR_CDbgSignalMatch3 = {
    CSR_CDbgSignalMatch3_F_Value
};
assign CSR_CDbgNode0Eap2 = {
    CSR_CDbgNode0Eap2_F_Action3,
    CSR_CDbgNode0Eap2_F_Action2,
    CSR_CDbgNode0Eap2_F_Udf,
    CSR_CDbgNode0Eap2_F_EventType2,
    CSR_CDbgNode0Eap2_F_CustomAction1Enable,
    CSR_CDbgNode0Eap2_F_CustomAction0Enable,
    CSR_CDbgNode0Eap2_F_CustomAction1,
    CSR_CDbgNode0Eap2_F_CustomAction0,
    CSR_CDbgNode0Eap2_F_EventType1,
    CSR_CDbgNode0Eap2_F_EventType0,
    CSR_CDbgNode0Eap2_F_LogicalOp,
    CSR_CDbgNode0Eap2_F_Action1,
    CSR_CDbgNode0Eap2_F_Action0,
    CSR_CDbgNode0Eap2_F_DestNode
};
assign CSR_CDbgNode0Eap3 = {
    CSR_CDbgNode0Eap3_F_Action3,
    CSR_CDbgNode0Eap3_F_Action2,
    CSR_CDbgNode0Eap3_F_Udf,
    CSR_CDbgNode0Eap3_F_EventType2,
    CSR_CDbgNode0Eap3_F_CustomAction1Enable,
    CSR_CDbgNode0Eap3_F_CustomAction0Enable,
    CSR_CDbgNode0Eap3_F_CustomAction1,
    CSR_CDbgNode0Eap3_F_CustomAction0,
    CSR_CDbgNode0Eap3_F_EventType1,
    CSR_CDbgNode0Eap3_F_EventType0,
    CSR_CDbgNode0Eap3_F_LogicalOp,
    CSR_CDbgNode0Eap3_F_Action1,
    CSR_CDbgNode0Eap3_F_Action0,
    CSR_CDbgNode0Eap3_F_DestNode
};
assign CSR_CDbgNode1Eap2 = {
    CSR_CDbgNode1Eap2_F_Action3,
    CSR_CDbgNode1Eap2_F_Action2,
    CSR_CDbgNode1Eap2_F_Udf,
    CSR_CDbgNode1Eap2_F_EventType2,
    CSR_CDbgNode1Eap2_F_CustomAction1Enable,
    CSR_CDbgNode1Eap2_F_CustomAction0Enable,
    CSR_CDbgNode1Eap2_F_CustomAction1,
    CSR_CDbgNode1Eap2_F_CustomAction0,
    CSR_CDbgNode1Eap2_F_EventType1,
    CSR_CDbgNode1Eap2_F_EventType0,
    CSR_CDbgNode1Eap2_F_LogicalOp,
    CSR_CDbgNode1Eap2_F_Action1,
    CSR_CDbgNode1Eap2_F_Action0,
    CSR_CDbgNode1Eap2_F_DestNode
};
assign CSR_CDbgNode1Eap3 = {
    CSR_CDbgNode1Eap3_F_Action3,
    CSR_CDbgNode1Eap3_F_Action2,
    CSR_CDbgNode1Eap3_F_Udf,
    CSR_CDbgNode1Eap3_F_EventType2,
    CSR_CDbgNode1Eap3_F_CustomAction1Enable,
    CSR_CDbgNode1Eap3_F_CustomAction0Enable,
    CSR_CDbgNode1Eap3_F_CustomAction1,
    CSR_CDbgNode1Eap3_F_CustomAction0,
    CSR_CDbgNode1Eap3_F_EventType1,
    CSR_CDbgNode1Eap3_F_EventType0,
    CSR_CDbgNode1Eap3_F_LogicalOp,
    CSR_CDbgNode1Eap3_F_Action1,
    CSR_CDbgNode1Eap3_F_Action0,
    CSR_CDbgNode1Eap3_F_DestNode
};
assign CSR_CDbgNode2Eap2 = {
    CSR_CDbgNode2Eap2_F_Action3,
    CSR_CDbgNode2Eap2_F_Action2,
    CSR_CDbgNode2Eap2_F_Udf,
    CSR_CDbgNode2Eap2_F_EventType2,
    CSR_CDbgNode2Eap2_F_CustomAction1Enable,
    CSR_CDbgNode2Eap2_F_CustomAction0Enable,
    CSR_CDbgNode2Eap2_F_CustomAction1,
    CSR_CDbgNode2Eap2_F_CustomAction0,
    CSR_CDbgNode2Eap2_F_EventType1,
    CSR_CDbgNode2Eap2_F_EventType0,
    CSR_CDbgNode2Eap2_F_LogicalOp,
    CSR_CDbgNode2Eap2_F_Action1,
    CSR_CDbgNode2Eap2_F_Action0,
    CSR_CDbgNode2Eap2_F_DestNode
};
assign CSR_CDbgNode2Eap3 = {
    CSR_CDbgNode2Eap3_F_Action3,
    CSR_CDbgNode2Eap3_F_Action2,
    CSR_CDbgNode2Eap3_F_Udf,
    CSR_CDbgNode2Eap3_F_EventType2,
    CSR_CDbgNode2Eap3_F_CustomAction1Enable,
    CSR_CDbgNode2Eap3_F_CustomAction0Enable,
    CSR_CDbgNode2Eap3_F_CustomAction1,
    CSR_CDbgNode2Eap3_F_CustomAction0,
    CSR_CDbgNode2Eap3_F_EventType1,
    CSR_CDbgNode2Eap3_F_EventType0,
    CSR_CDbgNode2Eap3_F_LogicalOp,
    CSR_CDbgNode2Eap3_F_Action1,
    CSR_CDbgNode2Eap3_F_Action0,
    CSR_CDbgNode2Eap3_F_DestNode
};
assign CSR_CDbgNode3Eap2 = {
    CSR_CDbgNode3Eap2_F_Action3,
    CSR_CDbgNode3Eap2_F_Action2,
    CSR_CDbgNode3Eap2_F_Udf,
    CSR_CDbgNode3Eap2_F_EventType2,
    CSR_CDbgNode3Eap2_F_CustomAction1Enable,
    CSR_CDbgNode3Eap2_F_CustomAction0Enable,
    CSR_CDbgNode3Eap2_F_CustomAction1,
    CSR_CDbgNode3Eap2_F_CustomAction0,
    CSR_CDbgNode3Eap2_F_EventType1,
    CSR_CDbgNode3Eap2_F_EventType0,
    CSR_CDbgNode3Eap2_F_LogicalOp,
    CSR_CDbgNode3Eap2_F_Action1,
    CSR_CDbgNode3Eap2_F_Action0,
    CSR_CDbgNode3Eap2_F_DestNode
};
assign CSR_CDbgNode3Eap3 = {
    CSR_CDbgNode3Eap3_F_Action3,
    CSR_CDbgNode3Eap3_F_Action2,
    CSR_CDbgNode3Eap3_F_Udf,
    CSR_CDbgNode3Eap3_F_EventType2,
    CSR_CDbgNode3Eap3_F_CustomAction1Enable,
    CSR_CDbgNode3Eap3_F_CustomAction0Enable,
    CSR_CDbgNode3Eap3_F_CustomAction1,
    CSR_CDbgNode3Eap3_F_CustomAction0,
    CSR_CDbgNode3Eap3_F_EventType1,
    CSR_CDbgNode3Eap3_F_EventType0,
    CSR_CDbgNode3Eap3_F_LogicalOp,
    CSR_CDbgNode3Eap3_F_Action1,
    CSR_CDbgNode3Eap3_F_Action0,
    CSR_CDbgNode3Eap3_F_DestNode
};
assign CSR_CDbgSignalSnapshotNode0Eap2 = {
    CSR_CDbgSignalSnapshotNode0Eap2_F_Value
};
assign CSR_CDbgSignalSnapshotNode0Eap3 = {
    CSR_CDbgSignalSnapshotNode0Eap3_F_Value
};
assign CSR_CDbgSignalSnapshotNode1Eap2 = {
    CSR_CDbgSignalSnapshotNode1Eap2_F_Value
};
assign CSR_CDbgSignalSnapshotNode1Eap3 = {
    CSR_CDbgSignalSnapshotNode1Eap3_F_Value
};
assign CSR_CDbgSignalSnapshotNode2Eap2 = {
    CSR_CDbgSignalSnapshotNode2Eap2_F_Value
};
assign CSR_CDbgSignalSnapshotNode2Eap3 = {
    CSR_CDbgSignalSnapshotNode2Eap3_F_Value
};
assign CSR_CDbgSignalSnapshotNode3Eap2 = {
    CSR_CDbgSignalSnapshotNode3Eap2_F_Value
};
assign CSR_CDbgSignalSnapshotNode3Eap3 = {
    CSR_CDbgSignalSnapshotNode3Eap3_F_Value
};
assign CSR_CDbgSignalDelayMuxSel = {
    CSR_CDbgSignalDelayMuxSel_F_Rsvd,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg7,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg6,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg5,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg4,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg3,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg2,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg1,
    CSR_CDbgSignalDelayMuxSel_F_Muxselseg0
};
assign CSR_CDbgClaTimestampsync = {
    CSR_CDbgClaTimestampsync_F_Timesyncmodeenable,
    CSR_CDbgClaTimestampsync_F_Timestamp
};
assign CSR_CDbgClaXtriggerTimestretch = {
    CSR_CDbgClaXtriggerTimestretch_F_Rsvd,
    CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch,
    CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch
};
assign CSR_CrScratchpad = {
    CSR_CrScratchpad_F_Data
};
assign CSR_Scratch = {
    CSR_Scratch_F_Data
};

// Register reads
always_comb begin
    reg_prehit  = '0;
    reg_rd_data = '0;
    unique case (reg_addr)
        ADDR_CSR_CDBGCLACOUNTER0CFG             : begin reg_prehit.CrCsrCdbgclacounter0CfgHit = 1'b1; reg_rd_data = {CSR_CDbgClaCounter0Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER1CFG             : begin reg_prehit.CrCsrCdbgclacounter1CfgHit = 1'b1; reg_rd_data = {CSR_CDbgClaCounter1Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER2CFG             : begin reg_prehit.CrCsrCdbgclacounter2CfgHit = 1'b1; reg_rd_data = {CSR_CDbgClaCounter2Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER3CFG             : begin reg_prehit.CrCsrCdbgclacounter3CfgHit = 1'b1; reg_rd_data = {CSR_CDbgClaCounter3Cfg}; end
        ADDR_CSR_CDBGNODE0EAP0                  : begin reg_prehit.CrCsrCdbgnode0Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgNode0Eap0}; end
        ADDR_CSR_CDBGNODE0EAP1                  : begin reg_prehit.CrCsrCdbgnode0Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgNode0Eap1}; end
        ADDR_CSR_CDBGNODE1EAP0                  : begin reg_prehit.CrCsrCdbgnode1Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgNode1Eap0}; end
        ADDR_CSR_CDBGNODE1EAP1                  : begin reg_prehit.CrCsrCdbgnode1Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgNode1Eap1}; end
        ADDR_CSR_CDBGNODE2EAP0                  : begin reg_prehit.CrCsrCdbgnode2Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgNode2Eap0}; end
        ADDR_CSR_CDBGNODE2EAP1                  : begin reg_prehit.CrCsrCdbgnode2Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgNode2Eap1}; end
        ADDR_CSR_CDBGNODE3EAP0                  : begin reg_prehit.CrCsrCdbgnode3Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgNode3Eap0}; end
        ADDR_CSR_CDBGNODE3EAP1                  : begin reg_prehit.CrCsrCdbgnode3Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgNode3Eap1}; end
        ADDR_CSR_CDBGSIGNALMASK0                : begin reg_prehit.CrCsrCdbgsignalmask0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMask0}; end
        ADDR_CSR_CDBGSIGNALMATCH0               : begin reg_prehit.CrCsrCdbgsignalmatch0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMatch0}; end
        ADDR_CSR_CDBGSIGNALMASK1                : begin reg_prehit.CrCsrCdbgsignalmask1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMask1}; end
        ADDR_CSR_CDBGSIGNALMATCH1               : begin reg_prehit.CrCsrCdbgsignalmatch1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMatch1}; end
        ADDR_CSR_CDBGSIGNALEDGEDETECTCFG        : begin reg_prehit.CrCsrCdbgsignaledgedetectcfgHit = 1'b1; reg_rd_data = {CSR_CDbgSignalEdgeDetectCfg}; end
        ADDR_CSR_CDBGEAPSTATUS                  : begin reg_prehit.CrCsrCdbgeapstatusHit = 1'b1; reg_rd_data = {CSR_CDbgEapStatus}; end
        ADDR_CSR_CDBGCLACTRLSTATUS              : begin reg_prehit.CrCsrCdbgclactrlstatusHit = 1'b1; reg_rd_data = {CSR_CDbgClaCtrlStatus}; end
        ADDR_CSR_CDBGRSVD0                      : begin reg_prehit.CrCsrCdbgrsvd0Hit = 1'b1; reg_rd_data = {CSR_CDbgRsvd0}; end
        ADDR_CSR_CDBGRSVD1                      : begin reg_prehit.CrCsrCdbgrsvd1Hit = 1'b1; reg_rd_data = {CSR_CDbgRsvd1}; end
        ADDR_CSR_CDBGRSVD2                      : begin reg_prehit.CrCsrCdbgrsvd2Hit = 1'b1; reg_rd_data = {CSR_CDbgRsvd2}; end
        ADDR_CSR_CDBGTRANSITIONMASK             : begin reg_prehit.CrCsrCdbgtransitionmaskHit = 1'b1; reg_rd_data = {CSR_CDbgTransitionMask}; end
        ADDR_CSR_CDBGTRANSITIONFROMVALUE        : begin reg_prehit.CrCsrCdbgtransitionfromvalueHit = 1'b1; reg_rd_data = {CSR_CDbgTransitionFromValue}; end
        ADDR_CSR_CDBGTRANSITIONTOVALUE          : begin reg_prehit.CrCsrCdbgtransitiontovalueHit = 1'b1; reg_rd_data = {CSR_CDbgTransitionToValue}; end
        ADDR_CSR_CDBGONESCOUNTMASK              : begin reg_prehit.CrCsrCdbgonescountmaskHit = 1'b1; reg_rd_data = {CSR_CDbgOnesCountMask}; end
        ADDR_CSR_CDBGONESCOUNTVALUE             : begin reg_prehit.CrCsrCdbgonescountvalueHit = 1'b1; reg_rd_data = {CSR_CDbgOnesCountValue}; end
        ADDR_CSR_CDBGANYCHANGE                  : begin reg_prehit.CrCsrCdbganychangeHit = 1'b1; reg_rd_data = {CSR_CDbgAnyChange}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP0    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode0Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode0Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP1    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode0Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode0Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP0    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode1Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode1Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP1    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode1Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode1Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP0    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode2Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode2Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP1    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode2Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode2Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP0    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode3Eap0Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode3Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP1    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode3Eap1Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode3Eap1}; end
        ADDR_CSR_CDBGCLATIMEMATCH               : begin reg_prehit.CrCsrCdbgclatimematchHit = 1'b1; reg_rd_data = {CSR_CDbgClaTimeMatch}; end
        ADDR_CSR_CDBGSIGNALMASK2                : begin reg_prehit.CrCsrCdbgsignalmask2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMask2}; end
        ADDR_CSR_CDBGSIGNALMATCH2               : begin reg_prehit.CrCsrCdbgsignalmatch2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMatch2}; end
        ADDR_CSR_CDBGSIGNALMASK3                : begin reg_prehit.CrCsrCdbgsignalmask3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMask3}; end
        ADDR_CSR_CDBGSIGNALMATCH3               : begin reg_prehit.CrCsrCdbgsignalmatch3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalMatch3}; end
        ADDR_CSR_CDBGNODE0EAP2                  : begin reg_prehit.CrCsrCdbgnode0Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgNode0Eap2}; end
        ADDR_CSR_CDBGNODE0EAP3                  : begin reg_prehit.CrCsrCdbgnode0Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgNode0Eap3}; end
        ADDR_CSR_CDBGNODE1EAP2                  : begin reg_prehit.CrCsrCdbgnode1Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgNode1Eap2}; end
        ADDR_CSR_CDBGNODE1EAP3                  : begin reg_prehit.CrCsrCdbgnode1Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgNode1Eap3}; end
        ADDR_CSR_CDBGNODE2EAP2                  : begin reg_prehit.CrCsrCdbgnode2Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgNode2Eap2}; end
        ADDR_CSR_CDBGNODE2EAP3                  : begin reg_prehit.CrCsrCdbgnode2Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgNode2Eap3}; end
        ADDR_CSR_CDBGNODE3EAP2                  : begin reg_prehit.CrCsrCdbgnode3Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgNode3Eap2}; end
        ADDR_CSR_CDBGNODE3EAP3                  : begin reg_prehit.CrCsrCdbgnode3Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgNode3Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP2    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode0Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode0Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP3    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode0Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode0Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP2    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode1Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode1Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP3    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode1Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode1Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP2    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode2Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode2Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP3    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode2Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode2Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP2    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode3Eap2Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode3Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP3    : begin reg_prehit.CrCsrCdbgsignalsnapshotnode3Eap3Hit = 1'b1; reg_rd_data = {CSR_CDbgSignalSnapshotNode3Eap3}; end
        ADDR_CSR_CDBGSIGNALDELAYMUXSEL          : begin reg_prehit.CrCsrCdbgsignaldelaymuxselHit = 1'b1; reg_rd_data = {CSR_CDbgSignalDelayMuxSel}; end
        ADDR_CSR_CDBGCLATIMESTAMPSYNC           : begin reg_prehit.CrCsrCdbgclatimestampsyncHit = 1'b1; reg_rd_data = {CSR_CDbgClaTimestampsync}; end
        ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH     : begin reg_prehit.CrCsrCdbgclaxtriggertimestretchHit = 1'b1; reg_rd_data = {CSR_CDbgClaXtriggerTimestretch}; end
        ADDR_CSR_CRSCRATCHPAD                   : begin reg_prehit.CrCsrCrscratchpadHit = 1'b1; reg_rd_data = {CSR_CrScratchpad}; end
        ADDR_CSR_SCRATCH                        : begin reg_prehit.CrCsrScratchHit = 1'b1; reg_rd_data = {CSR_Scratch}; end
        default:  begin
            reg_prehit  = '0;
            reg_rd_data = '0;
        end
    endcase
end

assign reg_hit = reg_read & |reg_prehit;

// Write broadcast
always_comb begin
    unique case (reg_addr_d1)
        ADDR_CSR_CDBGCLACOUNTER0CFG             : begin reg_rd_data_d1 = {CSR_CDbgClaCounter0Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER1CFG             : begin reg_rd_data_d1 = {CSR_CDbgClaCounter1Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER2CFG             : begin reg_rd_data_d1 = {CSR_CDbgClaCounter2Cfg}; end
        ADDR_CSR_CDBGCLACOUNTER3CFG             : begin reg_rd_data_d1 = {CSR_CDbgClaCounter3Cfg}; end
        ADDR_CSR_CDBGNODE0EAP0                  : begin reg_rd_data_d1 = {CSR_CDbgNode0Eap0}; end
        ADDR_CSR_CDBGNODE0EAP1                  : begin reg_rd_data_d1 = {CSR_CDbgNode0Eap1}; end
        ADDR_CSR_CDBGNODE1EAP0                  : begin reg_rd_data_d1 = {CSR_CDbgNode1Eap0}; end
        ADDR_CSR_CDBGNODE1EAP1                  : begin reg_rd_data_d1 = {CSR_CDbgNode1Eap1}; end
        ADDR_CSR_CDBGNODE2EAP0                  : begin reg_rd_data_d1 = {CSR_CDbgNode2Eap0}; end
        ADDR_CSR_CDBGNODE2EAP1                  : begin reg_rd_data_d1 = {CSR_CDbgNode2Eap1}; end
        ADDR_CSR_CDBGNODE3EAP0                  : begin reg_rd_data_d1 = {CSR_CDbgNode3Eap0}; end
        ADDR_CSR_CDBGNODE3EAP1                  : begin reg_rd_data_d1 = {CSR_CDbgNode3Eap1}; end
        ADDR_CSR_CDBGSIGNALMASK0                : begin reg_rd_data_d1 = {CSR_CDbgSignalMask0}; end
        ADDR_CSR_CDBGSIGNALMATCH0               : begin reg_rd_data_d1 = {CSR_CDbgSignalMatch0}; end
        ADDR_CSR_CDBGSIGNALMASK1                : begin reg_rd_data_d1 = {CSR_CDbgSignalMask1}; end
        ADDR_CSR_CDBGSIGNALMATCH1               : begin reg_rd_data_d1 = {CSR_CDbgSignalMatch1}; end
        ADDR_CSR_CDBGSIGNALEDGEDETECTCFG        : begin reg_rd_data_d1 = {CSR_CDbgSignalEdgeDetectCfg}; end
        ADDR_CSR_CDBGEAPSTATUS                  : begin reg_rd_data_d1 = {CSR_CDbgEapStatus}; end
        ADDR_CSR_CDBGCLACTRLSTATUS              : begin reg_rd_data_d1 = {CSR_CDbgClaCtrlStatus}; end
        ADDR_CSR_CDBGRSVD0                      : begin reg_rd_data_d1 = {CSR_CDbgRsvd0}; end
        ADDR_CSR_CDBGRSVD1                      : begin reg_rd_data_d1 = {CSR_CDbgRsvd1}; end
        ADDR_CSR_CDBGRSVD2                      : begin reg_rd_data_d1 = {CSR_CDbgRsvd2}; end
        ADDR_CSR_CDBGTRANSITIONMASK             : begin reg_rd_data_d1 = {CSR_CDbgTransitionMask}; end
        ADDR_CSR_CDBGTRANSITIONFROMVALUE        : begin reg_rd_data_d1 = {CSR_CDbgTransitionFromValue}; end
        ADDR_CSR_CDBGTRANSITIONTOVALUE          : begin reg_rd_data_d1 = {CSR_CDbgTransitionToValue}; end
        ADDR_CSR_CDBGONESCOUNTMASK              : begin reg_rd_data_d1 = {CSR_CDbgOnesCountMask}; end
        ADDR_CSR_CDBGONESCOUNTVALUE             : begin reg_rd_data_d1 = {CSR_CDbgOnesCountValue}; end
        ADDR_CSR_CDBGANYCHANGE                  : begin reg_rd_data_d1 = {CSR_CDbgAnyChange}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP0    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode0Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP1    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode0Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP0    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode1Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP1    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode1Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP0    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode2Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP1    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode2Eap1}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP0    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode3Eap0}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP1    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode3Eap1}; end
        ADDR_CSR_CDBGCLATIMEMATCH               : begin reg_rd_data_d1 = {CSR_CDbgClaTimeMatch}; end
        ADDR_CSR_CDBGSIGNALMASK2                : begin reg_rd_data_d1 = {CSR_CDbgSignalMask2}; end
        ADDR_CSR_CDBGSIGNALMATCH2               : begin reg_rd_data_d1 = {CSR_CDbgSignalMatch2}; end
        ADDR_CSR_CDBGSIGNALMASK3                : begin reg_rd_data_d1 = {CSR_CDbgSignalMask3}; end
        ADDR_CSR_CDBGSIGNALMATCH3               : begin reg_rd_data_d1 = {CSR_CDbgSignalMatch3}; end
        ADDR_CSR_CDBGNODE0EAP2                  : begin reg_rd_data_d1 = {CSR_CDbgNode0Eap2}; end
        ADDR_CSR_CDBGNODE0EAP3                  : begin reg_rd_data_d1 = {CSR_CDbgNode0Eap3}; end
        ADDR_CSR_CDBGNODE1EAP2                  : begin reg_rd_data_d1 = {CSR_CDbgNode1Eap2}; end
        ADDR_CSR_CDBGNODE1EAP3                  : begin reg_rd_data_d1 = {CSR_CDbgNode1Eap3}; end
        ADDR_CSR_CDBGNODE2EAP2                  : begin reg_rd_data_d1 = {CSR_CDbgNode2Eap2}; end
        ADDR_CSR_CDBGNODE2EAP3                  : begin reg_rd_data_d1 = {CSR_CDbgNode2Eap3}; end
        ADDR_CSR_CDBGNODE3EAP2                  : begin reg_rd_data_d1 = {CSR_CDbgNode3Eap2}; end
        ADDR_CSR_CDBGNODE3EAP3                  : begin reg_rd_data_d1 = {CSR_CDbgNode3Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP2    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode0Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE0EAP3    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode0Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP2    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode1Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE1EAP3    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode1Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP2    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode2Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE2EAP3    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode2Eap3}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP2    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode3Eap2}; end
        ADDR_CSR_CDBGSIGNALSNAPSHOTNODE3EAP3    : begin reg_rd_data_d1 = {CSR_CDbgSignalSnapshotNode3Eap3}; end
        ADDR_CSR_CDBGSIGNALDELAYMUXSEL          : begin reg_rd_data_d1 = {CSR_CDbgSignalDelayMuxSel}; end
        ADDR_CSR_CDBGCLATIMESTAMPSYNC           : begin reg_rd_data_d1 = {CSR_CDbgClaTimestampsync}; end
        ADDR_CSR_CDBGCLAXTRIGGERTIMESTRETCH     : begin reg_rd_data_d1 = {CSR_CDbgClaXtriggerTimestretch}; end
        ADDR_CSR_CRSCRATCHPAD                   : begin reg_rd_data_d1 = {CSR_CrScratchpad}; end
        ADDR_CSR_SCRATCH                        : begin reg_rd_data_d1 = {CSR_Scratch}; end
        default:  begin
            reg_rd_data_d1 = '0;
        end
    endcase
end

//------------------------------------------------------------------------------
// Outputs
//------------------------------------------------------------------------------

assign CsrWrReady = reg_wr_ready;

if (FLOP_RD_DATA) begin : flop_rd_data
    generic_dff #(.WIDTH(1) , .RESET_VALUE(0)) Csr_Hit_ff    (.out(CsrHit)   , .in(reg_hit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(CR_NUM_REGISTERS) , .RESET_VALUE(0)) Csr_Hit_List_ff    (.out(CsrHitList)   , .in(reg_prehit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(64), .RESET_VALUE(0)) Csr_RdData_ff (.out(CsrRdData), .in(reg_rd_data), .en(reg_cs), .clk(clk), .rst_n(reset_n));
end else begin
    assign CsrHit     = reg_hit;
    assign CsrHitList = reg_prehit;
    assign CsrRdData  = reg_rd_data;
end

assign CsrUpdateEn                              = reg_write_d1;
assign CsrUpdateAddr                            = reg_addr_d1;
assign CsrUpdateData                            = reg_rd_data_d1;

assign CrCsrCdbgclacounter0Cfg.Rsvd             = CSR_CDbgClaCounter0Cfg_F_Rsvd;
assign CrCsrCdbgclacounter0Cfg.UpperTarget      = CSR_CDbgClaCounter0Cfg_F_UpperTarget;
assign CrCsrCdbgclacounter0Cfg.UpperCounter     = CSR_CDbgClaCounter0Cfg_F_UpperCounter;
assign CrCsrCdbgclacounter0Cfg.ResetOnTarget    = CSR_CDbgClaCounter0Cfg_F_ResetOnTarget;
assign CrCsrCdbgclacounter0Cfg.Target           = CSR_CDbgClaCounter0Cfg_F_Target;
assign CrCsrCdbgclacounter0Cfg.Counter          = CSR_CDbgClaCounter0Cfg_F_Counter;
assign CrCsrCdbgclacounter1Cfg.Rsvd             = CSR_CDbgClaCounter1Cfg_F_Rsvd;
assign CrCsrCdbgclacounter1Cfg.UpperTarget      = CSR_CDbgClaCounter1Cfg_F_UpperTarget;
assign CrCsrCdbgclacounter1Cfg.UpperCounter     = CSR_CDbgClaCounter1Cfg_F_UpperCounter;
assign CrCsrCdbgclacounter1Cfg.ResetOnTarget    = CSR_CDbgClaCounter1Cfg_F_ResetOnTarget;
assign CrCsrCdbgclacounter1Cfg.Target           = CSR_CDbgClaCounter1Cfg_F_Target;
assign CrCsrCdbgclacounter1Cfg.Counter          = CSR_CDbgClaCounter1Cfg_F_Counter;
assign CrCsrCdbgclacounter2Cfg.Rsvd             = CSR_CDbgClaCounter2Cfg_F_Rsvd;
assign CrCsrCdbgclacounter2Cfg.UpperTarget      = CSR_CDbgClaCounter2Cfg_F_UpperTarget;
assign CrCsrCdbgclacounter2Cfg.UpperCounter     = CSR_CDbgClaCounter2Cfg_F_UpperCounter;
assign CrCsrCdbgclacounter2Cfg.ResetOnTarget    = CSR_CDbgClaCounter2Cfg_F_ResetOnTarget;
assign CrCsrCdbgclacounter2Cfg.Target           = CSR_CDbgClaCounter2Cfg_F_Target;
assign CrCsrCdbgclacounter2Cfg.Counter          = CSR_CDbgClaCounter2Cfg_F_Counter;
assign CrCsrCdbgclacounter3Cfg.Rsvd             = CSR_CDbgClaCounter3Cfg_F_Rsvd;
assign CrCsrCdbgclacounter3Cfg.UpperTarget      = CSR_CDbgClaCounter3Cfg_F_UpperTarget;
assign CrCsrCdbgclacounter3Cfg.UpperCounter     = CSR_CDbgClaCounter3Cfg_F_UpperCounter;
assign CrCsrCdbgclacounter3Cfg.ResetOnTarget    = CSR_CDbgClaCounter3Cfg_F_ResetOnTarget;
assign CrCsrCdbgclacounter3Cfg.Target           = CSR_CDbgClaCounter3Cfg_F_Target;
assign CrCsrCdbgclacounter3Cfg.Counter          = CSR_CDbgClaCounter3Cfg_F_Counter;
assign CrCsrCdbgnode0Eap0.Action3               = CSR_CDbgNode0Eap0_F_Action3;
assign CrCsrCdbgnode0Eap0.Action2               = CSR_CDbgNode0Eap0_F_Action2;
assign CrCsrCdbgnode0Eap0.Udf                   = CSR_CDbgNode0Eap0_F_Udf;
assign CrCsrCdbgnode0Eap0.EventType2            = CSR_CDbgNode0Eap0_F_EventType2;
assign CrCsrCdbgnode0Eap0.CustomAction1Enable   = CSR_CDbgNode0Eap0_F_CustomAction1Enable;
assign CrCsrCdbgnode0Eap0.CustomAction0Enable   = CSR_CDbgNode0Eap0_F_CustomAction0Enable;
assign CrCsrCdbgnode0Eap0.CustomAction1         = CSR_CDbgNode0Eap0_F_CustomAction1;
assign CrCsrCdbgnode0Eap0.CustomAction0         = CSR_CDbgNode0Eap0_F_CustomAction0;
assign CrCsrCdbgnode0Eap0.EventType1            = CSR_CDbgNode0Eap0_F_EventType1;
assign CrCsrCdbgnode0Eap0.EventType0            = CSR_CDbgNode0Eap0_F_EventType0;
assign CrCsrCdbgnode0Eap0.LogicalOp             = CSR_CDbgNode0Eap0_F_LogicalOp;
assign CrCsrCdbgnode0Eap0.Action1               = CSR_CDbgNode0Eap0_F_Action1;
assign CrCsrCdbgnode0Eap0.Action0               = CSR_CDbgNode0Eap0_F_Action0;
assign CrCsrCdbgnode0Eap0.DestNode              = CSR_CDbgNode0Eap0_F_DestNode;
assign CrCsrCdbgnode0Eap1.Action3               = CSR_CDbgNode0Eap1_F_Action3;
assign CrCsrCdbgnode0Eap1.Action2               = CSR_CDbgNode0Eap1_F_Action2;
assign CrCsrCdbgnode0Eap1.Udf                   = CSR_CDbgNode0Eap1_F_Udf;
assign CrCsrCdbgnode0Eap1.EventType2            = CSR_CDbgNode0Eap1_F_EventType2;
assign CrCsrCdbgnode0Eap1.CustomAction1Enable   = CSR_CDbgNode0Eap1_F_CustomAction1Enable;
assign CrCsrCdbgnode0Eap1.CustomAction0Enable   = CSR_CDbgNode0Eap1_F_CustomAction0Enable;
assign CrCsrCdbgnode0Eap1.CustomAction1         = CSR_CDbgNode0Eap1_F_CustomAction1;
assign CrCsrCdbgnode0Eap1.CustomAction0         = CSR_CDbgNode0Eap1_F_CustomAction0;
assign CrCsrCdbgnode0Eap1.EventType1            = CSR_CDbgNode0Eap1_F_EventType1;
assign CrCsrCdbgnode0Eap1.EventType0            = CSR_CDbgNode0Eap1_F_EventType0;
assign CrCsrCdbgnode0Eap1.LogicalOp             = CSR_CDbgNode0Eap1_F_LogicalOp;
assign CrCsrCdbgnode0Eap1.Action1               = CSR_CDbgNode0Eap1_F_Action1;
assign CrCsrCdbgnode0Eap1.Action0               = CSR_CDbgNode0Eap1_F_Action0;
assign CrCsrCdbgnode0Eap1.DestNode              = CSR_CDbgNode0Eap1_F_DestNode;
assign CrCsrCdbgnode1Eap0.Action3               = CSR_CDbgNode1Eap0_F_Action3;
assign CrCsrCdbgnode1Eap0.Action2               = CSR_CDbgNode1Eap0_F_Action2;
assign CrCsrCdbgnode1Eap0.Udf                   = CSR_CDbgNode1Eap0_F_Udf;
assign CrCsrCdbgnode1Eap0.EventType2            = CSR_CDbgNode1Eap0_F_EventType2;
assign CrCsrCdbgnode1Eap0.CustomAction1Enable   = CSR_CDbgNode1Eap0_F_CustomAction1Enable;
assign CrCsrCdbgnode1Eap0.CustomAction0Enable   = CSR_CDbgNode1Eap0_F_CustomAction0Enable;
assign CrCsrCdbgnode1Eap0.CustomAction1         = CSR_CDbgNode1Eap0_F_CustomAction1;
assign CrCsrCdbgnode1Eap0.CustomAction0         = CSR_CDbgNode1Eap0_F_CustomAction0;
assign CrCsrCdbgnode1Eap0.EventType1            = CSR_CDbgNode1Eap0_F_EventType1;
assign CrCsrCdbgnode1Eap0.EventType0            = CSR_CDbgNode1Eap0_F_EventType0;
assign CrCsrCdbgnode1Eap0.LogicalOp             = CSR_CDbgNode1Eap0_F_LogicalOp;
assign CrCsrCdbgnode1Eap0.Action1               = CSR_CDbgNode1Eap0_F_Action1;
assign CrCsrCdbgnode1Eap0.Action0               = CSR_CDbgNode1Eap0_F_Action0;
assign CrCsrCdbgnode1Eap0.DestNode              = CSR_CDbgNode1Eap0_F_DestNode;
assign CrCsrCdbgnode1Eap1.Action3               = CSR_CDbgNode1Eap1_F_Action3;
assign CrCsrCdbgnode1Eap1.Action2               = CSR_CDbgNode1Eap1_F_Action2;
assign CrCsrCdbgnode1Eap1.Udf                   = CSR_CDbgNode1Eap1_F_Udf;
assign CrCsrCdbgnode1Eap1.EventType2            = CSR_CDbgNode1Eap1_F_EventType2;
assign CrCsrCdbgnode1Eap1.CustomAction1Enable   = CSR_CDbgNode1Eap1_F_CustomAction1Enable;
assign CrCsrCdbgnode1Eap1.CustomAction0Enable   = CSR_CDbgNode1Eap1_F_CustomAction0Enable;
assign CrCsrCdbgnode1Eap1.CustomAction1         = CSR_CDbgNode1Eap1_F_CustomAction1;
assign CrCsrCdbgnode1Eap1.CustomAction0         = CSR_CDbgNode1Eap1_F_CustomAction0;
assign CrCsrCdbgnode1Eap1.EventType1            = CSR_CDbgNode1Eap1_F_EventType1;
assign CrCsrCdbgnode1Eap1.EventType0            = CSR_CDbgNode1Eap1_F_EventType0;
assign CrCsrCdbgnode1Eap1.LogicalOp             = CSR_CDbgNode1Eap1_F_LogicalOp;
assign CrCsrCdbgnode1Eap1.Action1               = CSR_CDbgNode1Eap1_F_Action1;
assign CrCsrCdbgnode1Eap1.Action0               = CSR_CDbgNode1Eap1_F_Action0;
assign CrCsrCdbgnode1Eap1.DestNode              = CSR_CDbgNode1Eap1_F_DestNode;
assign CrCsrCdbgnode2Eap0.Action3               = CSR_CDbgNode2Eap0_F_Action3;
assign CrCsrCdbgnode2Eap0.Action2               = CSR_CDbgNode2Eap0_F_Action2;
assign CrCsrCdbgnode2Eap0.Udf                   = CSR_CDbgNode2Eap0_F_Udf;
assign CrCsrCdbgnode2Eap0.EventType2            = CSR_CDbgNode2Eap0_F_EventType2;
assign CrCsrCdbgnode2Eap0.CustomAction1Enable   = CSR_CDbgNode2Eap0_F_CustomAction1Enable;
assign CrCsrCdbgnode2Eap0.CustomAction0Enable   = CSR_CDbgNode2Eap0_F_CustomAction0Enable;
assign CrCsrCdbgnode2Eap0.CustomAction1         = CSR_CDbgNode2Eap0_F_CustomAction1;
assign CrCsrCdbgnode2Eap0.CustomAction0         = CSR_CDbgNode2Eap0_F_CustomAction0;
assign CrCsrCdbgnode2Eap0.EventType1            = CSR_CDbgNode2Eap0_F_EventType1;
assign CrCsrCdbgnode2Eap0.EventType0            = CSR_CDbgNode2Eap0_F_EventType0;
assign CrCsrCdbgnode2Eap0.LogicalOp             = CSR_CDbgNode2Eap0_F_LogicalOp;
assign CrCsrCdbgnode2Eap0.Action1               = CSR_CDbgNode2Eap0_F_Action1;
assign CrCsrCdbgnode2Eap0.Action0               = CSR_CDbgNode2Eap0_F_Action0;
assign CrCsrCdbgnode2Eap0.DestNode              = CSR_CDbgNode2Eap0_F_DestNode;
assign CrCsrCdbgnode2Eap1.Action3               = CSR_CDbgNode2Eap1_F_Action3;
assign CrCsrCdbgnode2Eap1.Action2               = CSR_CDbgNode2Eap1_F_Action2;
assign CrCsrCdbgnode2Eap1.Udf                   = CSR_CDbgNode2Eap1_F_Udf;
assign CrCsrCdbgnode2Eap1.EventType2            = CSR_CDbgNode2Eap1_F_EventType2;
assign CrCsrCdbgnode2Eap1.CustomAction1Enable   = CSR_CDbgNode2Eap1_F_CustomAction1Enable;
assign CrCsrCdbgnode2Eap1.CustomAction0Enable   = CSR_CDbgNode2Eap1_F_CustomAction0Enable;
assign CrCsrCdbgnode2Eap1.CustomAction1         = CSR_CDbgNode2Eap1_F_CustomAction1;
assign CrCsrCdbgnode2Eap1.CustomAction0         = CSR_CDbgNode2Eap1_F_CustomAction0;
assign CrCsrCdbgnode2Eap1.EventType1            = CSR_CDbgNode2Eap1_F_EventType1;
assign CrCsrCdbgnode2Eap1.EventType0            = CSR_CDbgNode2Eap1_F_EventType0;
assign CrCsrCdbgnode2Eap1.LogicalOp             = CSR_CDbgNode2Eap1_F_LogicalOp;
assign CrCsrCdbgnode2Eap1.Action1               = CSR_CDbgNode2Eap1_F_Action1;
assign CrCsrCdbgnode2Eap1.Action0               = CSR_CDbgNode2Eap1_F_Action0;
assign CrCsrCdbgnode2Eap1.DestNode              = CSR_CDbgNode2Eap1_F_DestNode;
assign CrCsrCdbgnode3Eap0.Action3               = CSR_CDbgNode3Eap0_F_Action3;
assign CrCsrCdbgnode3Eap0.Action2               = CSR_CDbgNode3Eap0_F_Action2;
assign CrCsrCdbgnode3Eap0.Udf                   = CSR_CDbgNode3Eap0_F_Udf;
assign CrCsrCdbgnode3Eap0.EventType2            = CSR_CDbgNode3Eap0_F_EventType2;
assign CrCsrCdbgnode3Eap0.CustomAction1Enable   = CSR_CDbgNode3Eap0_F_CustomAction1Enable;
assign CrCsrCdbgnode3Eap0.CustomAction0Enable   = CSR_CDbgNode3Eap0_F_CustomAction0Enable;
assign CrCsrCdbgnode3Eap0.CustomAction1         = CSR_CDbgNode3Eap0_F_CustomAction1;
assign CrCsrCdbgnode3Eap0.CustomAction0         = CSR_CDbgNode3Eap0_F_CustomAction0;
assign CrCsrCdbgnode3Eap0.EventType1            = CSR_CDbgNode3Eap0_F_EventType1;
assign CrCsrCdbgnode3Eap0.EventType0            = CSR_CDbgNode3Eap0_F_EventType0;
assign CrCsrCdbgnode3Eap0.LogicalOp             = CSR_CDbgNode3Eap0_F_LogicalOp;
assign CrCsrCdbgnode3Eap0.Action1               = CSR_CDbgNode3Eap0_F_Action1;
assign CrCsrCdbgnode3Eap0.Action0               = CSR_CDbgNode3Eap0_F_Action0;
assign CrCsrCdbgnode3Eap0.DestNode              = CSR_CDbgNode3Eap0_F_DestNode;
assign CrCsrCdbgnode3Eap1.Action3               = CSR_CDbgNode3Eap1_F_Action3;
assign CrCsrCdbgnode3Eap1.Action2               = CSR_CDbgNode3Eap1_F_Action2;
assign CrCsrCdbgnode3Eap1.Udf                   = CSR_CDbgNode3Eap1_F_Udf;
assign CrCsrCdbgnode3Eap1.EventType2            = CSR_CDbgNode3Eap1_F_EventType2;
assign CrCsrCdbgnode3Eap1.CustomAction1Enable   = CSR_CDbgNode3Eap1_F_CustomAction1Enable;
assign CrCsrCdbgnode3Eap1.CustomAction0Enable   = CSR_CDbgNode3Eap1_F_CustomAction0Enable;
assign CrCsrCdbgnode3Eap1.CustomAction1         = CSR_CDbgNode3Eap1_F_CustomAction1;
assign CrCsrCdbgnode3Eap1.CustomAction0         = CSR_CDbgNode3Eap1_F_CustomAction0;
assign CrCsrCdbgnode3Eap1.EventType1            = CSR_CDbgNode3Eap1_F_EventType1;
assign CrCsrCdbgnode3Eap1.EventType0            = CSR_CDbgNode3Eap1_F_EventType0;
assign CrCsrCdbgnode3Eap1.LogicalOp             = CSR_CDbgNode3Eap1_F_LogicalOp;
assign CrCsrCdbgnode3Eap1.Action1               = CSR_CDbgNode3Eap1_F_Action1;
assign CrCsrCdbgnode3Eap1.Action0               = CSR_CDbgNode3Eap1_F_Action0;
assign CrCsrCdbgnode3Eap1.DestNode              = CSR_CDbgNode3Eap1_F_DestNode;
assign CrCsrCdbgsignalmask0.Value               = CSR_CDbgSignalMask0_F_Value;
assign CrCsrCdbgsignalmatch0.Value              = CSR_CDbgSignalMatch0_F_Value;
assign CrCsrCdbgsignalmask1.Value               = CSR_CDbgSignalMask1_F_Value;
assign CrCsrCdbgsignalmatch1.Value              = CSR_CDbgSignalMatch1_F_Value;
assign CrCsrCdbgsignaledgedetectcfg.PosEdgeSignal1 = CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal1;
assign CrCsrCdbgsignaledgedetectcfg.Signal1Select = CSR_CDbgSignalEdgeDetectCfg_F_Signal1Select;
assign CrCsrCdbgsignaledgedetectcfg.PosEdgeSignal0 = CSR_CDbgSignalEdgeDetectCfg_F_PosEdgeSignal0;
assign CrCsrCdbgsignaledgedetectcfg.Signal0Select = CSR_CDbgSignalEdgeDetectCfg_F_Signal0Select;
assign CrCsrCdbgeapstatus.Node3Eap3W2C          = CSR_CDbgEapStatus_F_Node3Eap3W2C;
assign CrCsrCdbgeapstatus.Node3Eap2W2C          = CSR_CDbgEapStatus_F_Node3Eap2W2C;
assign CrCsrCdbgeapstatus.Node3Eap1W2C          = CSR_CDbgEapStatus_F_Node3Eap1W2C;
assign CrCsrCdbgeapstatus.Node3Eap0W2C          = CSR_CDbgEapStatus_F_Node3Eap0W2C;
assign CrCsrCdbgeapstatus.Node2Eap3W2C          = CSR_CDbgEapStatus_F_Node2Eap3W2C;
assign CrCsrCdbgeapstatus.Node2Eap2W2C          = CSR_CDbgEapStatus_F_Node2Eap2W2C;
assign CrCsrCdbgeapstatus.Node2Eap1W2C          = CSR_CDbgEapStatus_F_Node2Eap1W2C;
assign CrCsrCdbgeapstatus.Node2Eap0W2C          = CSR_CDbgEapStatus_F_Node2Eap0W2C;
assign CrCsrCdbgeapstatus.Node1Eap3W2C          = CSR_CDbgEapStatus_F_Node1Eap3W2C;
assign CrCsrCdbgeapstatus.Node1Eap2W2C          = CSR_CDbgEapStatus_F_Node1Eap2W2C;
assign CrCsrCdbgeapstatus.Node1Eap1W2C          = CSR_CDbgEapStatus_F_Node1Eap1W2C;
assign CrCsrCdbgeapstatus.Node1Eap0W2C          = CSR_CDbgEapStatus_F_Node1Eap0W2C;
assign CrCsrCdbgeapstatus.Node0Eap3W2C          = CSR_CDbgEapStatus_F_Node0Eap3W2C;
assign CrCsrCdbgeapstatus.Node0Eap2W2C          = CSR_CDbgEapStatus_F_Node0Eap2W2C;
assign CrCsrCdbgeapstatus.Node0Eap1W2C          = CSR_CDbgEapStatus_F_Node0Eap1W2C;
assign CrCsrCdbgeapstatus.Node0Eap0W2C          = CSR_CDbgEapStatus_F_Node0Eap0W2C;
assign CrCsrCdbgeapstatus.Rsvd3116              = CSR_CDbgEapStatus_F_Rsvd3116;
assign CrCsrCdbgeapstatus.Node3Eap3             = CSR_CDbgEapStatus_F_Node3Eap3;
assign CrCsrCdbgeapstatus.Node3Eap2             = CSR_CDbgEapStatus_F_Node3Eap2;
assign CrCsrCdbgeapstatus.Node3Eap1             = CSR_CDbgEapStatus_F_Node3Eap1;
assign CrCsrCdbgeapstatus.Node3Eap0             = CSR_CDbgEapStatus_F_Node3Eap0;
assign CrCsrCdbgeapstatus.Node2Eap3             = CSR_CDbgEapStatus_F_Node2Eap3;
assign CrCsrCdbgeapstatus.Node2Eap2             = CSR_CDbgEapStatus_F_Node2Eap2;
assign CrCsrCdbgeapstatus.Node2Eap1             = CSR_CDbgEapStatus_F_Node2Eap1;
assign CrCsrCdbgeapstatus.Node2Eap0             = CSR_CDbgEapStatus_F_Node2Eap0;
assign CrCsrCdbgeapstatus.Node1Eap3             = CSR_CDbgEapStatus_F_Node1Eap3;
assign CrCsrCdbgeapstatus.Node1Eap2             = CSR_CDbgEapStatus_F_Node1Eap2;
assign CrCsrCdbgeapstatus.Node1Eap1             = CSR_CDbgEapStatus_F_Node1Eap1;
assign CrCsrCdbgeapstatus.Node1Eap0             = CSR_CDbgEapStatus_F_Node1Eap0;
assign CrCsrCdbgeapstatus.Node0Eap3             = CSR_CDbgEapStatus_F_Node0Eap3;
assign CrCsrCdbgeapstatus.Node0Eap2             = CSR_CDbgEapStatus_F_Node0Eap2;
assign CrCsrCdbgeapstatus.Node0Eap1             = CSR_CDbgEapStatus_F_Node0Eap1;
assign CrCsrCdbgeapstatus.Node0Eap0             = CSR_CDbgEapStatus_F_Node0Eap0;
assign CrCsrCdbgclactrlstatus.ClaLock           = CSR_CDbgClaCtrlStatus_F_ClaLock;
assign CrCsrCdbgclactrlstatus.Rsvd6216          = CSR_CDbgClaCtrlStatus_F_Rsvd6216;
assign CrCsrCdbgclactrlstatus.DisableLocalClockHalt = CSR_CDbgClaCtrlStatus_F_DisableLocalClockHalt;
assign CrCsrCdbgclactrlstatus.DisableGlobalClockHalt = CSR_CDbgClaCtrlStatus_F_DisableGlobalClockHalt;
assign CrCsrCdbgclactrlstatus.ClaChainLoopDelay = CSR_CDbgClaCtrlStatus_F_ClaChainLoopDelay;
assign CrCsrCdbgclactrlstatus.EnableCla         = CSR_CDbgClaCtrlStatus_F_EnableCla;
assign CrCsrCdbgclactrlstatus.EnableEap         = CSR_CDbgClaCtrlStatus_F_EnableEap;
assign CrCsrCdbgclactrlstatus.CurrentNode       = CSR_CDbgClaCtrlStatus_F_CurrentNode;
assign CrCsrCdbgrsvd0.Value                     = CSR_CDbgRsvd0_F_Value;
assign CrCsrCdbgrsvd1.Value                     = CSR_CDbgRsvd1_F_Value;
assign CrCsrCdbgrsvd2.Value                     = CSR_CDbgRsvd2_F_Value;
assign CrCsrCdbgtransitionmask.Value            = CSR_CDbgTransitionMask_F_Value;
assign CrCsrCdbgtransitionfromvalue.Value       = CSR_CDbgTransitionFromValue_F_Value;
assign CrCsrCdbgtransitiontovalue.Value         = CSR_CDbgTransitionToValue_F_Value;
assign CrCsrCdbgonescountmask.Value             = CSR_CDbgOnesCountMask_F_Value;
assign CrCsrCdbgonescountvalue.Value            = CSR_CDbgOnesCountValue_F_Value;
assign CrCsrCdbganychange.Mask                  = CSR_CDbgAnyChange_F_Mask;
assign CrCsrCdbgsignalsnapshotnode0Eap0.Value   = CSR_CDbgSignalSnapshotNode0Eap0_F_Value;
assign CrCsrCdbgsignalsnapshotnode0Eap1.Value   = CSR_CDbgSignalSnapshotNode0Eap1_F_Value;
assign CrCsrCdbgsignalsnapshotnode1Eap0.Value   = CSR_CDbgSignalSnapshotNode1Eap0_F_Value;
assign CrCsrCdbgsignalsnapshotnode1Eap1.Value   = CSR_CDbgSignalSnapshotNode1Eap1_F_Value;
assign CrCsrCdbgsignalsnapshotnode2Eap0.Value   = CSR_CDbgSignalSnapshotNode2Eap0_F_Value;
assign CrCsrCdbgsignalsnapshotnode2Eap1.Value   = CSR_CDbgSignalSnapshotNode2Eap1_F_Value;
assign CrCsrCdbgsignalsnapshotnode3Eap0.Value   = CSR_CDbgSignalSnapshotNode3Eap0_F_Value;
assign CrCsrCdbgsignalsnapshotnode3Eap1.Value   = CSR_CDbgSignalSnapshotNode3Eap1_F_Value;
assign CrCsrCdbgclatimematch.TimeMatchVal       = CSR_CDbgClaTimeMatch_F_TimeMatchVal;
assign CrCsrCdbgsignalmask2.Value               = CSR_CDbgSignalMask2_F_Value;
assign CrCsrCdbgsignalmatch2.Value              = CSR_CDbgSignalMatch2_F_Value;
assign CrCsrCdbgsignalmask3.Value               = CSR_CDbgSignalMask3_F_Value;
assign CrCsrCdbgsignalmatch3.Value              = CSR_CDbgSignalMatch3_F_Value;
assign CrCsrCdbgnode0Eap2.Action3               = CSR_CDbgNode0Eap2_F_Action3;
assign CrCsrCdbgnode0Eap2.Action2               = CSR_CDbgNode0Eap2_F_Action2;
assign CrCsrCdbgnode0Eap2.Udf                   = CSR_CDbgNode0Eap2_F_Udf;
assign CrCsrCdbgnode0Eap2.EventType2            = CSR_CDbgNode0Eap2_F_EventType2;
assign CrCsrCdbgnode0Eap2.CustomAction1Enable   = CSR_CDbgNode0Eap2_F_CustomAction1Enable;
assign CrCsrCdbgnode0Eap2.CustomAction0Enable   = CSR_CDbgNode0Eap2_F_CustomAction0Enable;
assign CrCsrCdbgnode0Eap2.CustomAction1         = CSR_CDbgNode0Eap2_F_CustomAction1;
assign CrCsrCdbgnode0Eap2.CustomAction0         = CSR_CDbgNode0Eap2_F_CustomAction0;
assign CrCsrCdbgnode0Eap2.EventType1            = CSR_CDbgNode0Eap2_F_EventType1;
assign CrCsrCdbgnode0Eap2.EventType0            = CSR_CDbgNode0Eap2_F_EventType0;
assign CrCsrCdbgnode0Eap2.LogicalOp             = CSR_CDbgNode0Eap2_F_LogicalOp;
assign CrCsrCdbgnode0Eap2.Action1               = CSR_CDbgNode0Eap2_F_Action1;
assign CrCsrCdbgnode0Eap2.Action0               = CSR_CDbgNode0Eap2_F_Action0;
assign CrCsrCdbgnode0Eap2.DestNode              = CSR_CDbgNode0Eap2_F_DestNode;
assign CrCsrCdbgnode0Eap3.Action3               = CSR_CDbgNode0Eap3_F_Action3;
assign CrCsrCdbgnode0Eap3.Action2               = CSR_CDbgNode0Eap3_F_Action2;
assign CrCsrCdbgnode0Eap3.Udf                   = CSR_CDbgNode0Eap3_F_Udf;
assign CrCsrCdbgnode0Eap3.EventType2            = CSR_CDbgNode0Eap3_F_EventType2;
assign CrCsrCdbgnode0Eap3.CustomAction1Enable   = CSR_CDbgNode0Eap3_F_CustomAction1Enable;
assign CrCsrCdbgnode0Eap3.CustomAction0Enable   = CSR_CDbgNode0Eap3_F_CustomAction0Enable;
assign CrCsrCdbgnode0Eap3.CustomAction1         = CSR_CDbgNode0Eap3_F_CustomAction1;
assign CrCsrCdbgnode0Eap3.CustomAction0         = CSR_CDbgNode0Eap3_F_CustomAction0;
assign CrCsrCdbgnode0Eap3.EventType1            = CSR_CDbgNode0Eap3_F_EventType1;
assign CrCsrCdbgnode0Eap3.EventType0            = CSR_CDbgNode0Eap3_F_EventType0;
assign CrCsrCdbgnode0Eap3.LogicalOp             = CSR_CDbgNode0Eap3_F_LogicalOp;
assign CrCsrCdbgnode0Eap3.Action1               = CSR_CDbgNode0Eap3_F_Action1;
assign CrCsrCdbgnode0Eap3.Action0               = CSR_CDbgNode0Eap3_F_Action0;
assign CrCsrCdbgnode0Eap3.DestNode              = CSR_CDbgNode0Eap3_F_DestNode;
assign CrCsrCdbgnode1Eap2.Action3               = CSR_CDbgNode1Eap2_F_Action3;
assign CrCsrCdbgnode1Eap2.Action2               = CSR_CDbgNode1Eap2_F_Action2;
assign CrCsrCdbgnode1Eap2.Udf                   = CSR_CDbgNode1Eap2_F_Udf;
assign CrCsrCdbgnode1Eap2.EventType2            = CSR_CDbgNode1Eap2_F_EventType2;
assign CrCsrCdbgnode1Eap2.CustomAction1Enable   = CSR_CDbgNode1Eap2_F_CustomAction1Enable;
assign CrCsrCdbgnode1Eap2.CustomAction0Enable   = CSR_CDbgNode1Eap2_F_CustomAction0Enable;
assign CrCsrCdbgnode1Eap2.CustomAction1         = CSR_CDbgNode1Eap2_F_CustomAction1;
assign CrCsrCdbgnode1Eap2.CustomAction0         = CSR_CDbgNode1Eap2_F_CustomAction0;
assign CrCsrCdbgnode1Eap2.EventType1            = CSR_CDbgNode1Eap2_F_EventType1;
assign CrCsrCdbgnode1Eap2.EventType0            = CSR_CDbgNode1Eap2_F_EventType0;
assign CrCsrCdbgnode1Eap2.LogicalOp             = CSR_CDbgNode1Eap2_F_LogicalOp;
assign CrCsrCdbgnode1Eap2.Action1               = CSR_CDbgNode1Eap2_F_Action1;
assign CrCsrCdbgnode1Eap2.Action0               = CSR_CDbgNode1Eap2_F_Action0;
assign CrCsrCdbgnode1Eap2.DestNode              = CSR_CDbgNode1Eap2_F_DestNode;
assign CrCsrCdbgnode1Eap3.Action3               = CSR_CDbgNode1Eap3_F_Action3;
assign CrCsrCdbgnode1Eap3.Action2               = CSR_CDbgNode1Eap3_F_Action2;
assign CrCsrCdbgnode1Eap3.Udf                   = CSR_CDbgNode1Eap3_F_Udf;
assign CrCsrCdbgnode1Eap3.EventType2            = CSR_CDbgNode1Eap3_F_EventType2;
assign CrCsrCdbgnode1Eap3.CustomAction1Enable   = CSR_CDbgNode1Eap3_F_CustomAction1Enable;
assign CrCsrCdbgnode1Eap3.CustomAction0Enable   = CSR_CDbgNode1Eap3_F_CustomAction0Enable;
assign CrCsrCdbgnode1Eap3.CustomAction1         = CSR_CDbgNode1Eap3_F_CustomAction1;
assign CrCsrCdbgnode1Eap3.CustomAction0         = CSR_CDbgNode1Eap3_F_CustomAction0;
assign CrCsrCdbgnode1Eap3.EventType1            = CSR_CDbgNode1Eap3_F_EventType1;
assign CrCsrCdbgnode1Eap3.EventType0            = CSR_CDbgNode1Eap3_F_EventType0;
assign CrCsrCdbgnode1Eap3.LogicalOp             = CSR_CDbgNode1Eap3_F_LogicalOp;
assign CrCsrCdbgnode1Eap3.Action1               = CSR_CDbgNode1Eap3_F_Action1;
assign CrCsrCdbgnode1Eap3.Action0               = CSR_CDbgNode1Eap3_F_Action0;
assign CrCsrCdbgnode1Eap3.DestNode              = CSR_CDbgNode1Eap3_F_DestNode;
assign CrCsrCdbgnode2Eap2.Action3               = CSR_CDbgNode2Eap2_F_Action3;
assign CrCsrCdbgnode2Eap2.Action2               = CSR_CDbgNode2Eap2_F_Action2;
assign CrCsrCdbgnode2Eap2.Udf                   = CSR_CDbgNode2Eap2_F_Udf;
assign CrCsrCdbgnode2Eap2.EventType2            = CSR_CDbgNode2Eap2_F_EventType2;
assign CrCsrCdbgnode2Eap2.CustomAction1Enable   = CSR_CDbgNode2Eap2_F_CustomAction1Enable;
assign CrCsrCdbgnode2Eap2.CustomAction0Enable   = CSR_CDbgNode2Eap2_F_CustomAction0Enable;
assign CrCsrCdbgnode2Eap2.CustomAction1         = CSR_CDbgNode2Eap2_F_CustomAction1;
assign CrCsrCdbgnode2Eap2.CustomAction0         = CSR_CDbgNode2Eap2_F_CustomAction0;
assign CrCsrCdbgnode2Eap2.EventType1            = CSR_CDbgNode2Eap2_F_EventType1;
assign CrCsrCdbgnode2Eap2.EventType0            = CSR_CDbgNode2Eap2_F_EventType0;
assign CrCsrCdbgnode2Eap2.LogicalOp             = CSR_CDbgNode2Eap2_F_LogicalOp;
assign CrCsrCdbgnode2Eap2.Action1               = CSR_CDbgNode2Eap2_F_Action1;
assign CrCsrCdbgnode2Eap2.Action0               = CSR_CDbgNode2Eap2_F_Action0;
assign CrCsrCdbgnode2Eap2.DestNode              = CSR_CDbgNode2Eap2_F_DestNode;
assign CrCsrCdbgnode2Eap3.Action3               = CSR_CDbgNode2Eap3_F_Action3;
assign CrCsrCdbgnode2Eap3.Action2               = CSR_CDbgNode2Eap3_F_Action2;
assign CrCsrCdbgnode2Eap3.Udf                   = CSR_CDbgNode2Eap3_F_Udf;
assign CrCsrCdbgnode2Eap3.EventType2            = CSR_CDbgNode2Eap3_F_EventType2;
assign CrCsrCdbgnode2Eap3.CustomAction1Enable   = CSR_CDbgNode2Eap3_F_CustomAction1Enable;
assign CrCsrCdbgnode2Eap3.CustomAction0Enable   = CSR_CDbgNode2Eap3_F_CustomAction0Enable;
assign CrCsrCdbgnode2Eap3.CustomAction1         = CSR_CDbgNode2Eap3_F_CustomAction1;
assign CrCsrCdbgnode2Eap3.CustomAction0         = CSR_CDbgNode2Eap3_F_CustomAction0;
assign CrCsrCdbgnode2Eap3.EventType1            = CSR_CDbgNode2Eap3_F_EventType1;
assign CrCsrCdbgnode2Eap3.EventType0            = CSR_CDbgNode2Eap3_F_EventType0;
assign CrCsrCdbgnode2Eap3.LogicalOp             = CSR_CDbgNode2Eap3_F_LogicalOp;
assign CrCsrCdbgnode2Eap3.Action1               = CSR_CDbgNode2Eap3_F_Action1;
assign CrCsrCdbgnode2Eap3.Action0               = CSR_CDbgNode2Eap3_F_Action0;
assign CrCsrCdbgnode2Eap3.DestNode              = CSR_CDbgNode2Eap3_F_DestNode;
assign CrCsrCdbgnode3Eap2.Action3               = CSR_CDbgNode3Eap2_F_Action3;
assign CrCsrCdbgnode3Eap2.Action2               = CSR_CDbgNode3Eap2_F_Action2;
assign CrCsrCdbgnode3Eap2.Udf                   = CSR_CDbgNode3Eap2_F_Udf;
assign CrCsrCdbgnode3Eap2.EventType2            = CSR_CDbgNode3Eap2_F_EventType2;
assign CrCsrCdbgnode3Eap2.CustomAction1Enable   = CSR_CDbgNode3Eap2_F_CustomAction1Enable;
assign CrCsrCdbgnode3Eap2.CustomAction0Enable   = CSR_CDbgNode3Eap2_F_CustomAction0Enable;
assign CrCsrCdbgnode3Eap2.CustomAction1         = CSR_CDbgNode3Eap2_F_CustomAction1;
assign CrCsrCdbgnode3Eap2.CustomAction0         = CSR_CDbgNode3Eap2_F_CustomAction0;
assign CrCsrCdbgnode3Eap2.EventType1            = CSR_CDbgNode3Eap2_F_EventType1;
assign CrCsrCdbgnode3Eap2.EventType0            = CSR_CDbgNode3Eap2_F_EventType0;
assign CrCsrCdbgnode3Eap2.LogicalOp             = CSR_CDbgNode3Eap2_F_LogicalOp;
assign CrCsrCdbgnode3Eap2.Action1               = CSR_CDbgNode3Eap2_F_Action1;
assign CrCsrCdbgnode3Eap2.Action0               = CSR_CDbgNode3Eap2_F_Action0;
assign CrCsrCdbgnode3Eap2.DestNode              = CSR_CDbgNode3Eap2_F_DestNode;
assign CrCsrCdbgnode3Eap3.Action3               = CSR_CDbgNode3Eap3_F_Action3;
assign CrCsrCdbgnode3Eap3.Action2               = CSR_CDbgNode3Eap3_F_Action2;
assign CrCsrCdbgnode3Eap3.Udf                   = CSR_CDbgNode3Eap3_F_Udf;
assign CrCsrCdbgnode3Eap3.EventType2            = CSR_CDbgNode3Eap3_F_EventType2;
assign CrCsrCdbgnode3Eap3.CustomAction1Enable   = CSR_CDbgNode3Eap3_F_CustomAction1Enable;
assign CrCsrCdbgnode3Eap3.CustomAction0Enable   = CSR_CDbgNode3Eap3_F_CustomAction0Enable;
assign CrCsrCdbgnode3Eap3.CustomAction1         = CSR_CDbgNode3Eap3_F_CustomAction1;
assign CrCsrCdbgnode3Eap3.CustomAction0         = CSR_CDbgNode3Eap3_F_CustomAction0;
assign CrCsrCdbgnode3Eap3.EventType1            = CSR_CDbgNode3Eap3_F_EventType1;
assign CrCsrCdbgnode3Eap3.EventType0            = CSR_CDbgNode3Eap3_F_EventType0;
assign CrCsrCdbgnode3Eap3.LogicalOp             = CSR_CDbgNode3Eap3_F_LogicalOp;
assign CrCsrCdbgnode3Eap3.Action1               = CSR_CDbgNode3Eap3_F_Action1;
assign CrCsrCdbgnode3Eap3.Action0               = CSR_CDbgNode3Eap3_F_Action0;
assign CrCsrCdbgnode3Eap3.DestNode              = CSR_CDbgNode3Eap3_F_DestNode;
assign CrCsrCdbgsignalsnapshotnode0Eap2.Value   = CSR_CDbgSignalSnapshotNode0Eap2_F_Value;
assign CrCsrCdbgsignalsnapshotnode0Eap3.Value   = CSR_CDbgSignalSnapshotNode0Eap3_F_Value;
assign CrCsrCdbgsignalsnapshotnode1Eap2.Value   = CSR_CDbgSignalSnapshotNode1Eap2_F_Value;
assign CrCsrCdbgsignalsnapshotnode1Eap3.Value   = CSR_CDbgSignalSnapshotNode1Eap3_F_Value;
assign CrCsrCdbgsignalsnapshotnode2Eap2.Value   = CSR_CDbgSignalSnapshotNode2Eap2_F_Value;
assign CrCsrCdbgsignalsnapshotnode2Eap3.Value   = CSR_CDbgSignalSnapshotNode2Eap3_F_Value;
assign CrCsrCdbgsignalsnapshotnode3Eap2.Value   = CSR_CDbgSignalSnapshotNode3Eap2_F_Value;
assign CrCsrCdbgsignalsnapshotnode3Eap3.Value   = CSR_CDbgSignalSnapshotNode3Eap3_F_Value;
assign CrCsrCdbgsignaldelaymuxsel.Rsvd          = CSR_CDbgSignalDelayMuxSel_F_Rsvd;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg7    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg7;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg6    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg6;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg5    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg5;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg4    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg4;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg3    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg3;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg2    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg2;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg1    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg1;
assign CrCsrCdbgsignaldelaymuxsel.Muxselseg0    = CSR_CDbgSignalDelayMuxSel_F_Muxselseg0;
assign CrCsrCdbgclatimestampsync.Timesyncmodeenable = CSR_CDbgClaTimestampsync_F_Timesyncmodeenable;
assign CrCsrCdbgclatimestampsync.Timestamp      = CSR_CDbgClaTimestampsync_F_Timestamp;
assign CrCsrCdbgclaxtriggertimestretch.Rsvd     = CSR_CDbgClaXtriggerTimestretch_F_Rsvd;
assign CrCsrCdbgclaxtriggertimestretch.Xtrigger1Stretch = CSR_CDbgClaXtriggerTimestretch_F_Xtrigger1Stretch;
assign CrCsrCdbgclaxtriggertimestretch.Xtrigger0Stretch = CSR_CDbgClaXtriggerTimestretch_F_Xtrigger0Stretch;
assign CrCsrCrscratchpad.Data                   = CSR_CrScratchpad_F_Data;
assign CrCsrScratch.Data                        = CSR_Scratch_F_Data;

//------------------------------------------------------------------------------
// update_value
// update register value based on input instr_type.
// instr_type: 2'b01 : op1 data is mask to set bits
// instr_type: 2'b10 : op1 data is mask to clear bits
// instr_type: othes : op1 data is written to register
//------------------------------------------------------------------------------
function automatic [63:0] update_value;
input [63:0] old_value;
input [63:0] op1;
input  [1:0] instr_type;
  begin
    if (instr_type == 2'b01)
       update_value = old_value | op1;
    else if (instr_type == 2'b10)
       update_value = old_value & ~op1;
    else
       update_value = op1;
  end
endfunction


endmodule
// Local Variables:
// verilog-library-directories:(".")
// verilog-library-extensions:(".sv" ".h" ".v")
// verilog-typedef-regexp: "_[eus]$"
// End:



