// SPDX-FileCopyrightText: Copyright 2025 Tenstorrent AI ULC
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Header file for register addresses
 *
 * This file was auto-generated by this script:
 *       create_reg_sv_header.py
 * ... from this input file:
 *       mcr_mmrs.py
 * ... using this as the target address space:
 *       cr
 *
 * This file should not be modified by hand.
 *
 ******************************************************************************/

`ifndef DFD_MCR_CSR_PKG_SVH
`define DFD_MCR_CSR_PKG_SVH

package dfd_mcr_csr_pkg;



//==============================================================================
// Addresses for Address Map: cr
//==============================================================================


localparam CR_REG_MAP_BASE_ADDR                                        = 23'h000;


localparam CR_CDBGMUXSEL_REG_OFFSET                                    = 23'h198;
localparam CR_CDBGMUXSEL_REG_ADDR                                      = 23'h198;
localparam CR_CDFDCSR_REG_OFFSET                                       = 23'h1A0;
localparam CR_CDFDCSR_REG_ADDR                                         = 23'h1A0;



//==============================================================================
// Bit Fields for Address Map: cr
//==============================================================================

localparam CR_CDBGMUXSEL_DBMMODE_MASK                                   = 64'h3;
localparam CR_CDBGMUXSEL_DBMMODE_SHIFT                                  = 0;
localparam CR_CDBGMUXSEL_DBMMODE_LOW                                    = 0;
localparam CR_CDBGMUXSEL_DBMMODE_HIGH                                   = 1;
localparam CR_CDBGMUXSEL_DBMMODE_WIDTH                                  = 2;

localparam CR_CDBGMUXSEL_DBMID_MASK                                     = 64'hFC;
localparam CR_CDBGMUXSEL_DBMID_SHIFT                                    = 2;
localparam CR_CDBGMUXSEL_DBMID_LOW                                      = 2;
localparam CR_CDBGMUXSEL_DBMID_HIGH                                     = 7;
localparam CR_CDBGMUXSEL_DBMID_WIDTH                                    = 6;

localparam CR_CDBGMUXSEL_RSVD158_MASK                                   = 64'hFF00;
localparam CR_CDBGMUXSEL_RSVD158_SHIFT                                  = 8;
localparam CR_CDBGMUXSEL_RSVD158_LOW                                    = 8;
localparam CR_CDBGMUXSEL_RSVD158_HIGH                                   = 15;
localparam CR_CDBGMUXSEL_RSVD158_WIDTH                                  = 8;

localparam CR_CDBGMUXSEL_MUXSELSEG0_MASK                                = 64'h3F0000;
localparam CR_CDBGMUXSEL_MUXSELSEG0_SHIFT                               = 16;
localparam CR_CDBGMUXSEL_MUXSELSEG0_LOW                                 = 16;
localparam CR_CDBGMUXSEL_MUXSELSEG0_HIGH                                = 21;
localparam CR_CDBGMUXSEL_MUXSELSEG0_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG1_MASK                                = 64'hFC00000;
localparam CR_CDBGMUXSEL_MUXSELSEG1_SHIFT                               = 22;
localparam CR_CDBGMUXSEL_MUXSELSEG1_LOW                                 = 22;
localparam CR_CDBGMUXSEL_MUXSELSEG1_HIGH                                = 27;
localparam CR_CDBGMUXSEL_MUXSELSEG1_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG2_MASK                                = 64'h3F0000000;
localparam CR_CDBGMUXSEL_MUXSELSEG2_SHIFT                               = 28;
localparam CR_CDBGMUXSEL_MUXSELSEG2_LOW                                 = 28;
localparam CR_CDBGMUXSEL_MUXSELSEG2_HIGH                                = 33;
localparam CR_CDBGMUXSEL_MUXSELSEG2_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG3_MASK                                = 64'hFC00000000;
localparam CR_CDBGMUXSEL_MUXSELSEG3_SHIFT                               = 34;
localparam CR_CDBGMUXSEL_MUXSELSEG3_LOW                                 = 34;
localparam CR_CDBGMUXSEL_MUXSELSEG3_HIGH                                = 39;
localparam CR_CDBGMUXSEL_MUXSELSEG3_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG4_MASK                                = 64'h3F0000000000;
localparam CR_CDBGMUXSEL_MUXSELSEG4_SHIFT                               = 40;
localparam CR_CDBGMUXSEL_MUXSELSEG4_LOW                                 = 40;
localparam CR_CDBGMUXSEL_MUXSELSEG4_HIGH                                = 45;
localparam CR_CDBGMUXSEL_MUXSELSEG4_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG5_MASK                                = 64'hFC00000000000;
localparam CR_CDBGMUXSEL_MUXSELSEG5_SHIFT                               = 46;
localparam CR_CDBGMUXSEL_MUXSELSEG5_LOW                                 = 46;
localparam CR_CDBGMUXSEL_MUXSELSEG5_HIGH                                = 51;
localparam CR_CDBGMUXSEL_MUXSELSEG5_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG6_MASK                                = 64'h3F0000000000000;
localparam CR_CDBGMUXSEL_MUXSELSEG6_SHIFT                               = 52;
localparam CR_CDBGMUXSEL_MUXSELSEG6_LOW                                 = 52;
localparam CR_CDBGMUXSEL_MUXSELSEG6_HIGH                                = 57;
localparam CR_CDBGMUXSEL_MUXSELSEG6_WIDTH                               = 6;

localparam CR_CDBGMUXSEL_MUXSELSEG7_MASK                                = 64'hFC00000000000000;
localparam CR_CDBGMUXSEL_MUXSELSEG7_SHIFT                               = 58;
localparam CR_CDBGMUXSEL_MUXSELSEG7_LOW                                 = 58;
localparam CR_CDBGMUXSEL_MUXSELSEG7_HIGH                                = 63;
localparam CR_CDBGMUXSEL_MUXSELSEG7_WIDTH                               = 6;

localparam CR_CDFDCSR_DFDMMRLOCK_MASK                                   = 64'h1;
localparam CR_CDFDCSR_DFDMMRLOCK_SHIFT                                  = 0;
localparam CR_CDFDCSR_DFDMMRLOCK_LOW                                    = 0;
localparam CR_CDFDCSR_DFDMMRLOCK_HIGH                                   = 0;
localparam CR_CDFDCSR_DFDMMRLOCK_WIDTH                                  = 1;

localparam CR_CDFDCSR_RSVD621_MASK                                      = 64'h7FFFFFFFFFFFFFFE;
localparam CR_CDFDCSR_RSVD621_SHIFT                                     = 1;
localparam CR_CDFDCSR_RSVD621_LOW                                       = 1;
localparam CR_CDFDCSR_RSVD621_HIGH                                      = 62;
localparam CR_CDFDCSR_RSVD621_WIDTH                                     = 62;

localparam CR_CDFDCSR_DFDEN_MASK                                        = 64'h8000000000000000;
localparam CR_CDFDCSR_DFDEN_SHIFT                                       = 63;
localparam CR_CDFDCSR_DFDEN_LOW                                         = 63;
localparam CR_CDFDCSR_DFDEN_HIGH                                        = 63;
localparam CR_CDFDCSR_DFDEN_WIDTH                                       = 1;

localparam CR_NUM_REGISTERS                                             = 2;


typedef struct packed {
  logic               CrCsrCdbgmuxselHit;
  logic               CrCsrCdfdcsrHit;
} McrCsrHit_s;






typedef struct packed {
    logic    [5:0]        Muxselseg7 ;
    logic    [5:0]        Muxselseg6 ;
    logic    [5:0]        Muxselseg5 ;
    logic    [5:0]        Muxselseg4 ;
    logic    [5:0]        Muxselseg3 ;
    logic    [5:0]        Muxselseg2 ;
    logic    [5:0]        Muxselseg1 ;
    logic    [5:0]        Muxselseg0 ;
    logic    [7:0]        Rsvd158 ;
    logic    [5:0]        Dbmid ;
    logic    [1:0]        Dbmmode ;
} CrCdbgmuxselCsr_s;



typedef struct packed {
    logic    [0:0]        DfdEn ;
    logic   [61:0]        Rsvd621 ;
    logic    [0:0]        DfdMmrLock ;
} CrCdfdcsrCsr_s;




typedef struct packed {
    logic    [5:0]        Muxselseg7 ;
    logic    [5:0]        Muxselseg6 ;
    logic    [5:0]        Muxselseg5 ;
    logic    [5:0]        Muxselseg4 ;
    logic    [5:0]        Muxselseg3 ;
    logic    [5:0]        Muxselseg2 ;
    logic    [5:0]        Muxselseg1 ;
    logic    [5:0]        Muxselseg0 ;
    logic    [7:0]        Rsvd158 ;
    logic    [5:0]        Dbmid ;
    logic    [1:0]        Dbmmode ;
} CrCdbgmuxselCsrUnpack_s;



typedef struct packed {
    logic    [0:0]        DfdEn ;
    logic   [61:0]        Rsvd621 ;
    logic    [0:0]        DfdMmrLock ;
} CrCdfdcsrCsrUnpack_s;







typedef struct packed {
    CrCdfdcsrCsr_s        Data;
} CrCdfdcsrCsrWr_s;



typedef struct packed {
    CrCdbgmuxselCsr_s     CrCsrCdbgmuxsel;
    CrCdfdcsrCsr_s        CrCsrCdfdcsr;
} McrCsrs_s;


typedef struct packed {
    CrCdfdcsrCsrWr_s      CrCsrCdfdcsrWr;
} McrCsrsWr_s;



function automatic CrCdbgmuxselCsrUnpack_s unpack_CrCdbgmuxselCsr;
input CrCdbgmuxselCsr_s packed_csr;
begin
    unpack_CrCdbgmuxselCsr = '0;
    unpack_CrCdbgmuxselCsr.Dbmmode = packed_csr.Dbmmode;
    unpack_CrCdbgmuxselCsr.Dbmid = packed_csr.Dbmid;
    unpack_CrCdbgmuxselCsr.Rsvd158 = packed_csr.Rsvd158;
    unpack_CrCdbgmuxselCsr.Muxselseg0 = packed_csr.Muxselseg0;
    unpack_CrCdbgmuxselCsr.Muxselseg1 = packed_csr.Muxselseg1;
    unpack_CrCdbgmuxselCsr.Muxselseg2 = packed_csr.Muxselseg2;
    unpack_CrCdbgmuxselCsr.Muxselseg3 = packed_csr.Muxselseg3;
    unpack_CrCdbgmuxselCsr.Muxselseg4 = packed_csr.Muxselseg4;
    unpack_CrCdbgmuxselCsr.Muxselseg5 = packed_csr.Muxselseg5;
    unpack_CrCdbgmuxselCsr.Muxselseg6 = packed_csr.Muxselseg6;
    unpack_CrCdbgmuxselCsr.Muxselseg7 = packed_csr.Muxselseg7;
end
endfunction


function automatic CrCdfdcsrCsrUnpack_s unpack_CrCdfdcsrCsr;
input CrCdfdcsrCsr_s packed_csr;
begin
    unpack_CrCdfdcsrCsr = '0;
    unpack_CrCdfdcsrCsr.DfdMmrLock = packed_csr.DfdMmrLock;
    unpack_CrCdfdcsrCsr.Rsvd621 = packed_csr.Rsvd621;
    unpack_CrCdfdcsrCsr.DfdEn = packed_csr.DfdEn;
end
endfunction



function automatic CrCdbgmuxselCsr_s pack_CrCdbgmuxselCsr;
input CrCdbgmuxselCsrUnpack_s unpacked_csr;
begin
    pack_CrCdbgmuxselCsr.Dbmmode = unpacked_csr.Dbmmode;
    pack_CrCdbgmuxselCsr.Dbmid = unpacked_csr.Dbmid;
    pack_CrCdbgmuxselCsr.Rsvd158 = unpacked_csr.Rsvd158;
    pack_CrCdbgmuxselCsr.Muxselseg0 = unpacked_csr.Muxselseg0;
    pack_CrCdbgmuxselCsr.Muxselseg1 = unpacked_csr.Muxselseg1;
    pack_CrCdbgmuxselCsr.Muxselseg2 = unpacked_csr.Muxselseg2;
    pack_CrCdbgmuxselCsr.Muxselseg3 = unpacked_csr.Muxselseg3;
    pack_CrCdbgmuxselCsr.Muxselseg4 = unpacked_csr.Muxselseg4;
    pack_CrCdbgmuxselCsr.Muxselseg5 = unpacked_csr.Muxselseg5;
    pack_CrCdbgmuxselCsr.Muxselseg6 = unpacked_csr.Muxselseg6;
    pack_CrCdbgmuxselCsr.Muxselseg7 = unpacked_csr.Muxselseg7;
end
endfunction


function automatic CrCdfdcsrCsr_s pack_CrCdfdcsrCsr;
input CrCdfdcsrCsrUnpack_s unpacked_csr;
begin
    pack_CrCdfdcsrCsr.DfdMmrLock = unpacked_csr.DfdMmrLock;
    pack_CrCdfdcsrCsr.Rsvd621 = unpacked_csr.Rsvd621;
    pack_CrCdfdcsrCsr.DfdEn = unpacked_csr.DfdEn;
end
endfunction


endpackage

`endif


