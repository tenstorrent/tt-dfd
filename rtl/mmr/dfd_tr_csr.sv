// SPDX-FileCopyrightText: Copyright 2025 Tenstorrent AI ULC
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Registers
 *
 * This file was AUTO-GENERATED by this script:
 *       create_reg_rtl.py
 * ... from this input file:
 *       tr_mmrs.py
 * ... using this as the top address space:
 *       tr
 *
 * This file should not be modified by hand.
 *
 ******************************************************************************/

module dfd_tr_csr
import dfd_tr_csr_pkg::*;
`include "tr_csr_pkg_list.svh"
#(
    parameter BASE_ADDR    = 0,                 // base address
    parameter ADDR_W       = 23,                // bit width of address
    parameter FLOP_IN_REQ  = 1,                 // add flop stage to bus inputs?
    parameter FLOP_RD_DATA = 1,                 // add flop stage to output rd data?
    parameter INSTR_TYPE_W = 2                  // write instr_type

) (

// Global Interface
input  logic                                    clk,
input  logic                                    reset_n,
input  logic                                    cold_resetn,

// Register Bus
input  logic                                    CsrCs,
input  logic                                    CsrWrEn,
input  logic                        [1:0]       CsrWrStrb,
input  logic                                    CsrRegSel,
input  logic                       [ADDR_W-1:0] CsrAddr,
input  logic                             [31:0] CsrWrData,
input  logic                 [INSTR_TYPE_W-1:0] CsrWrInstrType,
output logic                                    CsrWrReady,
output logic                                    CsrHit,
output TrCsrHit_s                               CsrHitList,
output logic                             [31:0] CsrRdData,

// Registers
output TrTrfunnelcontrolCsr_s                   TrCsrTrfunnelcontrol,
output TrTrfunnelimplCsr_s                      TrCsrTrfunnelimpl,
output TrTrfunneldisinputCsr_s                  TrCsrTrfunneldisinput,
output TrTrramcontrolCsr_s                      TrCsrTrramcontrol,
output TrTrramimplCsr_s                         TrCsrTrramimpl,
output TrTrramstartlowCsr_s                     TrCsrTrramstartlow,
output TrTrramstarthighCsr_s                    TrCsrTrramstarthigh,
output TrTrramlimitlowCsr_s                     TrCsrTrramlimitlow,
output TrTrramlimithighCsr_s                    TrCsrTrramlimithigh,
output TrTrramwplowCsr_s                        TrCsrTrramwplow,
output TrTrramwphighCsr_s                       TrCsrTrramwphigh,
output TrTrramrplowCsr_s                        TrCsrTrramrplow,
output TrTrramrphighCsr_s                       TrCsrTrramrphigh,
output TrTrramdataCsr_s                         TrCsrTrramdata,
output TrTrcustomramsmemlimitlowCsr_s           TrCsrTrcustomramsmemlimitlow,
output TrTrdstramcontrolCsr_s                   TrCsrTrdstramcontrol,
output TrTrdstramimplCsr_s                      TrCsrTrdstramimpl,
output TrTrdstramstartlowCsr_s                  TrCsrTrdstramstartlow,
output TrTrdstramstarthighCsr_s                 TrCsrTrdstramstarthigh,
output TrTrdstramlimitlowCsr_s                  TrCsrTrdstramlimitlow,
output TrTrdstramlimithighCsr_s                 TrCsrTrdstramlimithigh,
output TrTrdstramwplowCsr_s                     TrCsrTrdstramwplow,
output TrTrdstramwphighCsr_s                    TrCsrTrdstramwphigh,
output TrTrdstramrplowCsr_s                     TrCsrTrdstramrplow,
output TrTrdstramrphighCsr_s                    TrCsrTrdstramrphigh,
output TrTrdstramdataCsr_s                      TrCsrTrdstramdata,
output TrTrclusterfusecfglowCsr_s               TrCsrTrclusterfusecfglow,
output TrTrclusterfusecfghiCsr_s                TrCsrTrclusterfusecfghi,
output TrTrscratchloCsr_s                       TrCsrTrscratchlo,
output TrTrscratchhiCsr_s                       TrCsrTrscratchhi,
output TrTrscratchpadloCsr_s                    TrCsrTrscratchpadlo,
output TrTrscratchpadhiCsr_s                    TrCsrTrscratchpadhi,

// HW Write Ports
input TrTrfunnelcontrolCsrWr_s                  TrCsrTrfunnelcontrolWr,
input TrTrfunneldisinputCsrWr_s                 TrCsrTrfunneldisinputWr,
input TrTrramcontrolCsrWr_s                     TrCsrTrramcontrolWr,
input TrTrramstartlowCsrWr_s                    TrCsrTrramstartlowWr,
input TrTrramstarthighCsrWr_s                   TrCsrTrramstarthighWr,
input TrTrramlimitlowCsrWr_s                    TrCsrTrramlimitlowWr,
input TrTrramlimithighCsrWr_s                   TrCsrTrramlimithighWr,
input TrTrramwplowCsrWr_s                       TrCsrTrramwplowWr,
input TrTrramwphighCsrWr_s                      TrCsrTrramwphighWr,
input TrTrramrplowCsrWr_s                       TrCsrTrramrplowWr,
input TrTrramrphighCsrWr_s                      TrCsrTrramrphighWr,
input TrTrramdataCsrWr_s                        TrCsrTrramdataWr,
input TrTrdstramcontrolCsrWr_s                  TrCsrTrdstramcontrolWr,
input TrTrdstramstartlowCsrWr_s                 TrCsrTrdstramstartlowWr,
input TrTrdstramstarthighCsrWr_s                TrCsrTrdstramstarthighWr,
input TrTrdstramlimitlowCsrWr_s                 TrCsrTrdstramlimitlowWr,
input TrTrdstramlimithighCsrWr_s                TrCsrTrdstramlimithighWr,
input TrTrdstramwplowCsrWr_s                    TrCsrTrdstramwplowWr,
input TrTrdstramwphighCsrWr_s                   TrCsrTrdstramwphighWr,
input TrTrdstramrplowCsrWr_s                    TrCsrTrdstramrplowWr,
input TrTrdstramrphighCsrWr_s                   TrCsrTrdstramrphighWr,
input TrTrdstramdataCsrWr_s                     TrCsrTrdstramdataWr,
// Write Broadcast Bus
output logic                                    CsrUpdateEn,
output logic                       [ADDR_W-1:0] CsrUpdateAddr,
output logic                             [31:0] CsrUpdateData

);


////////////////////////////////////////////////////////////////////////////////
// Internal Parameters
////////////////////////////////////////////////////////////////////////////////

// Addresses
localparam   [ADDR_W-1:0] ADDR_CSR_TRFUNNELCONTROL       = ADDR_W'(BASE_ADDR + 'h4000);
localparam   [ADDR_W-1:0] ADDR_CSR_TRFUNNELIMPL          = ADDR_W'(BASE_ADDR + 'h4004);
localparam   [ADDR_W-1:0] ADDR_CSR_TRFUNNELDISINPUT      = ADDR_W'(BASE_ADDR + 'h4008);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMCONTROL          = ADDR_W'(BASE_ADDR + 'h5000);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMIMPL             = ADDR_W'(BASE_ADDR + 'h5004);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMSTARTLOW         = ADDR_W'(BASE_ADDR + 'h5010);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMSTARTHIGH        = ADDR_W'(BASE_ADDR + 'h5014);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMLIMITLOW         = ADDR_W'(BASE_ADDR + 'h5018);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMLIMITHIGH        = ADDR_W'(BASE_ADDR + 'h501C);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMWPLOW            = ADDR_W'(BASE_ADDR + 'h5020);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMWPHIGH           = ADDR_W'(BASE_ADDR + 'h5024);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMRPLOW            = ADDR_W'(BASE_ADDR + 'h5028);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMRPHIGH           = ADDR_W'(BASE_ADDR + 'h502C);
localparam   [ADDR_W-1:0] ADDR_CSR_TRRAMDATA             = ADDR_W'(BASE_ADDR + 'h5040);
localparam   [ADDR_W-1:0] ADDR_CSR_TRCUSTOMRAMSMEMLIMITLOW = ADDR_W'(BASE_ADDR + 'h5E00);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMCONTROL       = ADDR_W'(BASE_ADDR + 'h6000);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMIMPL          = ADDR_W'(BASE_ADDR + 'h6004);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMSTARTLOW      = ADDR_W'(BASE_ADDR + 'h6010);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMSTARTHIGH     = ADDR_W'(BASE_ADDR + 'h6014);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMLIMITLOW      = ADDR_W'(BASE_ADDR + 'h6018);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMLIMITHIGH     = ADDR_W'(BASE_ADDR + 'h601C);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMWPLOW         = ADDR_W'(BASE_ADDR + 'h6020);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMWPHIGH        = ADDR_W'(BASE_ADDR + 'h6024);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMRPLOW         = ADDR_W'(BASE_ADDR + 'h6028);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMRPHIGH        = ADDR_W'(BASE_ADDR + 'h602C);
localparam   [ADDR_W-1:0] ADDR_CSR_TRDSTRAMDATA          = ADDR_W'(BASE_ADDR + 'h6040);
localparam   [ADDR_W-1:0] ADDR_CSR_TRCLUSTERFUSECFGLOW   = ADDR_W'(BASE_ADDR + 'h7FF8);
localparam   [ADDR_W-1:0] ADDR_CSR_TRCLUSTERFUSECFGHI    = ADDR_W'(BASE_ADDR + 'h7FFC);
localparam   [ADDR_W-1:0] ADDR_CSR_TRSCRATCHLO           = ADDR_W'(BASE_ADDR + 'h8FE8);
localparam   [ADDR_W-1:0] ADDR_CSR_TRSCRATCHHI           = ADDR_W'(BASE_ADDR + 'h8FEC);
localparam   [ADDR_W-1:0] ADDR_CSR_TRSCRATCHPADLO        = ADDR_W'(BASE_ADDR + 'h8FF0);
localparam   [ADDR_W-1:0] ADDR_CSR_TRSCRATCHPADHI        = ADDR_W'(BASE_ADDR + 'h8FF4);



////////////////////////////////////////////////////////////////////////////////
// Signal Declarations
////////////////////////////////////////////////////////////////////////////////

logic                       reg_cs;
logic                       reg_wr_en;
logic           [1:0]       reg_wr_strb;
logic          [ADDR_W-1:0] reg_addr;
logic                       reg_wr_sel;
logic                       reg_rd_sel;
logic                [31:0] reg_wr_data;
logic    [INSTR_TYPE_W-1:0] reg_wr_instr_type;

logic                       reg_wr_ready;
TrCsrHit_s                  reg_prehit;
logic                       reg_hit;
logic                [31:0] reg_rd_data;

logic                       reg_write;
logic                       reg_read;

logic          [ADDR_W-1:0] reg_addr_d1;
logic                       reg_write_d1;
logic                [31:0] reg_rd_data_d1;

// Registers
logic                [31:0] CSR_Trfunnelcontrol;
logic                [31:0] CSR_Trfunnelimpl;
logic                [31:0] CSR_Trfunneldisinput;
logic                [31:0] CSR_Trramcontrol;
logic                [31:0] CSR_Trramimpl;
logic                [31:0] CSR_Trramstartlow;
logic                [31:0] CSR_Trramstarthigh;
logic                [31:0] CSR_Trramlimitlow;
logic                [31:0] CSR_Trramlimithigh;
logic                [31:0] CSR_Trramwplow;
logic                [31:0] CSR_Trramwphigh;
logic                [31:0] CSR_Trramrplow;
logic                [31:0] CSR_Trramrphigh;
logic                [31:0] CSR_Trramdata;
logic                [31:0] CSR_Trcustomramsmemlimitlow;
logic                [31:0] CSR_Trdstramcontrol;
logic                [31:0] CSR_Trdstramimpl;
logic                [31:0] CSR_Trdstramstartlow;
logic                [31:0] CSR_Trdstramstarthigh;
logic                [31:0] CSR_Trdstramlimitlow;
logic                [31:0] CSR_Trdstramlimithigh;
logic                [31:0] CSR_Trdstramwplow;
logic                [31:0] CSR_Trdstramwphigh;
logic                [31:0] CSR_Trdstramrplow;
logic                [31:0] CSR_Trdstramrphigh;
logic                [31:0] CSR_Trdstramdata;
logic                [31:0] CSR_TrClusterFuseCfgLow;
logic                [31:0] CSR_TrClusterFuseCfgHi;
logic                [31:0] CSR_TrScratchLo;
logic                [31:0] CSR_TrScratchHi;
logic                [31:0] CSR_TrScratchpadLo;
logic                [31:0] CSR_TrScratchpadHi;

// Fields
logic                 [0:0] CSR_Trfunnelcontrol_F_Trfunnelempty;
logic                 [0:0] CSR_Trfunnelcontrol_F_Trfunnelenable;
logic                 [0:0] CSR_Trfunnelcontrol_F_Trfunnelactive;
logic                 [3:0] CSR_Trfunnelimpl_F_Trfunnelcomptype;
logic                 [3:0] CSR_Trfunnelimpl_F_Trfunnelverminor;
logic                 [3:0] CSR_Trfunnelimpl_F_Trfunnelvermajor;
logic                [15:0] CSR_Trfunneldisinput_F_Trfunneldisinput;
logic                 [0:0] CSR_Trramcontrol_F_Trramstoponwrap;
logic                 [0:0] CSR_Trramcontrol_F_Trrammode;
logic                 [0:0] CSR_Trramcontrol_F_Trramempty;
logic                 [0:0] CSR_Trramcontrol_F_Trramenable;
logic                 [0:0] CSR_Trramcontrol_F_Trramactive;
logic                 [3:0] CSR_Trramimpl_F_Trramvendorframelength;
logic                 [0:0] CSR_Trramimpl_F_Trramhassmem;
logic                 [0:0] CSR_Trramimpl_F_Trramhassram;
logic                 [3:0] CSR_Trramimpl_F_Trramcomptype;
logic                 [3:0] CSR_Trramimpl_F_Trramverminor;
logic                 [3:0] CSR_Trramimpl_F_Trramvermajor;
logic                [29:0] CSR_Trramstartlow_F_Trramstartlow;
logic                 [1:0] CSR_Trramstartlow_F_Rsvd10;
logic                [31:0] CSR_Trramstarthigh_F_Trramstarthigh;
logic                [29:0] CSR_Trramlimitlow_F_Trramlimitlow;
logic                 [1:0] CSR_Trramlimitlow_F_Rsvd10;
logic                [31:0] CSR_Trramlimithigh_F_Trramlimithigh;
logic                [29:0] CSR_Trramwplow_F_Trramwplow;
logic                 [0:0] CSR_Trramwplow_F_Trramwrap;
logic                [31:0] CSR_Trramwphigh_F_Trramwphigh;
logic                [29:0] CSR_Trramrplow_F_Trramrplow;
logic                 [1:0] CSR_Trramrplow_F_Rsvd10;
logic                [31:0] CSR_Trramrphigh_F_Trramrphigh;
logic                [31:0] CSR_Trramdata_F_Trramdata;
logic                [29:0] CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow;
logic                 [1:0] CSR_Trcustomramsmemlimitlow_F_Rsvd10;
logic                 [0:0] CSR_Trdstramcontrol_F_Trdstramstoponwrap;
logic                 [0:0] CSR_Trdstramcontrol_F_Trdstrammode;
logic                 [0:0] CSR_Trdstramcontrol_F_Trdstramempty;
logic                 [0:0] CSR_Trdstramcontrol_F_Trdstramenable;
logic                 [0:0] CSR_Trdstramcontrol_F_Trdstramactive;
logic                 [3:0] CSR_Trdstramimpl_F_Trdstramvendorframelength;
logic                 [0:0] CSR_Trdstramimpl_F_Trdstramhassmem;
logic                 [0:0] CSR_Trdstramimpl_F_Trdstramhassram;
logic                 [3:0] CSR_Trdstramimpl_F_Trdstramcomptype;
logic                 [3:0] CSR_Trdstramimpl_F_Trdstramverminor;
logic                 [3:0] CSR_Trdstramimpl_F_Trdstramvermajor;
logic                [29:0] CSR_Trdstramstartlow_F_Trdstramstartlow;
logic                 [1:0] CSR_Trdstramstartlow_F_Rsvd10;
logic                [31:0] CSR_Trdstramstarthigh_F_Trdstramstarthigh;
logic                [29:0] CSR_Trdstramlimitlow_F_Trdstramlimitlow;
logic                 [1:0] CSR_Trdstramlimitlow_F_Rsvd10;
logic                [31:0] CSR_Trdstramlimithigh_F_Trdstramlimithigh;
logic                [29:0] CSR_Trdstramwplow_F_Trdstramwplow;
logic                 [0:0] CSR_Trdstramwplow_F_Trdstramwrap;
logic                [31:0] CSR_Trdstramwphigh_F_Trdstramwphigh;
logic                [29:0] CSR_Trdstramrplow_F_Trdstramrplow;
logic                 [1:0] CSR_Trdstramrplow_F_Rsvd10;
logic                [31:0] CSR_Trdstramrphigh_F_Trdstramrphigh;
logic                [31:0] CSR_Trdstramdata_F_Trdstramdata;
logic                 [2:0] CSR_TrClusterFuseCfgLow_F_Core3Vid;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_Core3Enable;
logic                 [2:0] CSR_TrClusterFuseCfgLow_F_Core2Vid;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_Core2Enable;
logic                 [2:0] CSR_TrClusterFuseCfgLow_F_Core1Vid;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_Core1Enable;
logic                 [2:0] CSR_TrClusterFuseCfgLow_F_Core0Vid;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_Core0Enable;
logic                 [3:0] CSR_TrClusterFuseCfgLow_F_Rsvd1512;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable;
logic                 [0:0] CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled;
logic                 [1:0] CSR_TrClusterFuseCfgLow_F_Rsvd98;
logic                 [7:0] CSR_TrClusterFuseCfgLow_F_ScHarvestStrap;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Lock;
logic                 [8:0] CSR_TrClusterFuseCfgHi_F_Rsvd3022;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_DstEnable;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_TraceEnable;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_ClaEnable;
logic                 [1:0] CSR_TrClusterFuseCfgHi_F_DebugEnable;
logic                 [2:0] CSR_TrClusterFuseCfgHi_F_Core7Vid;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Core7Enable;
logic                 [2:0] CSR_TrClusterFuseCfgHi_F_Core6Vid;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Core6Enable;
logic                 [2:0] CSR_TrClusterFuseCfgHi_F_Core5Vid;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Core5Enable;
logic                 [2:0] CSR_TrClusterFuseCfgHi_F_Core4Vid;
logic                 [0:0] CSR_TrClusterFuseCfgHi_F_Core4Enable;
logic                [31:0] CSR_TrScratchLo_F_Data;
logic                [31:0] CSR_TrScratchHi_F_Data;
logic                [31:0] CSR_TrScratchpadLo_F_Data;
logic                [31:0] CSR_TrScratchpadHi_F_Data;



////////////////////////////////////////////////////////////////////////////////
// Main Module Functionality
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Inputs
//------------------------------------------------------------------------------

if (FLOP_IN_REQ) begin : flop_in_req
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_cs_ff             (.out(reg_cs)   , .in(CsrCs)    , .en(CsrCs|reg_cs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_en_ff          (.out(reg_wr_en), .in(CsrWrEn)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(2)           , .RESET_VALUE(0)) reg_wr_strb_ff        (.out(reg_wr_strb), .in(CsrWrStrb)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(ADDR_W)      , .RESET_VALUE(0)) reg_addr_ff           (.out(reg_addr) , .in(CsrAddr)  , .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32)          , .RESET_VALUE(0)) reg_wr_data_ff        (.out(reg_wr_data), .in(CsrWrData), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_rd_sel_ff         (.out(reg_rd_sel)  , .in(~CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_sel_ff         (.out(reg_wr_sel)  , .in(CsrRegSel), .en(CsrCs), .clk(clk), .rst_n(reset_n));    
    generic_dff #(.WIDTH(INSTR_TYPE_W), .RESET_VALUE(0)) reg_wr_instr_type_ff  (.out(reg_wr_instr_type), .in(CsrWrInstrType), .en(CsrCs), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(1)           , .RESET_VALUE(0)) reg_wr_ready_ff       (.out(reg_wr_ready), .in(CsrCs & CsrWrEn), .en(CsrCs), .clk(clk), .rst_n(reset_n));
end else begin
    assign reg_cs             = CsrCs;
    assign reg_wr_en          = CsrWrEn;
    assign reg_wr_strb        = CsrWrStrb;
    assign reg_addr           = CsrAddr;
    assign reg_wr_data        = CsrWrData;
    assign reg_rd_sel         = ~CsrRegSel;
    assign reg_wr_sel         = CsrRegSel;
    assign reg_wr_instr_type  = CsrWrInstrType;
    assign reg_wr_ready       = CsrCs & CsrWrEn;
end

assign reg_write    = reg_cs &  reg_wr_en;
assign reg_read     = reg_cs;

generic_dff #(.WIDTH(ADDR_W), .RESET_VALUE(0)) reg_addr_d1_ff (.out(reg_addr_d1) , .in(reg_addr) , .en(reg_cs), .clk(clk), .rst_n(reset_n));
generic_dff #(.WIDTH(1)     , .RESET_VALUE(0)) reg_wren_d1_ff (.out(reg_write_d1), .in(reg_write), .en(reg_cs | reg_write_d1), .clk(clk), .rst_n(reset_n));


//------------------------------------------------------------------------------
// Register Writes and Counters
//------------------------------------------------------------------------------


//Register: CSR_TRFUNNELCONTROL
logic                                           CSR_Trfunnelcontrol_F_Trfunnelempty_WrEn;
logic [TR_TRFUNNELCONTROL_TRFUNNELEMPTY_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelempty_Data;
logic [TR_TRFUNNELCONTROL_TRFUNNELEMPTY_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelempty_DataEff;
assign CSR_Trfunnelcontrol_F_Trfunnelempty_DataEff = {reg_wr_data[3:3]};
assign CSR_Trfunnelcontrol_F_Trfunnelempty_Data = (TrCsrTrfunnelcontrolWr.Data.Trfunnelempty);
assign CSR_Trfunnelcontrol_F_Trfunnelempty_WrEn = ((TrCsrTrfunnelcontrolWr.TrfunnelemptyWrEn));
generic_dff #(.WIDTH(TR_TRFUNNELCONTROL_TRFUNNELEMPTY_WIDTH), .RESET_VALUE(1)) CSR_Trfunnelcontrol_F_Trfunnelempty_ff   (.out(CSR_Trfunnelcontrol_F_Trfunnelempty), .in(CSR_Trfunnelcontrol_F_Trfunnelempty_Data), .en(CSR_Trfunnelcontrol_F_Trfunnelempty_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trfunnelcontrol_F_Trfunnelenable_WrEn;
logic [TR_TRFUNNELCONTROL_TRFUNNELENABLE_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelenable_Data;
logic [TR_TRFUNNELCONTROL_TRFUNNELENABLE_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelenable_DataEff;
assign CSR_Trfunnelcontrol_F_Trfunnelenable_DataEff = {reg_wr_data[1:1]};
assign CSR_Trfunnelcontrol_F_Trfunnelenable_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELCONTROL)) ? TR_TRFUNNELCONTROL_TRFUNNELENABLE_WIDTH'(update_value(64'(CSR_Trfunnelcontrol_F_Trfunnelenable), 64'(CSR_Trfunnelcontrol_F_Trfunnelenable_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrfunnelcontrolWr.Data.Trfunnelenable);
assign CSR_Trfunnelcontrol_F_Trfunnelenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELCONTROL)) | TrCsrTrfunnelcontrolWr.TrfunnelenableWrEn));
generic_dff #(.WIDTH(TR_TRFUNNELCONTROL_TRFUNNELENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trfunnelcontrol_F_Trfunnelenable_ff   (.out(CSR_Trfunnelcontrol_F_Trfunnelenable), .in(CSR_Trfunnelcontrol_F_Trfunnelenable_Data), .en(CSR_Trfunnelcontrol_F_Trfunnelenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trfunnelcontrol_F_Trfunnelactive_WrEn;
logic [TR_TRFUNNELCONTROL_TRFUNNELACTIVE_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelactive_Data;
logic [TR_TRFUNNELCONTROL_TRFUNNELACTIVE_WIDTH-1:0] CSR_Trfunnelcontrol_F_Trfunnelactive_DataEff;
assign CSR_Trfunnelcontrol_F_Trfunnelactive_DataEff = {reg_wr_data[0:0]};
assign CSR_Trfunnelcontrol_F_Trfunnelactive_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELCONTROL)) ? TR_TRFUNNELCONTROL_TRFUNNELACTIVE_WIDTH'(update_value(64'(CSR_Trfunnelcontrol_F_Trfunnelactive), 64'(CSR_Trfunnelcontrol_F_Trfunnelactive_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrfunnelcontrolWr.Data.Trfunnelactive);
assign CSR_Trfunnelcontrol_F_Trfunnelactive_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELCONTROL)) | TrCsrTrfunnelcontrolWr.TrfunnelactiveWrEn));
generic_dff #(.WIDTH(TR_TRFUNNELCONTROL_TRFUNNELACTIVE_WIDTH), .RESET_VALUE(0)) CSR_Trfunnelcontrol_F_Trfunnelactive_ff   (.out(CSR_Trfunnelcontrol_F_Trfunnelactive), .in(CSR_Trfunnelcontrol_F_Trfunnelactive_Data), .en(CSR_Trfunnelcontrol_F_Trfunnelactive_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRFUNNELIMPL
assign CSR_Trfunnelimpl_F_Trfunnelcomptype = 4'h8;

assign CSR_Trfunnelimpl_F_Trfunnelverminor = 4'h0;

assign CSR_Trfunnelimpl_F_Trfunnelvermajor = 4'h1;

//Register: CSR_TRFUNNELDISINPUT
logic                                           CSR_Trfunneldisinput_F_Trfunneldisinput_WrEn;
logic [TR_TRFUNNELDISINPUT_TRFUNNELDISINPUT_WIDTH-1:0] CSR_Trfunneldisinput_F_Trfunneldisinput_Data;
logic [TR_TRFUNNELDISINPUT_TRFUNNELDISINPUT_WIDTH-1:0] CSR_Trfunneldisinput_F_Trfunneldisinput_DataEff;
assign CSR_Trfunneldisinput_F_Trfunneldisinput_DataEff = {reg_wr_data[15:0]};
assign CSR_Trfunneldisinput_F_Trfunneldisinput_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELDISINPUT)) ? TR_TRFUNNELDISINPUT_TRFUNNELDISINPUT_WIDTH'(update_value(64'(CSR_Trfunneldisinput_F_Trfunneldisinput), 64'(CSR_Trfunneldisinput_F_Trfunneldisinput_DataEff[15:0]), reg_wr_instr_type)) : TrCsrTrfunneldisinputWr.Data.Trfunneldisinput);
assign CSR_Trfunneldisinput_F_Trfunneldisinput_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRFUNNELDISINPUT)) | TrCsrTrfunneldisinputWr.TrfunneldisinputWrEn));
generic_dff #(.WIDTH(TR_TRFUNNELDISINPUT_TRFUNNELDISINPUT_WIDTH), .RESET_VALUE(0)) CSR_Trfunneldisinput_F_Trfunneldisinput_ff   (.out(CSR_Trfunneldisinput_F_Trfunneldisinput), .in(CSR_Trfunneldisinput_F_Trfunneldisinput_Data), .en(CSR_Trfunneldisinput_F_Trfunneldisinput_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMCONTROL
logic                                           CSR_Trramcontrol_F_Trramstoponwrap_WrEn;
logic [TR_TRRAMCONTROL_TRRAMSTOPONWRAP_WIDTH-1:0] CSR_Trramcontrol_F_Trramstoponwrap_Data;
logic [TR_TRRAMCONTROL_TRRAMSTOPONWRAP_WIDTH-1:0] CSR_Trramcontrol_F_Trramstoponwrap_DataEff;
assign CSR_Trramcontrol_F_Trramstoponwrap_DataEff = {reg_wr_data[8:8]};
assign CSR_Trramcontrol_F_Trramstoponwrap_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) ? TR_TRRAMCONTROL_TRRAMSTOPONWRAP_WIDTH'(update_value(64'(CSR_Trramcontrol_F_Trramstoponwrap), 64'(CSR_Trramcontrol_F_Trramstoponwrap_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrramcontrolWr.Data.Trramstoponwrap);
assign CSR_Trramcontrol_F_Trramstoponwrap_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) | TrCsrTrramcontrolWr.TrramstoponwrapWrEn));
generic_dff #(.WIDTH(TR_TRRAMCONTROL_TRRAMSTOPONWRAP_WIDTH), .RESET_VALUE(0)) CSR_Trramcontrol_F_Trramstoponwrap_ff   (.out(CSR_Trramcontrol_F_Trramstoponwrap), .in(CSR_Trramcontrol_F_Trramstoponwrap_Data), .en(CSR_Trramcontrol_F_Trramstoponwrap_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trramcontrol_F_Trrammode_WrEn;
logic [TR_TRRAMCONTROL_TRRAMMODE_WIDTH    -1:0] CSR_Trramcontrol_F_Trrammode_Data;
logic [TR_TRRAMCONTROL_TRRAMMODE_WIDTH    -1:0] CSR_Trramcontrol_F_Trrammode_DataEff;
assign CSR_Trramcontrol_F_Trrammode_DataEff = {reg_wr_data[4:4]};
assign CSR_Trramcontrol_F_Trrammode_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) ? TR_TRRAMCONTROL_TRRAMMODE_WIDTH'(update_value(64'(CSR_Trramcontrol_F_Trrammode), 64'(CSR_Trramcontrol_F_Trrammode_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrramcontrolWr.Data.Trrammode);
assign CSR_Trramcontrol_F_Trrammode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) | TrCsrTrramcontrolWr.TrrammodeWrEn));
generic_dff #(.WIDTH(TR_TRRAMCONTROL_TRRAMMODE_WIDTH), .RESET_VALUE(0)) CSR_Trramcontrol_F_Trrammode_ff   (.out(CSR_Trramcontrol_F_Trrammode), .in(CSR_Trramcontrol_F_Trrammode_Data), .en(CSR_Trramcontrol_F_Trrammode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trramcontrol_F_Trramempty_WrEn;
logic [TR_TRRAMCONTROL_TRRAMEMPTY_WIDTH   -1:0] CSR_Trramcontrol_F_Trramempty_Data;
logic [TR_TRRAMCONTROL_TRRAMEMPTY_WIDTH   -1:0] CSR_Trramcontrol_F_Trramempty_DataEff;
assign CSR_Trramcontrol_F_Trramempty_DataEff = {reg_wr_data[3:3]};
assign CSR_Trramcontrol_F_Trramempty_Data = (TrCsrTrramcontrolWr.Data.Trramempty);
assign CSR_Trramcontrol_F_Trramempty_WrEn = ((TrCsrTrramcontrolWr.TrramemptyWrEn));
generic_dff #(.WIDTH(TR_TRRAMCONTROL_TRRAMEMPTY_WIDTH), .RESET_VALUE(1)) CSR_Trramcontrol_F_Trramempty_ff   (.out(CSR_Trramcontrol_F_Trramempty), .in(CSR_Trramcontrol_F_Trramempty_Data), .en(CSR_Trramcontrol_F_Trramempty_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trramcontrol_F_Trramenable_WrEn;
logic [TR_TRRAMCONTROL_TRRAMENABLE_WIDTH  -1:0] CSR_Trramcontrol_F_Trramenable_Data;
logic [TR_TRRAMCONTROL_TRRAMENABLE_WIDTH  -1:0] CSR_Trramcontrol_F_Trramenable_DataEff;
assign CSR_Trramcontrol_F_Trramenable_DataEff = {reg_wr_data[1:1]};
assign CSR_Trramcontrol_F_Trramenable_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) ? TR_TRRAMCONTROL_TRRAMENABLE_WIDTH'(update_value(64'(CSR_Trramcontrol_F_Trramenable), 64'(CSR_Trramcontrol_F_Trramenable_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrramcontrolWr.Data.Trramenable);
assign CSR_Trramcontrol_F_Trramenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) | TrCsrTrramcontrolWr.TrramenableWrEn));
generic_dff #(.WIDTH(TR_TRRAMCONTROL_TRRAMENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trramcontrol_F_Trramenable_ff   (.out(CSR_Trramcontrol_F_Trramenable), .in(CSR_Trramcontrol_F_Trramenable_Data), .en(CSR_Trramcontrol_F_Trramenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trramcontrol_F_Trramactive_WrEn;
logic [TR_TRRAMCONTROL_TRRAMACTIVE_WIDTH  -1:0] CSR_Trramcontrol_F_Trramactive_Data;
logic [TR_TRRAMCONTROL_TRRAMACTIVE_WIDTH  -1:0] CSR_Trramcontrol_F_Trramactive_DataEff;
assign CSR_Trramcontrol_F_Trramactive_DataEff = {reg_wr_data[0:0]};
assign CSR_Trramcontrol_F_Trramactive_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) ? TR_TRRAMCONTROL_TRRAMACTIVE_WIDTH'(update_value(64'(CSR_Trramcontrol_F_Trramactive), 64'(CSR_Trramcontrol_F_Trramactive_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrramcontrolWr.Data.Trramactive);
assign CSR_Trramcontrol_F_Trramactive_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMCONTROL)) | TrCsrTrramcontrolWr.TrramactiveWrEn));
generic_dff #(.WIDTH(TR_TRRAMCONTROL_TRRAMACTIVE_WIDTH), .RESET_VALUE(0)) CSR_Trramcontrol_F_Trramactive_ff   (.out(CSR_Trramcontrol_F_Trramactive), .in(CSR_Trramcontrol_F_Trramactive_Data), .en(CSR_Trramcontrol_F_Trramactive_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMIMPL
logic                                           CSR_Trramimpl_F_Trramvendorframelength_WrEn;
logic [TR_TRRAMIMPL_TRRAMVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trramimpl_F_Trramvendorframelength_Data;
logic [TR_TRRAMIMPL_TRRAMVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trramimpl_F_Trramvendorframelength_DataEff;
assign CSR_Trramimpl_F_Trramvendorframelength_DataEff = {reg_wr_data[27:24]};
assign CSR_Trramimpl_F_Trramvendorframelength_Data = (TR_TRRAMIMPL_TRRAMVENDORFRAMELENGTH_WIDTH'(update_value(64'(CSR_Trramimpl_F_Trramvendorframelength), 64'(CSR_Trramimpl_F_Trramvendorframelength_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trramimpl_F_Trramvendorframelength_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMIMPL))));
generic_dff #(.WIDTH(TR_TRRAMIMPL_TRRAMVENDORFRAMELENGTH_WIDTH), .RESET_VALUE(1)) CSR_Trramimpl_F_Trramvendorframelength_ff   (.out(CSR_Trramimpl_F_Trramvendorframelength), .in(CSR_Trramimpl_F_Trramvendorframelength_Data), .en(CSR_Trramimpl_F_Trramvendorframelength_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trramimpl_F_Trramhassmem = 1'h1;

assign CSR_Trramimpl_F_Trramhassram = 1'h1;

assign CSR_Trramimpl_F_Trramcomptype = 4'h9;

assign CSR_Trramimpl_F_Trramverminor = 4'h0;

assign CSR_Trramimpl_F_Trramvermajor = 4'h1;

//Register: CSR_TRRAMSTARTLOW
logic                                           CSR_Trramstartlow_F_Trramstartlow_WrEn;
logic [TR_TRRAMSTARTLOW_TRRAMSTARTLOW_WIDTH-1:0] CSR_Trramstartlow_F_Trramstartlow_Data;
logic [TR_TRRAMSTARTLOW_TRRAMSTARTLOW_WIDTH-1:0] CSR_Trramstartlow_F_Trramstartlow_DataEff;
assign CSR_Trramstartlow_F_Trramstartlow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trramstartlow_F_Trramstartlow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMSTARTLOW)) ? TR_TRRAMSTARTLOW_TRRAMSTARTLOW_WIDTH'(update_value(64'(CSR_Trramstartlow_F_Trramstartlow), 64'(CSR_Trramstartlow_F_Trramstartlow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrramstartlowWr.Data.Trramstartlow);
assign CSR_Trramstartlow_F_Trramstartlow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMSTARTLOW)) | TrCsrTrramstartlowWr.TrramstartlowWrEn));
generic_dff #(.WIDTH(TR_TRRAMSTARTLOW_TRRAMSTARTLOW_WIDTH), .RESET_VALUE(0)) CSR_Trramstartlow_F_Trramstartlow_ff   (.out(CSR_Trramstartlow_F_Trramstartlow), .in(CSR_Trramstartlow_F_Trramstartlow_Data), .en(CSR_Trramstartlow_F_Trramstartlow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trramstartlow_F_Rsvd10 = 2'h0;

//Register: CSR_TRRAMSTARTHIGH
logic                                           CSR_Trramstarthigh_F_Trramstarthigh_WrEn;
logic [TR_TRRAMSTARTHIGH_TRRAMSTARTHIGH_WIDTH-1:0] CSR_Trramstarthigh_F_Trramstarthigh_Data;
logic [TR_TRRAMSTARTHIGH_TRRAMSTARTHIGH_WIDTH-1:0] CSR_Trramstarthigh_F_Trramstarthigh_DataEff;
assign CSR_Trramstarthigh_F_Trramstarthigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trramstarthigh_F_Trramstarthigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMSTARTHIGH)) ? TR_TRRAMSTARTHIGH_TRRAMSTARTHIGH_WIDTH'(update_value(64'(CSR_Trramstarthigh_F_Trramstarthigh), 64'(CSR_Trramstarthigh_F_Trramstarthigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrramstarthighWr.Data.Trramstarthigh);
assign CSR_Trramstarthigh_F_Trramstarthigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMSTARTHIGH)) | TrCsrTrramstarthighWr.TrramstarthighWrEn));
generic_dff #(.WIDTH(TR_TRRAMSTARTHIGH_TRRAMSTARTHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trramstarthigh_F_Trramstarthigh_ff   (.out(CSR_Trramstarthigh_F_Trramstarthigh), .in(CSR_Trramstarthigh_F_Trramstarthigh_Data), .en(CSR_Trramstarthigh_F_Trramstarthigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMLIMITLOW
logic                                           CSR_Trramlimitlow_F_Trramlimitlow_WrEn;
logic [TR_TRRAMLIMITLOW_TRRAMLIMITLOW_WIDTH-1:0] CSR_Trramlimitlow_F_Trramlimitlow_Data;
logic [TR_TRRAMLIMITLOW_TRRAMLIMITLOW_WIDTH-1:0] CSR_Trramlimitlow_F_Trramlimitlow_DataEff;
assign CSR_Trramlimitlow_F_Trramlimitlow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trramlimitlow_F_Trramlimitlow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMLIMITLOW)) ? TR_TRRAMLIMITLOW_TRRAMLIMITLOW_WIDTH'(update_value(64'(CSR_Trramlimitlow_F_Trramlimitlow), 64'(CSR_Trramlimitlow_F_Trramlimitlow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrramlimitlowWr.Data.Trramlimitlow);
assign CSR_Trramlimitlow_F_Trramlimitlow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMLIMITLOW)) | TrCsrTrramlimitlowWr.TrramlimitlowWrEn));
generic_dff #(.WIDTH(TR_TRRAMLIMITLOW_TRRAMLIMITLOW_WIDTH), .RESET_VALUE(30'h2000)) CSR_Trramlimitlow_F_Trramlimitlow_ff   (.out(CSR_Trramlimitlow_F_Trramlimitlow), .in(CSR_Trramlimitlow_F_Trramlimitlow_Data), .en(CSR_Trramlimitlow_F_Trramlimitlow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trramlimitlow_F_Rsvd10 = 2'h0;

//Register: CSR_TRRAMLIMITHIGH
logic                                           CSR_Trramlimithigh_F_Trramlimithigh_WrEn;
logic [TR_TRRAMLIMITHIGH_TRRAMLIMITHIGH_WIDTH-1:0] CSR_Trramlimithigh_F_Trramlimithigh_Data;
logic [TR_TRRAMLIMITHIGH_TRRAMLIMITHIGH_WIDTH-1:0] CSR_Trramlimithigh_F_Trramlimithigh_DataEff;
assign CSR_Trramlimithigh_F_Trramlimithigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trramlimithigh_F_Trramlimithigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMLIMITHIGH)) ? TR_TRRAMLIMITHIGH_TRRAMLIMITHIGH_WIDTH'(update_value(64'(CSR_Trramlimithigh_F_Trramlimithigh), 64'(CSR_Trramlimithigh_F_Trramlimithigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrramlimithighWr.Data.Trramlimithigh);
assign CSR_Trramlimithigh_F_Trramlimithigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMLIMITHIGH)) | TrCsrTrramlimithighWr.TrramlimithighWrEn));
generic_dff #(.WIDTH(TR_TRRAMLIMITHIGH_TRRAMLIMITHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trramlimithigh_F_Trramlimithigh_ff   (.out(CSR_Trramlimithigh_F_Trramlimithigh), .in(CSR_Trramlimithigh_F_Trramlimithigh_Data), .en(CSR_Trramlimithigh_F_Trramlimithigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMWPLOW
logic                                           CSR_Trramwplow_F_Trramwplow_WrEn;
logic [TR_TRRAMWPLOW_TRRAMWPLOW_WIDTH     -1:0] CSR_Trramwplow_F_Trramwplow_Data;
logic [TR_TRRAMWPLOW_TRRAMWPLOW_WIDTH     -1:0] CSR_Trramwplow_F_Trramwplow_DataEff;
assign CSR_Trramwplow_F_Trramwplow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trramwplow_F_Trramwplow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMWPLOW)) ? TR_TRRAMWPLOW_TRRAMWPLOW_WIDTH'(update_value(64'(CSR_Trramwplow_F_Trramwplow), 64'(CSR_Trramwplow_F_Trramwplow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrramwplowWr.Data.Trramwplow);
assign CSR_Trramwplow_F_Trramwplow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMWPLOW)) | TrCsrTrramwplowWr.TrramwplowWrEn));
generic_dff #(.WIDTH(TR_TRRAMWPLOW_TRRAMWPLOW_WIDTH), .RESET_VALUE(0)) CSR_Trramwplow_F_Trramwplow_ff   (.out(CSR_Trramwplow_F_Trramwplow), .in(CSR_Trramwplow_F_Trramwplow_Data), .en(CSR_Trramwplow_F_Trramwplow_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trramwplow_F_Trramwrap_WrEn;
logic [TR_TRRAMWPLOW_TRRAMWRAP_WIDTH      -1:0] CSR_Trramwplow_F_Trramwrap_Data;
logic [TR_TRRAMWPLOW_TRRAMWRAP_WIDTH      -1:0] CSR_Trramwplow_F_Trramwrap_DataEff;
assign CSR_Trramwplow_F_Trramwrap_DataEff = {reg_wr_data[0:0]};
assign CSR_Trramwplow_F_Trramwrap_Data = (TrCsrTrramwplowWr.Data.Trramwrap);
assign CSR_Trramwplow_F_Trramwrap_WrEn = ((TrCsrTrramwplowWr.TrramwrapWrEn));
generic_dff #(.WIDTH(TR_TRRAMWPLOW_TRRAMWRAP_WIDTH), .RESET_VALUE(0)) CSR_Trramwplow_F_Trramwrap_ff   (.out(CSR_Trramwplow_F_Trramwrap), .in(CSR_Trramwplow_F_Trramwrap_Data), .en(CSR_Trramwplow_F_Trramwrap_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMWPHIGH
logic                                           CSR_Trramwphigh_F_Trramwphigh_WrEn;
logic [TR_TRRAMWPHIGH_TRRAMWPHIGH_WIDTH   -1:0] CSR_Trramwphigh_F_Trramwphigh_Data;
logic [TR_TRRAMWPHIGH_TRRAMWPHIGH_WIDTH   -1:0] CSR_Trramwphigh_F_Trramwphigh_DataEff;
assign CSR_Trramwphigh_F_Trramwphigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trramwphigh_F_Trramwphigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMWPHIGH)) ? TR_TRRAMWPHIGH_TRRAMWPHIGH_WIDTH'(update_value(64'(CSR_Trramwphigh_F_Trramwphigh), 64'(CSR_Trramwphigh_F_Trramwphigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrramwphighWr.Data.Trramwphigh);
assign CSR_Trramwphigh_F_Trramwphigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMWPHIGH)) | TrCsrTrramwphighWr.TrramwphighWrEn));
generic_dff #(.WIDTH(TR_TRRAMWPHIGH_TRRAMWPHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trramwphigh_F_Trramwphigh_ff   (.out(CSR_Trramwphigh_F_Trramwphigh), .in(CSR_Trramwphigh_F_Trramwphigh_Data), .en(CSR_Trramwphigh_F_Trramwphigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMRPLOW
logic                                           CSR_Trramrplow_F_Trramrplow_WrEn;
logic [TR_TRRAMRPLOW_TRRAMRPLOW_WIDTH     -1:0] CSR_Trramrplow_F_Trramrplow_Data;
logic [TR_TRRAMRPLOW_TRRAMRPLOW_WIDTH     -1:0] CSR_Trramrplow_F_Trramrplow_DataEff;
assign CSR_Trramrplow_F_Trramrplow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trramrplow_F_Trramrplow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMRPLOW)) ? TR_TRRAMRPLOW_TRRAMRPLOW_WIDTH'(update_value(64'(CSR_Trramrplow_F_Trramrplow), 64'(CSR_Trramrplow_F_Trramrplow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrramrplowWr.Data.Trramrplow);
assign CSR_Trramrplow_F_Trramrplow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMRPLOW)) | TrCsrTrramrplowWr.TrramrplowWrEn));
generic_dff #(.WIDTH(TR_TRRAMRPLOW_TRRAMRPLOW_WIDTH), .RESET_VALUE(0)) CSR_Trramrplow_F_Trramrplow_ff   (.out(CSR_Trramrplow_F_Trramrplow), .in(CSR_Trramrplow_F_Trramrplow_Data), .en(CSR_Trramrplow_F_Trramrplow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trramrplow_F_Rsvd10 = 2'h0;

//Register: CSR_TRRAMRPHIGH
logic                                           CSR_Trramrphigh_F_Trramrphigh_WrEn;
logic [TR_TRRAMRPHIGH_TRRAMRPHIGH_WIDTH   -1:0] CSR_Trramrphigh_F_Trramrphigh_Data;
logic [TR_TRRAMRPHIGH_TRRAMRPHIGH_WIDTH   -1:0] CSR_Trramrphigh_F_Trramrphigh_DataEff;
assign CSR_Trramrphigh_F_Trramrphigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trramrphigh_F_Trramrphigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMRPHIGH)) ? TR_TRRAMRPHIGH_TRRAMRPHIGH_WIDTH'(update_value(64'(CSR_Trramrphigh_F_Trramrphigh), 64'(CSR_Trramrphigh_F_Trramrphigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrramrphighWr.Data.Trramrphigh);
assign CSR_Trramrphigh_F_Trramrphigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRRAMRPHIGH)) | TrCsrTrramrphighWr.TrramrphighWrEn));
generic_dff #(.WIDTH(TR_TRRAMRPHIGH_TRRAMRPHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trramrphigh_F_Trramrphigh_ff   (.out(CSR_Trramrphigh_F_Trramrphigh), .in(CSR_Trramrphigh_F_Trramrphigh_Data), .en(CSR_Trramrphigh_F_Trramrphigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRRAMDATA
logic                                           CSR_Trramdata_F_Trramdata_WrEn;
logic [TR_TRRAMDATA_TRRAMDATA_WIDTH       -1:0] CSR_Trramdata_F_Trramdata_Data;
logic [TR_TRRAMDATA_TRRAMDATA_WIDTH       -1:0] CSR_Trramdata_F_Trramdata_DataEff;
assign CSR_Trramdata_F_Trramdata_DataEff = {reg_wr_data[31:0]};
assign CSR_Trramdata_F_Trramdata_Data = (TrCsrTrramdataWr.Data.Trramdata);
assign CSR_Trramdata_F_Trramdata_WrEn = ((TrCsrTrramdataWr.TrramdataWrEn));
generic_dff #(.WIDTH(TR_TRRAMDATA_TRRAMDATA_WIDTH), .RESET_VALUE(0)) CSR_Trramdata_F_Trramdata_ff   (.out(CSR_Trramdata_F_Trramdata), .in(CSR_Trramdata_F_Trramdata_Data), .en(CSR_Trramdata_F_Trramdata_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRCUSTOMRAMSMEMLIMITLOW
logic                                           CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_WrEn;
logic [TR_TRCUSTOMRAMSMEMLIMITLOW_TRCUSTOMRAMSMEMLIMITLOW_WIDTH-1:0] CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_Data;
logic [TR_TRCUSTOMRAMSMEMLIMITLOW_TRCUSTOMRAMSMEMLIMITLOW_WIDTH-1:0] CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_DataEff;
assign CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_Data = (TR_TRCUSTOMRAMSMEMLIMITLOW_TRCUSTOMRAMSMEMLIMITLOW_WIDTH'(update_value(64'(CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow), 64'(CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_DataEff[29:0]), reg_wr_instr_type)));
assign CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCUSTOMRAMSMEMLIMITLOW))));
generic_dff #(.WIDTH(TR_TRCUSTOMRAMSMEMLIMITLOW_TRCUSTOMRAMSMEMLIMITLOW_WIDTH), .RESET_VALUE(30'h1000)) CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_ff   (.out(CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow), .in(CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_Data), .en(CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trcustomramsmemlimitlow_F_Rsvd10 = 2'h0;

//Register: CSR_TRDSTRAMCONTROL
logic                                           CSR_Trdstramcontrol_F_Trdstramstoponwrap_WrEn;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMSTOPONWRAP_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramstoponwrap_Data;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMSTOPONWRAP_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramstoponwrap_DataEff;
assign CSR_Trdstramcontrol_F_Trdstramstoponwrap_DataEff = {reg_wr_data[8:8]};
assign CSR_Trdstramcontrol_F_Trdstramstoponwrap_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) ? TR_TRDSTRAMCONTROL_TRDSTRAMSTOPONWRAP_WIDTH'(update_value(64'(CSR_Trdstramcontrol_F_Trdstramstoponwrap), 64'(CSR_Trdstramcontrol_F_Trdstramstoponwrap_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrdstramcontrolWr.Data.Trdstramstoponwrap);
assign CSR_Trdstramcontrol_F_Trdstramstoponwrap_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) | TrCsrTrdstramcontrolWr.TrdstramstoponwrapWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMCONTROL_TRDSTRAMSTOPONWRAP_WIDTH), .RESET_VALUE(0)) CSR_Trdstramcontrol_F_Trdstramstoponwrap_ff   (.out(CSR_Trdstramcontrol_F_Trdstramstoponwrap), .in(CSR_Trdstramcontrol_F_Trdstramstoponwrap_Data), .en(CSR_Trdstramcontrol_F_Trdstramstoponwrap_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstramcontrol_F_Trdstrammode_WrEn;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMMODE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstrammode_Data;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMMODE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstrammode_DataEff;
assign CSR_Trdstramcontrol_F_Trdstrammode_DataEff = {reg_wr_data[4:4]};
assign CSR_Trdstramcontrol_F_Trdstrammode_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) ? TR_TRDSTRAMCONTROL_TRDSTRAMMODE_WIDTH'(update_value(64'(CSR_Trdstramcontrol_F_Trdstrammode), 64'(CSR_Trdstramcontrol_F_Trdstrammode_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrdstramcontrolWr.Data.Trdstrammode);
assign CSR_Trdstramcontrol_F_Trdstrammode_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) | TrCsrTrdstramcontrolWr.TrdstrammodeWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMCONTROL_TRDSTRAMMODE_WIDTH), .RESET_VALUE(0)) CSR_Trdstramcontrol_F_Trdstrammode_ff   (.out(CSR_Trdstramcontrol_F_Trdstrammode), .in(CSR_Trdstramcontrol_F_Trdstrammode_Data), .en(CSR_Trdstramcontrol_F_Trdstrammode_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstramcontrol_F_Trdstramempty_WrEn;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMEMPTY_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramempty_Data;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMEMPTY_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramempty_DataEff;
assign CSR_Trdstramcontrol_F_Trdstramempty_DataEff = {reg_wr_data[3:3]};
assign CSR_Trdstramcontrol_F_Trdstramempty_Data = (TrCsrTrdstramcontrolWr.Data.Trdstramempty);
assign CSR_Trdstramcontrol_F_Trdstramempty_WrEn = ((TrCsrTrdstramcontrolWr.TrdstramemptyWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMCONTROL_TRDSTRAMEMPTY_WIDTH), .RESET_VALUE(1)) CSR_Trdstramcontrol_F_Trdstramempty_ff   (.out(CSR_Trdstramcontrol_F_Trdstramempty), .in(CSR_Trdstramcontrol_F_Trdstramempty_Data), .en(CSR_Trdstramcontrol_F_Trdstramempty_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstramcontrol_F_Trdstramenable_WrEn;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMENABLE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramenable_Data;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMENABLE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramenable_DataEff;
assign CSR_Trdstramcontrol_F_Trdstramenable_DataEff = {reg_wr_data[1:1]};
assign CSR_Trdstramcontrol_F_Trdstramenable_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) ? TR_TRDSTRAMCONTROL_TRDSTRAMENABLE_WIDTH'(update_value(64'(CSR_Trdstramcontrol_F_Trdstramenable), 64'(CSR_Trdstramcontrol_F_Trdstramenable_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrdstramcontrolWr.Data.Trdstramenable);
assign CSR_Trdstramcontrol_F_Trdstramenable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) | TrCsrTrdstramcontrolWr.TrdstramenableWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMCONTROL_TRDSTRAMENABLE_WIDTH), .RESET_VALUE(0)) CSR_Trdstramcontrol_F_Trdstramenable_ff   (.out(CSR_Trdstramcontrol_F_Trdstramenable), .in(CSR_Trdstramcontrol_F_Trdstramenable_Data), .en(CSR_Trdstramcontrol_F_Trdstramenable_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstramcontrol_F_Trdstramactive_WrEn;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMACTIVE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramactive_Data;
logic [TR_TRDSTRAMCONTROL_TRDSTRAMACTIVE_WIDTH-1:0] CSR_Trdstramcontrol_F_Trdstramactive_DataEff;
assign CSR_Trdstramcontrol_F_Trdstramactive_DataEff = {reg_wr_data[0:0]};
assign CSR_Trdstramcontrol_F_Trdstramactive_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) ? TR_TRDSTRAMCONTROL_TRDSTRAMACTIVE_WIDTH'(update_value(64'(CSR_Trdstramcontrol_F_Trdstramactive), 64'(CSR_Trdstramcontrol_F_Trdstramactive_DataEff[0:0]), reg_wr_instr_type)) : TrCsrTrdstramcontrolWr.Data.Trdstramactive);
assign CSR_Trdstramcontrol_F_Trdstramactive_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMCONTROL)) | TrCsrTrdstramcontrolWr.TrdstramactiveWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMCONTROL_TRDSTRAMACTIVE_WIDTH), .RESET_VALUE(0)) CSR_Trdstramcontrol_F_Trdstramactive_ff   (.out(CSR_Trdstramcontrol_F_Trdstramactive), .in(CSR_Trdstramcontrol_F_Trdstramactive_Data), .en(CSR_Trdstramcontrol_F_Trdstramactive_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMIMPL
logic                                           CSR_Trdstramimpl_F_Trdstramvendorframelength_WrEn;
logic [TR_TRDSTRAMIMPL_TRDSTRAMVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trdstramimpl_F_Trdstramvendorframelength_Data;
logic [TR_TRDSTRAMIMPL_TRDSTRAMVENDORFRAMELENGTH_WIDTH-1:0] CSR_Trdstramimpl_F_Trdstramvendorframelength_DataEff;
assign CSR_Trdstramimpl_F_Trdstramvendorframelength_DataEff = {reg_wr_data[27:24]};
assign CSR_Trdstramimpl_F_Trdstramvendorframelength_Data = (TR_TRDSTRAMIMPL_TRDSTRAMVENDORFRAMELENGTH_WIDTH'(update_value(64'(CSR_Trdstramimpl_F_Trdstramvendorframelength), 64'(CSR_Trdstramimpl_F_Trdstramvendorframelength_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_Trdstramimpl_F_Trdstramvendorframelength_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMIMPL))));
generic_dff #(.WIDTH(TR_TRDSTRAMIMPL_TRDSTRAMVENDORFRAMELENGTH_WIDTH), .RESET_VALUE(1)) CSR_Trdstramimpl_F_Trdstramvendorframelength_ff   (.out(CSR_Trdstramimpl_F_Trdstramvendorframelength), .in(CSR_Trdstramimpl_F_Trdstramvendorframelength_Data), .en(CSR_Trdstramimpl_F_Trdstramvendorframelength_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstramimpl_F_Trdstramhassmem = 1'h1;

assign CSR_Trdstramimpl_F_Trdstramhassram = 1'h1;

assign CSR_Trdstramimpl_F_Trdstramcomptype = 4'h9;

assign CSR_Trdstramimpl_F_Trdstramverminor = 4'h0;

assign CSR_Trdstramimpl_F_Trdstramvermajor = 4'h1;

//Register: CSR_TRDSTRAMSTARTLOW
logic                                           CSR_Trdstramstartlow_F_Trdstramstartlow_WrEn;
logic [TR_TRDSTRAMSTARTLOW_TRDSTRAMSTARTLOW_WIDTH-1:0] CSR_Trdstramstartlow_F_Trdstramstartlow_Data;
logic [TR_TRDSTRAMSTARTLOW_TRDSTRAMSTARTLOW_WIDTH-1:0] CSR_Trdstramstartlow_F_Trdstramstartlow_DataEff;
assign CSR_Trdstramstartlow_F_Trdstramstartlow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trdstramstartlow_F_Trdstramstartlow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMSTARTLOW)) ? TR_TRDSTRAMSTARTLOW_TRDSTRAMSTARTLOW_WIDTH'(update_value(64'(CSR_Trdstramstartlow_F_Trdstramstartlow), 64'(CSR_Trdstramstartlow_F_Trdstramstartlow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrdstramstartlowWr.Data.Trdstramstartlow);
assign CSR_Trdstramstartlow_F_Trdstramstartlow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMSTARTLOW)) | TrCsrTrdstramstartlowWr.TrdstramstartlowWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMSTARTLOW_TRDSTRAMSTARTLOW_WIDTH), .RESET_VALUE(0)) CSR_Trdstramstartlow_F_Trdstramstartlow_ff   (.out(CSR_Trdstramstartlow_F_Trdstramstartlow), .in(CSR_Trdstramstartlow_F_Trdstramstartlow_Data), .en(CSR_Trdstramstartlow_F_Trdstramstartlow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstramstartlow_F_Rsvd10 = 2'h0;

//Register: CSR_TRDSTRAMSTARTHIGH
logic                                           CSR_Trdstramstarthigh_F_Trdstramstarthigh_WrEn;
logic [TR_TRDSTRAMSTARTHIGH_TRDSTRAMSTARTHIGH_WIDTH-1:0] CSR_Trdstramstarthigh_F_Trdstramstarthigh_Data;
logic [TR_TRDSTRAMSTARTHIGH_TRDSTRAMSTARTHIGH_WIDTH-1:0] CSR_Trdstramstarthigh_F_Trdstramstarthigh_DataEff;
assign CSR_Trdstramstarthigh_F_Trdstramstarthigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trdstramstarthigh_F_Trdstramstarthigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMSTARTHIGH)) ? TR_TRDSTRAMSTARTHIGH_TRDSTRAMSTARTHIGH_WIDTH'(update_value(64'(CSR_Trdstramstarthigh_F_Trdstramstarthigh), 64'(CSR_Trdstramstarthigh_F_Trdstramstarthigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrdstramstarthighWr.Data.Trdstramstarthigh);
assign CSR_Trdstramstarthigh_F_Trdstramstarthigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMSTARTHIGH)) | TrCsrTrdstramstarthighWr.TrdstramstarthighWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMSTARTHIGH_TRDSTRAMSTARTHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trdstramstarthigh_F_Trdstramstarthigh_ff   (.out(CSR_Trdstramstarthigh_F_Trdstramstarthigh), .in(CSR_Trdstramstarthigh_F_Trdstramstarthigh_Data), .en(CSR_Trdstramstarthigh_F_Trdstramstarthigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMLIMITLOW
logic                                           CSR_Trdstramlimitlow_F_Trdstramlimitlow_WrEn;
logic [TR_TRDSTRAMLIMITLOW_TRDSTRAMLIMITLOW_WIDTH-1:0] CSR_Trdstramlimitlow_F_Trdstramlimitlow_Data;
logic [TR_TRDSTRAMLIMITLOW_TRDSTRAMLIMITLOW_WIDTH-1:0] CSR_Trdstramlimitlow_F_Trdstramlimitlow_DataEff;
assign CSR_Trdstramlimitlow_F_Trdstramlimitlow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trdstramlimitlow_F_Trdstramlimitlow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMLIMITLOW)) ? TR_TRDSTRAMLIMITLOW_TRDSTRAMLIMITLOW_WIDTH'(update_value(64'(CSR_Trdstramlimitlow_F_Trdstramlimitlow), 64'(CSR_Trdstramlimitlow_F_Trdstramlimitlow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrdstramlimitlowWr.Data.Trdstramlimitlow);
assign CSR_Trdstramlimitlow_F_Trdstramlimitlow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMLIMITLOW)) | TrCsrTrdstramlimitlowWr.TrdstramlimitlowWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMLIMITLOW_TRDSTRAMLIMITLOW_WIDTH), .RESET_VALUE(0)) CSR_Trdstramlimitlow_F_Trdstramlimitlow_ff   (.out(CSR_Trdstramlimitlow_F_Trdstramlimitlow), .in(CSR_Trdstramlimitlow_F_Trdstramlimitlow_Data), .en(CSR_Trdstramlimitlow_F_Trdstramlimitlow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstramlimitlow_F_Rsvd10 = 2'h0;

//Register: CSR_TRDSTRAMLIMITHIGH
logic                                           CSR_Trdstramlimithigh_F_Trdstramlimithigh_WrEn;
logic [TR_TRDSTRAMLIMITHIGH_TRDSTRAMLIMITHIGH_WIDTH-1:0] CSR_Trdstramlimithigh_F_Trdstramlimithigh_Data;
logic [TR_TRDSTRAMLIMITHIGH_TRDSTRAMLIMITHIGH_WIDTH-1:0] CSR_Trdstramlimithigh_F_Trdstramlimithigh_DataEff;
assign CSR_Trdstramlimithigh_F_Trdstramlimithigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trdstramlimithigh_F_Trdstramlimithigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMLIMITHIGH)) ? TR_TRDSTRAMLIMITHIGH_TRDSTRAMLIMITHIGH_WIDTH'(update_value(64'(CSR_Trdstramlimithigh_F_Trdstramlimithigh), 64'(CSR_Trdstramlimithigh_F_Trdstramlimithigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrdstramlimithighWr.Data.Trdstramlimithigh);
assign CSR_Trdstramlimithigh_F_Trdstramlimithigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMLIMITHIGH)) | TrCsrTrdstramlimithighWr.TrdstramlimithighWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMLIMITHIGH_TRDSTRAMLIMITHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trdstramlimithigh_F_Trdstramlimithigh_ff   (.out(CSR_Trdstramlimithigh_F_Trdstramlimithigh), .in(CSR_Trdstramlimithigh_F_Trdstramlimithigh_Data), .en(CSR_Trdstramlimithigh_F_Trdstramlimithigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMWPLOW
logic                                           CSR_Trdstramwplow_F_Trdstramwplow_WrEn;
logic [TR_TRDSTRAMWPLOW_TRDSTRAMWPLOW_WIDTH-1:0] CSR_Trdstramwplow_F_Trdstramwplow_Data;
logic [TR_TRDSTRAMWPLOW_TRDSTRAMWPLOW_WIDTH-1:0] CSR_Trdstramwplow_F_Trdstramwplow_DataEff;
assign CSR_Trdstramwplow_F_Trdstramwplow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trdstramwplow_F_Trdstramwplow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMWPLOW)) ? TR_TRDSTRAMWPLOW_TRDSTRAMWPLOW_WIDTH'(update_value(64'(CSR_Trdstramwplow_F_Trdstramwplow), 64'(CSR_Trdstramwplow_F_Trdstramwplow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrdstramwplowWr.Data.Trdstramwplow);
assign CSR_Trdstramwplow_F_Trdstramwplow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMWPLOW)) | TrCsrTrdstramwplowWr.TrdstramwplowWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMWPLOW_TRDSTRAMWPLOW_WIDTH), .RESET_VALUE(0)) CSR_Trdstramwplow_F_Trdstramwplow_ff   (.out(CSR_Trdstramwplow_F_Trdstramwplow), .in(CSR_Trdstramwplow_F_Trdstramwplow_Data), .en(CSR_Trdstramwplow_F_Trdstramwplow_WrEn), .clk(clk), .rst_n(reset_n));

logic                                           CSR_Trdstramwplow_F_Trdstramwrap_WrEn;
logic [TR_TRDSTRAMWPLOW_TRDSTRAMWRAP_WIDTH-1:0] CSR_Trdstramwplow_F_Trdstramwrap_Data;
logic [TR_TRDSTRAMWPLOW_TRDSTRAMWRAP_WIDTH-1:0] CSR_Trdstramwplow_F_Trdstramwrap_DataEff;
assign CSR_Trdstramwplow_F_Trdstramwrap_DataEff = {reg_wr_data[0:0]};
assign CSR_Trdstramwplow_F_Trdstramwrap_Data = (TrCsrTrdstramwplowWr.Data.Trdstramwrap);
assign CSR_Trdstramwplow_F_Trdstramwrap_WrEn = ((TrCsrTrdstramwplowWr.TrdstramwrapWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMWPLOW_TRDSTRAMWRAP_WIDTH), .RESET_VALUE(0)) CSR_Trdstramwplow_F_Trdstramwrap_ff   (.out(CSR_Trdstramwplow_F_Trdstramwrap), .in(CSR_Trdstramwplow_F_Trdstramwrap_Data), .en(CSR_Trdstramwplow_F_Trdstramwrap_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMWPHIGH
logic                                           CSR_Trdstramwphigh_F_Trdstramwphigh_WrEn;
logic [TR_TRDSTRAMWPHIGH_TRDSTRAMWPHIGH_WIDTH-1:0] CSR_Trdstramwphigh_F_Trdstramwphigh_Data;
logic [TR_TRDSTRAMWPHIGH_TRDSTRAMWPHIGH_WIDTH-1:0] CSR_Trdstramwphigh_F_Trdstramwphigh_DataEff;
assign CSR_Trdstramwphigh_F_Trdstramwphigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trdstramwphigh_F_Trdstramwphigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMWPHIGH)) ? TR_TRDSTRAMWPHIGH_TRDSTRAMWPHIGH_WIDTH'(update_value(64'(CSR_Trdstramwphigh_F_Trdstramwphigh), 64'(CSR_Trdstramwphigh_F_Trdstramwphigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrdstramwphighWr.Data.Trdstramwphigh);
assign CSR_Trdstramwphigh_F_Trdstramwphigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMWPHIGH)) | TrCsrTrdstramwphighWr.TrdstramwphighWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMWPHIGH_TRDSTRAMWPHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trdstramwphigh_F_Trdstramwphigh_ff   (.out(CSR_Trdstramwphigh_F_Trdstramwphigh), .in(CSR_Trdstramwphigh_F_Trdstramwphigh_Data), .en(CSR_Trdstramwphigh_F_Trdstramwphigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMRPLOW
logic                                           CSR_Trdstramrplow_F_Trdstramrplow_WrEn;
logic [TR_TRDSTRAMRPLOW_TRDSTRAMRPLOW_WIDTH-1:0] CSR_Trdstramrplow_F_Trdstramrplow_Data;
logic [TR_TRDSTRAMRPLOW_TRDSTRAMRPLOW_WIDTH-1:0] CSR_Trdstramrplow_F_Trdstramrplow_DataEff;
assign CSR_Trdstramrplow_F_Trdstramrplow_DataEff = {reg_wr_data[31:2]};
assign CSR_Trdstramrplow_F_Trdstramrplow_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMRPLOW)) ? TR_TRDSTRAMRPLOW_TRDSTRAMRPLOW_WIDTH'(update_value(64'(CSR_Trdstramrplow_F_Trdstramrplow), 64'(CSR_Trdstramrplow_F_Trdstramrplow_DataEff[29:0]), reg_wr_instr_type)) : TrCsrTrdstramrplowWr.Data.Trdstramrplow);
assign CSR_Trdstramrplow_F_Trdstramrplow_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMRPLOW)) | TrCsrTrdstramrplowWr.TrdstramrplowWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMRPLOW_TRDSTRAMRPLOW_WIDTH), .RESET_VALUE(0)) CSR_Trdstramrplow_F_Trdstramrplow_ff   (.out(CSR_Trdstramrplow_F_Trdstramrplow), .in(CSR_Trdstramrplow_F_Trdstramrplow_Data), .en(CSR_Trdstramrplow_F_Trdstramrplow_WrEn), .clk(clk), .rst_n(reset_n));

assign CSR_Trdstramrplow_F_Rsvd10 = 2'h0;

//Register: CSR_TRDSTRAMRPHIGH
logic                                           CSR_Trdstramrphigh_F_Trdstramrphigh_WrEn;
logic [TR_TRDSTRAMRPHIGH_TRDSTRAMRPHIGH_WIDTH-1:0] CSR_Trdstramrphigh_F_Trdstramrphigh_Data;
logic [TR_TRDSTRAMRPHIGH_TRDSTRAMRPHIGH_WIDTH-1:0] CSR_Trdstramrphigh_F_Trdstramrphigh_DataEff;
assign CSR_Trdstramrphigh_F_Trdstramrphigh_DataEff = {reg_wr_data[31:0]};
assign CSR_Trdstramrphigh_F_Trdstramrphigh_Data = ((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMRPHIGH)) ? TR_TRDSTRAMRPHIGH_TRDSTRAMRPHIGH_WIDTH'(update_value(64'(CSR_Trdstramrphigh_F_Trdstramrphigh), 64'(CSR_Trdstramrphigh_F_Trdstramrphigh_DataEff[31:0]), reg_wr_instr_type)) : TrCsrTrdstramrphighWr.Data.Trdstramrphigh);
assign CSR_Trdstramrphigh_F_Trdstramrphigh_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRDSTRAMRPHIGH)) | TrCsrTrdstramrphighWr.TrdstramrphighWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMRPHIGH_TRDSTRAMRPHIGH_WIDTH), .RESET_VALUE(0)) CSR_Trdstramrphigh_F_Trdstramrphigh_ff   (.out(CSR_Trdstramrphigh_F_Trdstramrphigh), .in(CSR_Trdstramrphigh_F_Trdstramrphigh_Data), .en(CSR_Trdstramrphigh_F_Trdstramrphigh_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRDSTRAMDATA
logic                                           CSR_Trdstramdata_F_Trdstramdata_WrEn;
logic [TR_TRDSTRAMDATA_TRDSTRAMDATA_WIDTH -1:0] CSR_Trdstramdata_F_Trdstramdata_Data;
logic [TR_TRDSTRAMDATA_TRDSTRAMDATA_WIDTH -1:0] CSR_Trdstramdata_F_Trdstramdata_DataEff;
assign CSR_Trdstramdata_F_Trdstramdata_DataEff = {reg_wr_data[31:0]};
assign CSR_Trdstramdata_F_Trdstramdata_Data = (TrCsrTrdstramdataWr.Data.Trdstramdata);
assign CSR_Trdstramdata_F_Trdstramdata_WrEn = ((TrCsrTrdstramdataWr.TrdstramdataWrEn));
generic_dff #(.WIDTH(TR_TRDSTRAMDATA_TRDSTRAMDATA_WIDTH), .RESET_VALUE(0)) CSR_Trdstramdata_F_Trdstramdata_ff   (.out(CSR_Trdstramdata_F_Trdstramdata), .in(CSR_Trdstramdata_F_Trdstramdata_Data), .en(CSR_Trdstramdata_F_Trdstramdata_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRCLUSTERFUSECFGLOW
logic                                           CSR_TrClusterFuseCfgLow_F_Core3Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE3VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core3Vid_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE3VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core3Vid_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core3Vid_DataEff = {reg_wr_data[31:29]};
assign CSR_TrClusterFuseCfgLow_F_Core3Vid_Data = (TR_TRCLUSTERFUSECFGLOW_CORE3VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core3Vid), 64'(CSR_TrClusterFuseCfgLow_F_Core3Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core3Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE3VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core3Vid_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core3Vid), .in(CSR_TrClusterFuseCfgLow_F_Core3Vid_Data), .en(CSR_TrClusterFuseCfgLow_F_Core3Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core3Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE3ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core3Enable_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE3ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core3Enable_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core3Enable_DataEff = {reg_wr_data[28:28]};
assign CSR_TrClusterFuseCfgLow_F_Core3Enable_Data = (TR_TRCLUSTERFUSECFGLOW_CORE3ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core3Enable), 64'(CSR_TrClusterFuseCfgLow_F_Core3Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core3Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE3ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core3Enable_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core3Enable), .in(CSR_TrClusterFuseCfgLow_F_Core3Enable_Data), .en(CSR_TrClusterFuseCfgLow_F_Core3Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core2Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE2VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core2Vid_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE2VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core2Vid_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core2Vid_DataEff = {reg_wr_data[27:25]};
assign CSR_TrClusterFuseCfgLow_F_Core2Vid_Data = (TR_TRCLUSTERFUSECFGLOW_CORE2VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core2Vid), 64'(CSR_TrClusterFuseCfgLow_F_Core2Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core2Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE2VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core2Vid_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core2Vid), .in(CSR_TrClusterFuseCfgLow_F_Core2Vid_Data), .en(CSR_TrClusterFuseCfgLow_F_Core2Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core2Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE2ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core2Enable_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE2ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core2Enable_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core2Enable_DataEff = {reg_wr_data[24:24]};
assign CSR_TrClusterFuseCfgLow_F_Core2Enable_Data = (TR_TRCLUSTERFUSECFGLOW_CORE2ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core2Enable), 64'(CSR_TrClusterFuseCfgLow_F_Core2Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core2Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE2ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core2Enable_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core2Enable), .in(CSR_TrClusterFuseCfgLow_F_Core2Enable_Data), .en(CSR_TrClusterFuseCfgLow_F_Core2Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core1Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE1VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core1Vid_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE1VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core1Vid_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core1Vid_DataEff = {reg_wr_data[23:21]};
assign CSR_TrClusterFuseCfgLow_F_Core1Vid_Data = (TR_TRCLUSTERFUSECFGLOW_CORE1VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core1Vid), 64'(CSR_TrClusterFuseCfgLow_F_Core1Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core1Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE1VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core1Vid_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core1Vid), .in(CSR_TrClusterFuseCfgLow_F_Core1Vid_Data), .en(CSR_TrClusterFuseCfgLow_F_Core1Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core1Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE1ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core1Enable_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE1ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core1Enable_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core1Enable_DataEff = {reg_wr_data[20:20]};
assign CSR_TrClusterFuseCfgLow_F_Core1Enable_Data = (TR_TRCLUSTERFUSECFGLOW_CORE1ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core1Enable), 64'(CSR_TrClusterFuseCfgLow_F_Core1Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core1Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE1ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core1Enable_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core1Enable), .in(CSR_TrClusterFuseCfgLow_F_Core1Enable_Data), .en(CSR_TrClusterFuseCfgLow_F_Core1Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core0Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE0VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core0Vid_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE0VID_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core0Vid_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core0Vid_DataEff = {reg_wr_data[19:17]};
assign CSR_TrClusterFuseCfgLow_F_Core0Vid_Data = (TR_TRCLUSTERFUSECFGLOW_CORE0VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core0Vid), 64'(CSR_TrClusterFuseCfgLow_F_Core0Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core0Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE0VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core0Vid_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core0Vid), .in(CSR_TrClusterFuseCfgLow_F_Core0Vid_Data), .en(CSR_TrClusterFuseCfgLow_F_Core0Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Core0Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_CORE0ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core0Enable_Data;
logic [TR_TRCLUSTERFUSECFGLOW_CORE0ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Core0Enable_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Core0Enable_DataEff = {reg_wr_data[16:16]};
assign CSR_TrClusterFuseCfgLow_F_Core0Enable_Data = (TR_TRCLUSTERFUSECFGLOW_CORE0ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Core0Enable), 64'(CSR_TrClusterFuseCfgLow_F_Core0Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Core0Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_CORE0ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Core0Enable_ff   (.out(CSR_TrClusterFuseCfgLow_F_Core0Enable), .in(CSR_TrClusterFuseCfgLow_F_Core0Enable_Data), .en(CSR_TrClusterFuseCfgLow_F_Core0Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Rsvd1512_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_RSVD1512_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Rsvd1512_Data;
logic [TR_TRCLUSTERFUSECFGLOW_RSVD1512_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Rsvd1512_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Rsvd1512_DataEff = {reg_wr_data[15:12]};
assign CSR_TrClusterFuseCfgLow_F_Rsvd1512_Data = (TR_TRCLUSTERFUSECFGLOW_RSVD1512_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Rsvd1512), 64'(CSR_TrClusterFuseCfgLow_F_Rsvd1512_DataEff[3:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Rsvd1512_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_RSVD1512_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Rsvd1512_ff   (.out(CSR_TrClusterFuseCfgLow_F_Rsvd1512), .in(CSR_TrClusterFuseCfgLow_F_Rsvd1512_Data), .en(CSR_TrClusterFuseCfgLow_F_Rsvd1512_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_IOCOHERENCYDISABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_Data;
logic [TR_TRCLUSTERFUSECFGLOW_IOCOHERENCYDISABLE_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_DataEff;
assign CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_DataEff = {reg_wr_data[11:11]};
assign CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_Data = (TR_TRCLUSTERFUSECFGLOW_IOCOHERENCYDISABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable), 64'(CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_IOCOHERENCYDISABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_ff   (.out(CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable), .in(CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_Data), .en(CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_EXPORTRESTRICTIONENABLED_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_Data;
logic [TR_TRCLUSTERFUSECFGLOW_EXPORTRESTRICTIONENABLED_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_DataEff;
assign CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_DataEff = {reg_wr_data[10:10]};
assign CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_Data = (TR_TRCLUSTERFUSECFGLOW_EXPORTRESTRICTIONENABLED_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled), 64'(CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_EXPORTRESTRICTIONENABLED_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_ff   (.out(CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled), .in(CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_Data), .en(CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_Rsvd98_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_RSVD98_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Rsvd98_Data;
logic [TR_TRCLUSTERFUSECFGLOW_RSVD98_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_Rsvd98_DataEff;
assign CSR_TrClusterFuseCfgLow_F_Rsvd98_DataEff = {reg_wr_data[9:8]};
assign CSR_TrClusterFuseCfgLow_F_Rsvd98_Data = (TR_TRCLUSTERFUSECFGLOW_RSVD98_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_Rsvd98), 64'(CSR_TrClusterFuseCfgLow_F_Rsvd98_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_Rsvd98_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_RSVD98_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_Rsvd98_ff   (.out(CSR_TrClusterFuseCfgLow_F_Rsvd98), .in(CSR_TrClusterFuseCfgLow_F_Rsvd98_Data), .en(CSR_TrClusterFuseCfgLow_F_Rsvd98_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_WrEn;
logic [TR_TRCLUSTERFUSECFGLOW_SCHARVESTSTRAP_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_Data;
logic [TR_TRCLUSTERFUSECFGLOW_SCHARVESTSTRAP_WIDTH-1:0] CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_DataEff;
assign CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_DataEff = {reg_wr_data[7:0]};
assign CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_Data = (TR_TRCLUSTERFUSECFGLOW_SCHARVESTSTRAP_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgLow_F_ScHarvestStrap), 64'(CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_DataEff[7:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGLOW)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGLOW_SCHARVESTSTRAP_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_ff   (.out(CSR_TrClusterFuseCfgLow_F_ScHarvestStrap), .in(CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_Data), .en(CSR_TrClusterFuseCfgLow_F_ScHarvestStrap_WrEn), .clk(clk), .rst_n(cold_resetn));

//Register: CSR_TRCLUSTERFUSECFGHI
logic                                           CSR_TrClusterFuseCfgHi_F_Lock_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_LOCK_WIDTH   -1:0] CSR_TrClusterFuseCfgHi_F_Lock_Data;
logic [TR_TRCLUSTERFUSECFGHI_LOCK_WIDTH   -1:0] CSR_TrClusterFuseCfgHi_F_Lock_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Lock_DataEff = {reg_wr_data[31:31]};
assign CSR_TrClusterFuseCfgHi_F_Lock_Data = (TR_TRCLUSTERFUSECFGHI_LOCK_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Lock), 64'(CSR_TrClusterFuseCfgHi_F_Lock_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Lock_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_LOCK_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Lock_ff   (.out(CSR_TrClusterFuseCfgHi_F_Lock), .in(CSR_TrClusterFuseCfgHi_F_Lock_Data), .en(CSR_TrClusterFuseCfgHi_F_Lock_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Rsvd3022_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_RSVD3022_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Rsvd3022_Data;
logic [TR_TRCLUSTERFUSECFGHI_RSVD3022_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Rsvd3022_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Rsvd3022_DataEff = {reg_wr_data[30:22]};
assign CSR_TrClusterFuseCfgHi_F_Rsvd3022_Data = (TR_TRCLUSTERFUSECFGHI_RSVD3022_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Rsvd3022), 64'(CSR_TrClusterFuseCfgHi_F_Rsvd3022_DataEff[8:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Rsvd3022_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_RSVD3022_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Rsvd3022_ff   (.out(CSR_TrClusterFuseCfgHi_F_Rsvd3022), .in(CSR_TrClusterFuseCfgHi_F_Rsvd3022_Data), .en(CSR_TrClusterFuseCfgHi_F_Rsvd3022_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_JTAG2UARCHENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_Data;
logic [TR_TRCLUSTERFUSECFGHI_JTAG2UARCHENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_DataEff = {reg_wr_data[21:21]};
assign CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_Data = (TR_TRCLUSTERFUSECFGHI_JTAG2UARCHENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable), 64'(CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_JTAG2UARCHENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_ff   (.out(CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable), .in(CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_Data), .en(CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_DstEnable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_DSTENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_DstEnable_Data;
logic [TR_TRCLUSTERFUSECFGHI_DSTENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_DstEnable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_DstEnable_DataEff = {reg_wr_data[20:20]};
assign CSR_TrClusterFuseCfgHi_F_DstEnable_Data = (TR_TRCLUSTERFUSECFGHI_DSTENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_DstEnable), 64'(CSR_TrClusterFuseCfgHi_F_DstEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_DstEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_DSTENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_DstEnable_ff   (.out(CSR_TrClusterFuseCfgHi_F_DstEnable), .in(CSR_TrClusterFuseCfgHi_F_DstEnable_Data), .en(CSR_TrClusterFuseCfgHi_F_DstEnable_WrEn), .clk(clk), .rst_n(cold_resetn));
logic                                           CSR_TrClusterFuseCfgHi_F_TraceEnable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_TRACEENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_TraceEnable_Data;
logic [TR_TRCLUSTERFUSECFGHI_TRACEENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_TraceEnable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_TraceEnable_DataEff = {reg_wr_data[19:19]};
assign CSR_TrClusterFuseCfgHi_F_TraceEnable_Data = (TR_TRCLUSTERFUSECFGHI_TRACEENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_TraceEnable), 64'(CSR_TrClusterFuseCfgHi_F_TraceEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_TraceEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_TRACEENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_TraceEnable_ff   (.out(CSR_TrClusterFuseCfgHi_F_TraceEnable), .in(CSR_TrClusterFuseCfgHi_F_TraceEnable_Data), .en(CSR_TrClusterFuseCfgHi_F_TraceEnable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_ClaEnable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CLAENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_ClaEnable_Data;
logic [TR_TRCLUSTERFUSECFGHI_CLAENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_ClaEnable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_ClaEnable_DataEff = {reg_wr_data[18:18]};
assign CSR_TrClusterFuseCfgHi_F_ClaEnable_Data = (TR_TRCLUSTERFUSECFGHI_CLAENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_ClaEnable), 64'(CSR_TrClusterFuseCfgHi_F_ClaEnable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_ClaEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CLAENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_ClaEnable_ff   (.out(CSR_TrClusterFuseCfgHi_F_ClaEnable), .in(CSR_TrClusterFuseCfgHi_F_ClaEnable_Data), .en(CSR_TrClusterFuseCfgHi_F_ClaEnable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_DebugEnable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_DEBUGENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_DebugEnable_Data;
logic [TR_TRCLUSTERFUSECFGHI_DEBUGENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_DebugEnable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_DebugEnable_DataEff = {reg_wr_data[17:16]};
assign CSR_TrClusterFuseCfgHi_F_DebugEnable_Data = (TR_TRCLUSTERFUSECFGHI_DEBUGENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_DebugEnable), 64'(CSR_TrClusterFuseCfgHi_F_DebugEnable_DataEff[1:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_DebugEnable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_DEBUGENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_DebugEnable_ff   (.out(CSR_TrClusterFuseCfgHi_F_DebugEnable), .in(CSR_TrClusterFuseCfgHi_F_DebugEnable_Data), .en(CSR_TrClusterFuseCfgHi_F_DebugEnable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core7Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE7VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core7Vid_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE7VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core7Vid_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core7Vid_DataEff = {reg_wr_data[15:13]};
assign CSR_TrClusterFuseCfgHi_F_Core7Vid_Data = (TR_TRCLUSTERFUSECFGHI_CORE7VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core7Vid), 64'(CSR_TrClusterFuseCfgHi_F_Core7Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core7Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE7VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core7Vid_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core7Vid), .in(CSR_TrClusterFuseCfgHi_F_Core7Vid_Data), .en(CSR_TrClusterFuseCfgHi_F_Core7Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core7Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE7ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core7Enable_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE7ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core7Enable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core7Enable_DataEff = {reg_wr_data[12:12]};
assign CSR_TrClusterFuseCfgHi_F_Core7Enable_Data = (TR_TRCLUSTERFUSECFGHI_CORE7ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core7Enable), 64'(CSR_TrClusterFuseCfgHi_F_Core7Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core7Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE7ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core7Enable_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core7Enable), .in(CSR_TrClusterFuseCfgHi_F_Core7Enable_Data), .en(CSR_TrClusterFuseCfgHi_F_Core7Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core6Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE6VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core6Vid_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE6VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core6Vid_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core6Vid_DataEff = {reg_wr_data[11:9]};
assign CSR_TrClusterFuseCfgHi_F_Core6Vid_Data = (TR_TRCLUSTERFUSECFGHI_CORE6VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core6Vid), 64'(CSR_TrClusterFuseCfgHi_F_Core6Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core6Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE6VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core6Vid_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core6Vid), .in(CSR_TrClusterFuseCfgHi_F_Core6Vid_Data), .en(CSR_TrClusterFuseCfgHi_F_Core6Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core6Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE6ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core6Enable_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE6ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core6Enable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core6Enable_DataEff = {reg_wr_data[8:8]};
assign CSR_TrClusterFuseCfgHi_F_Core6Enable_Data = (TR_TRCLUSTERFUSECFGHI_CORE6ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core6Enable), 64'(CSR_TrClusterFuseCfgHi_F_Core6Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core6Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE6ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core6Enable_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core6Enable), .in(CSR_TrClusterFuseCfgHi_F_Core6Enable_Data), .en(CSR_TrClusterFuseCfgHi_F_Core6Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core5Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE5VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core5Vid_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE5VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core5Vid_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core5Vid_DataEff = {reg_wr_data[7:5]};
assign CSR_TrClusterFuseCfgHi_F_Core5Vid_Data = (TR_TRCLUSTERFUSECFGHI_CORE5VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core5Vid), 64'(CSR_TrClusterFuseCfgHi_F_Core5Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core5Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE5VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core5Vid_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core5Vid), .in(CSR_TrClusterFuseCfgHi_F_Core5Vid_Data), .en(CSR_TrClusterFuseCfgHi_F_Core5Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core5Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE5ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core5Enable_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE5ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core5Enable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core5Enable_DataEff = {reg_wr_data[4:4]};
assign CSR_TrClusterFuseCfgHi_F_Core5Enable_Data = (TR_TRCLUSTERFUSECFGHI_CORE5ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core5Enable), 64'(CSR_TrClusterFuseCfgHi_F_Core5Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core5Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE5ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core5Enable_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core5Enable), .in(CSR_TrClusterFuseCfgHi_F_Core5Enable_Data), .en(CSR_TrClusterFuseCfgHi_F_Core5Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core4Vid_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE4VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core4Vid_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE4VID_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core4Vid_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core4Vid_DataEff = {reg_wr_data[3:1]};
assign CSR_TrClusterFuseCfgHi_F_Core4Vid_Data = (TR_TRCLUSTERFUSECFGHI_CORE4VID_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core4Vid), 64'(CSR_TrClusterFuseCfgHi_F_Core4Vid_DataEff[2:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core4Vid_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE4VID_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core4Vid_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core4Vid), .in(CSR_TrClusterFuseCfgHi_F_Core4Vid_Data), .en(CSR_TrClusterFuseCfgHi_F_Core4Vid_WrEn), .clk(clk), .rst_n(cold_resetn));

logic                                           CSR_TrClusterFuseCfgHi_F_Core4Enable_WrEn;
logic [TR_TRCLUSTERFUSECFGHI_CORE4ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core4Enable_Data;
logic [TR_TRCLUSTERFUSECFGHI_CORE4ENABLE_WIDTH-1:0] CSR_TrClusterFuseCfgHi_F_Core4Enable_DataEff;
assign CSR_TrClusterFuseCfgHi_F_Core4Enable_DataEff = {reg_wr_data[0:0]};
assign CSR_TrClusterFuseCfgHi_F_Core4Enable_Data = (TR_TRCLUSTERFUSECFGHI_CORE4ENABLE_WIDTH'(update_value(64'(CSR_TrClusterFuseCfgHi_F_Core4Enable), 64'(CSR_TrClusterFuseCfgHi_F_Core4Enable_DataEff[0:0]), reg_wr_instr_type)));
assign CSR_TrClusterFuseCfgHi_F_Core4Enable_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRCLUSTERFUSECFGHI)))) & ~CSR_TrClusterFuseCfgHi_F_Lock;
generic_dff #(.WIDTH(TR_TRCLUSTERFUSECFGHI_CORE4ENABLE_WIDTH), .RESET_VALUE(0)) CSR_TrClusterFuseCfgHi_F_Core4Enable_ff   (.out(CSR_TrClusterFuseCfgHi_F_Core4Enable), .in(CSR_TrClusterFuseCfgHi_F_Core4Enable_Data), .en(CSR_TrClusterFuseCfgHi_F_Core4Enable_WrEn), .clk(clk), .rst_n(cold_resetn));

//Register: CSR_TRSCRATCHLO
logic                                           CSR_TrScratchLo_F_Data_WrEn;
logic [TR_TRSCRATCHLO_DATA_WIDTH          -1:0] CSR_TrScratchLo_F_Data_Data;
logic [TR_TRSCRATCHLO_DATA_WIDTH          -1:0] CSR_TrScratchLo_F_Data_DataEff;
assign CSR_TrScratchLo_F_Data_DataEff = {reg_wr_data[31:0]};
assign CSR_TrScratchLo_F_Data_Data = (TR_TRSCRATCHLO_DATA_WIDTH'(update_value(64'(CSR_TrScratchLo_F_Data), 64'(CSR_TrScratchLo_F_Data_DataEff[31:0]), reg_wr_instr_type)));
assign CSR_TrScratchLo_F_Data_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRSCRATCHLO))));
generic_dff #(.WIDTH(TR_TRSCRATCHLO_DATA_WIDTH), .RESET_VALUE(0)) CSR_TrScratchLo_F_Data_ff   (.out(CSR_TrScratchLo_F_Data), .in(CSR_TrScratchLo_F_Data_Data), .en(CSR_TrScratchLo_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRSCRATCHHI
logic                                           CSR_TrScratchHi_F_Data_WrEn;
logic [TR_TRSCRATCHHI_DATA_WIDTH          -1:0] CSR_TrScratchHi_F_Data_Data;
logic [TR_TRSCRATCHHI_DATA_WIDTH          -1:0] CSR_TrScratchHi_F_Data_DataEff;
assign CSR_TrScratchHi_F_Data_DataEff = {reg_wr_data[31:0]};
assign CSR_TrScratchHi_F_Data_Data = (TR_TRSCRATCHHI_DATA_WIDTH'(update_value(64'(CSR_TrScratchHi_F_Data), 64'(CSR_TrScratchHi_F_Data_DataEff[31:0]), reg_wr_instr_type)));
assign CSR_TrScratchHi_F_Data_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRSCRATCHHI))));
generic_dff #(.WIDTH(TR_TRSCRATCHHI_DATA_WIDTH), .RESET_VALUE(0)) CSR_TrScratchHi_F_Data_ff   (.out(CSR_TrScratchHi_F_Data), .in(CSR_TrScratchHi_F_Data_Data), .en(CSR_TrScratchHi_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRSCRATCHPADLO
logic                                           CSR_TrScratchpadLo_F_Data_WrEn;
logic [TR_TRSCRATCHPADLO_DATA_WIDTH       -1:0] CSR_TrScratchpadLo_F_Data_Data;
logic [TR_TRSCRATCHPADLO_DATA_WIDTH       -1:0] CSR_TrScratchpadLo_F_Data_DataEff;
assign CSR_TrScratchpadLo_F_Data_DataEff = {reg_wr_data[31:0]};
assign CSR_TrScratchpadLo_F_Data_Data = (TR_TRSCRATCHPADLO_DATA_WIDTH'(update_value(64'(CSR_TrScratchpadLo_F_Data), 64'(CSR_TrScratchpadLo_F_Data_DataEff[31:0]), reg_wr_instr_type)));
assign CSR_TrScratchpadLo_F_Data_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRSCRATCHPADLO))));
generic_dff #(.WIDTH(TR_TRSCRATCHPADLO_DATA_WIDTH), .RESET_VALUE(32'hEFEFEFEF)) CSR_TrScratchpadLo_F_Data_ff   (.out(CSR_TrScratchpadLo_F_Data), .in(CSR_TrScratchpadLo_F_Data_Data), .en(CSR_TrScratchpadLo_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//Register: CSR_TRSCRATCHPADHI
logic                                           CSR_TrScratchpadHi_F_Data_WrEn;
logic [TR_TRSCRATCHPADHI_DATA_WIDTH       -1:0] CSR_TrScratchpadHi_F_Data_Data;
logic [TR_TRSCRATCHPADHI_DATA_WIDTH       -1:0] CSR_TrScratchpadHi_F_Data_DataEff;
assign CSR_TrScratchpadHi_F_Data_DataEff = {reg_wr_data[31:0]};
assign CSR_TrScratchpadHi_F_Data_Data = (TR_TRSCRATCHPADHI_DATA_WIDTH'(update_value(64'(CSR_TrScratchpadHi_F_Data), 64'(CSR_TrScratchpadHi_F_Data_DataEff[31:0]), reg_wr_instr_type)));
assign CSR_TrScratchpadHi_F_Data_WrEn = (((reg_write & reg_wr_strb[0] & (reg_addr == ADDR_CSR_TRSCRATCHPADHI))));
generic_dff #(.WIDTH(TR_TRSCRATCHPADHI_DATA_WIDTH), .RESET_VALUE(32'hEFEFEFEF)) CSR_TrScratchpadHi_F_Data_ff   (.out(CSR_TrScratchpadHi_F_Data), .in(CSR_TrScratchpadHi_F_Data_Data), .en(CSR_TrScratchpadHi_F_Data_WrEn), .clk(clk), .rst_n(reset_n));

//------------------------------------------------------------------------------
// Register Reads
//------------------------------------------------------------------------------

// Construct register vectors
assign CSR_Trfunnelcontrol = {
    28'h0,
    CSR_Trfunnelcontrol_F_Trfunnelempty,
    1'h0,
    CSR_Trfunnelcontrol_F_Trfunnelenable,
    CSR_Trfunnelcontrol_F_Trfunnelactive
};
assign CSR_Trfunnelimpl = {
    20'h0,
    CSR_Trfunnelimpl_F_Trfunnelcomptype,
    CSR_Trfunnelimpl_F_Trfunnelverminor,
    CSR_Trfunnelimpl_F_Trfunnelvermajor
};
assign CSR_Trfunneldisinput = {
    16'h0,
    CSR_Trfunneldisinput_F_Trfunneldisinput
};
assign CSR_Trramcontrol = {
    23'h0,
    CSR_Trramcontrol_F_Trramstoponwrap,
    3'h0,
    CSR_Trramcontrol_F_Trrammode,
    CSR_Trramcontrol_F_Trramempty,
    1'h0,
    CSR_Trramcontrol_F_Trramenable,
    CSR_Trramcontrol_F_Trramactive
};
assign CSR_Trramimpl = {
    4'h0,
    CSR_Trramimpl_F_Trramvendorframelength,
    10'h0,
    CSR_Trramimpl_F_Trramhassmem,
    CSR_Trramimpl_F_Trramhassram,
    CSR_Trramimpl_F_Trramcomptype,
    CSR_Trramimpl_F_Trramverminor,
    CSR_Trramimpl_F_Trramvermajor
};
assign CSR_Trramstartlow = {
    CSR_Trramstartlow_F_Trramstartlow,
    CSR_Trramstartlow_F_Rsvd10
};
assign CSR_Trramstarthigh = {
    CSR_Trramstarthigh_F_Trramstarthigh
};
assign CSR_Trramlimitlow = {
    CSR_Trramlimitlow_F_Trramlimitlow,
    CSR_Trramlimitlow_F_Rsvd10
};
assign CSR_Trramlimithigh = {
    CSR_Trramlimithigh_F_Trramlimithigh
};
assign CSR_Trramwplow = {
    CSR_Trramwplow_F_Trramwplow,
    1'h0,
    CSR_Trramwplow_F_Trramwrap
};
assign CSR_Trramwphigh = {
    CSR_Trramwphigh_F_Trramwphigh
};
assign CSR_Trramrplow = {
    CSR_Trramrplow_F_Trramrplow,
    CSR_Trramrplow_F_Rsvd10
};
assign CSR_Trramrphigh = {
    CSR_Trramrphigh_F_Trramrphigh
};
assign CSR_Trramdata = {
    CSR_Trramdata_F_Trramdata
};
assign CSR_Trcustomramsmemlimitlow = {
    CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow,
    CSR_Trcustomramsmemlimitlow_F_Rsvd10
};
assign CSR_Trdstramcontrol = {
    23'h0,
    CSR_Trdstramcontrol_F_Trdstramstoponwrap,
    3'h0,
    CSR_Trdstramcontrol_F_Trdstrammode,
    CSR_Trdstramcontrol_F_Trdstramempty,
    1'h0,
    CSR_Trdstramcontrol_F_Trdstramenable,
    CSR_Trdstramcontrol_F_Trdstramactive
};
assign CSR_Trdstramimpl = {
    4'h0,
    CSR_Trdstramimpl_F_Trdstramvendorframelength,
    10'h0,
    CSR_Trdstramimpl_F_Trdstramhassmem,
    CSR_Trdstramimpl_F_Trdstramhassram,
    CSR_Trdstramimpl_F_Trdstramcomptype,
    CSR_Trdstramimpl_F_Trdstramverminor,
    CSR_Trdstramimpl_F_Trdstramvermajor
};
assign CSR_Trdstramstartlow = {
    CSR_Trdstramstartlow_F_Trdstramstartlow,
    CSR_Trdstramstartlow_F_Rsvd10
};
assign CSR_Trdstramstarthigh = {
    CSR_Trdstramstarthigh_F_Trdstramstarthigh
};
assign CSR_Trdstramlimitlow = {
    CSR_Trdstramlimitlow_F_Trdstramlimitlow,
    CSR_Trdstramlimitlow_F_Rsvd10
};
assign CSR_Trdstramlimithigh = {
    CSR_Trdstramlimithigh_F_Trdstramlimithigh
};
assign CSR_Trdstramwplow = {
    CSR_Trdstramwplow_F_Trdstramwplow,
    1'h0,
    CSR_Trdstramwplow_F_Trdstramwrap
};
assign CSR_Trdstramwphigh = {
    CSR_Trdstramwphigh_F_Trdstramwphigh
};
assign CSR_Trdstramrplow = {
    CSR_Trdstramrplow_F_Trdstramrplow,
    CSR_Trdstramrplow_F_Rsvd10
};
assign CSR_Trdstramrphigh = {
    CSR_Trdstramrphigh_F_Trdstramrphigh
};
assign CSR_Trdstramdata = {
    CSR_Trdstramdata_F_Trdstramdata
};
assign CSR_TrClusterFuseCfgLow = {
    CSR_TrClusterFuseCfgLow_F_Core3Vid,
    CSR_TrClusterFuseCfgLow_F_Core3Enable,
    CSR_TrClusterFuseCfgLow_F_Core2Vid,
    CSR_TrClusterFuseCfgLow_F_Core2Enable,
    CSR_TrClusterFuseCfgLow_F_Core1Vid,
    CSR_TrClusterFuseCfgLow_F_Core1Enable,
    CSR_TrClusterFuseCfgLow_F_Core0Vid,
    CSR_TrClusterFuseCfgLow_F_Core0Enable,
    CSR_TrClusterFuseCfgLow_F_Rsvd1512,
    CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable,
    CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled,
    CSR_TrClusterFuseCfgLow_F_Rsvd98,
    CSR_TrClusterFuseCfgLow_F_ScHarvestStrap
};
assign CSR_TrClusterFuseCfgHi = {
    CSR_TrClusterFuseCfgHi_F_Lock,
    CSR_TrClusterFuseCfgHi_F_Rsvd3022,
    CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable,
    CSR_TrClusterFuseCfgHi_F_DstEnable,
    CSR_TrClusterFuseCfgHi_F_TraceEnable,
    CSR_TrClusterFuseCfgHi_F_ClaEnable,
    CSR_TrClusterFuseCfgHi_F_DebugEnable,
    CSR_TrClusterFuseCfgHi_F_Core7Vid,
    CSR_TrClusterFuseCfgHi_F_Core7Enable,
    CSR_TrClusterFuseCfgHi_F_Core6Vid,
    CSR_TrClusterFuseCfgHi_F_Core6Enable,
    CSR_TrClusterFuseCfgHi_F_Core5Vid,
    CSR_TrClusterFuseCfgHi_F_Core5Enable,
    CSR_TrClusterFuseCfgHi_F_Core4Vid,
    CSR_TrClusterFuseCfgHi_F_Core4Enable
};
assign CSR_TrScratchLo = {
    CSR_TrScratchLo_F_Data
};
assign CSR_TrScratchHi = {
    CSR_TrScratchHi_F_Data
};
assign CSR_TrScratchpadLo = {
    CSR_TrScratchpadLo_F_Data
};
assign CSR_TrScratchpadHi = {
    CSR_TrScratchpadHi_F_Data
};

// Register reads
always_comb begin
    reg_prehit  = '0;
    reg_rd_data = '0;
    unique case (reg_addr)
        ADDR_CSR_TRFUNNELCONTROL                : begin reg_prehit.TrCsrTrfunnelcontrolHit = 1'b1; reg_rd_data = {CSR_Trfunnelcontrol}; end
        ADDR_CSR_TRFUNNELIMPL                   : begin reg_prehit.TrCsrTrfunnelimplHit = 1'b1; reg_rd_data = {CSR_Trfunnelimpl}; end
        ADDR_CSR_TRFUNNELDISINPUT               : begin reg_prehit.TrCsrTrfunneldisinputHit = 1'b1; reg_rd_data = {CSR_Trfunneldisinput}; end
        ADDR_CSR_TRRAMCONTROL                   : begin reg_prehit.TrCsrTrramcontrolHit = 1'b1; reg_rd_data = {CSR_Trramcontrol}; end
        ADDR_CSR_TRRAMIMPL                      : begin reg_prehit.TrCsrTrramimplHit = 1'b1; reg_rd_data = {CSR_Trramimpl}; end
        ADDR_CSR_TRRAMSTARTLOW                  : begin reg_prehit.TrCsrTrramstartlowHit = 1'b1; reg_rd_data = {CSR_Trramstartlow}; end
        ADDR_CSR_TRRAMSTARTHIGH                 : begin reg_prehit.TrCsrTrramstarthighHit = 1'b1; reg_rd_data = {CSR_Trramstarthigh}; end
        ADDR_CSR_TRRAMLIMITLOW                  : begin reg_prehit.TrCsrTrramlimitlowHit = 1'b1; reg_rd_data = {CSR_Trramlimitlow}; end
        ADDR_CSR_TRRAMLIMITHIGH                 : begin reg_prehit.TrCsrTrramlimithighHit = 1'b1; reg_rd_data = {CSR_Trramlimithigh}; end
        ADDR_CSR_TRRAMWPLOW                     : begin reg_prehit.TrCsrTrramwplowHit = 1'b1; reg_rd_data = {CSR_Trramwplow}; end
        ADDR_CSR_TRRAMWPHIGH                    : begin reg_prehit.TrCsrTrramwphighHit = 1'b1; reg_rd_data = {CSR_Trramwphigh}; end
        ADDR_CSR_TRRAMRPLOW                     : begin reg_prehit.TrCsrTrramrplowHit = 1'b1; reg_rd_data = {CSR_Trramrplow}; end
        ADDR_CSR_TRRAMRPHIGH                    : begin reg_prehit.TrCsrTrramrphighHit = 1'b1; reg_rd_data = {CSR_Trramrphigh}; end
        ADDR_CSR_TRRAMDATA                      : begin reg_prehit.TrCsrTrramdataHit = 1'b1; reg_rd_data = {CSR_Trramdata}; end
        ADDR_CSR_TRCUSTOMRAMSMEMLIMITLOW        : begin reg_prehit.TrCsrTrcustomramsmemlimitlowHit = 1'b1; reg_rd_data = {CSR_Trcustomramsmemlimitlow}; end
        ADDR_CSR_TRDSTRAMCONTROL                : begin reg_prehit.TrCsrTrdstramcontrolHit = 1'b1; reg_rd_data = {CSR_Trdstramcontrol}; end
        ADDR_CSR_TRDSTRAMIMPL                   : begin reg_prehit.TrCsrTrdstramimplHit = 1'b1; reg_rd_data = {CSR_Trdstramimpl}; end
        ADDR_CSR_TRDSTRAMSTARTLOW               : begin reg_prehit.TrCsrTrdstramstartlowHit = 1'b1; reg_rd_data = {CSR_Trdstramstartlow}; end
        ADDR_CSR_TRDSTRAMSTARTHIGH              : begin reg_prehit.TrCsrTrdstramstarthighHit = 1'b1; reg_rd_data = {CSR_Trdstramstarthigh}; end
        ADDR_CSR_TRDSTRAMLIMITLOW               : begin reg_prehit.TrCsrTrdstramlimitlowHit = 1'b1; reg_rd_data = {CSR_Trdstramlimitlow}; end
        ADDR_CSR_TRDSTRAMLIMITHIGH              : begin reg_prehit.TrCsrTrdstramlimithighHit = 1'b1; reg_rd_data = {CSR_Trdstramlimithigh}; end
        ADDR_CSR_TRDSTRAMWPLOW                  : begin reg_prehit.TrCsrTrdstramwplowHit = 1'b1; reg_rd_data = {CSR_Trdstramwplow}; end
        ADDR_CSR_TRDSTRAMWPHIGH                 : begin reg_prehit.TrCsrTrdstramwphighHit = 1'b1; reg_rd_data = {CSR_Trdstramwphigh}; end
        ADDR_CSR_TRDSTRAMRPLOW                  : begin reg_prehit.TrCsrTrdstramrplowHit = 1'b1; reg_rd_data = {CSR_Trdstramrplow}; end
        ADDR_CSR_TRDSTRAMRPHIGH                 : begin reg_prehit.TrCsrTrdstramrphighHit = 1'b1; reg_rd_data = {CSR_Trdstramrphigh}; end
        ADDR_CSR_TRDSTRAMDATA                   : begin reg_prehit.TrCsrTrdstramdataHit = 1'b1; reg_rd_data = {CSR_Trdstramdata}; end
        ADDR_CSR_TRCLUSTERFUSECFGLOW            : begin reg_prehit.TrCsrTrclusterfusecfglowHit = 1'b1; reg_rd_data = {CSR_TrClusterFuseCfgLow}; end
        ADDR_CSR_TRCLUSTERFUSECFGHI             : begin reg_prehit.TrCsrTrclusterfusecfghiHit = 1'b1; reg_rd_data = {CSR_TrClusterFuseCfgHi}; end
        ADDR_CSR_TRSCRATCHLO                    : begin reg_prehit.TrCsrTrscratchloHit = 1'b1; reg_rd_data = {CSR_TrScratchLo}; end
        ADDR_CSR_TRSCRATCHHI                    : begin reg_prehit.TrCsrTrscratchhiHit = 1'b1; reg_rd_data = {CSR_TrScratchHi}; end
        ADDR_CSR_TRSCRATCHPADLO                 : begin reg_prehit.TrCsrTrscratchpadloHit = 1'b1; reg_rd_data = {CSR_TrScratchpadLo}; end
        ADDR_CSR_TRSCRATCHPADHI                 : begin reg_prehit.TrCsrTrscratchpadhiHit = 1'b1; reg_rd_data = {CSR_TrScratchpadHi}; end
        default:  begin
            reg_prehit  = '0;
            reg_rd_data = '0;
        end
    endcase
end

assign reg_hit = reg_read & |reg_prehit;

// Write broadcast
always_comb begin
    unique case (reg_addr_d1)
        ADDR_CSR_TRFUNNELCONTROL                : begin reg_rd_data_d1 = {CSR_Trfunnelcontrol}; end
        ADDR_CSR_TRFUNNELIMPL                   : begin reg_rd_data_d1 = {CSR_Trfunnelimpl}; end
        ADDR_CSR_TRFUNNELDISINPUT               : begin reg_rd_data_d1 = {CSR_Trfunneldisinput}; end
        ADDR_CSR_TRRAMCONTROL                   : begin reg_rd_data_d1 = {CSR_Trramcontrol}; end
        ADDR_CSR_TRRAMIMPL                      : begin reg_rd_data_d1 = {CSR_Trramimpl}; end
        ADDR_CSR_TRRAMSTARTLOW                  : begin reg_rd_data_d1 = {CSR_Trramstartlow}; end
        ADDR_CSR_TRRAMSTARTHIGH                 : begin reg_rd_data_d1 = {CSR_Trramstarthigh}; end
        ADDR_CSR_TRRAMLIMITLOW                  : begin reg_rd_data_d1 = {CSR_Trramlimitlow}; end
        ADDR_CSR_TRRAMLIMITHIGH                 : begin reg_rd_data_d1 = {CSR_Trramlimithigh}; end
        ADDR_CSR_TRRAMWPLOW                     : begin reg_rd_data_d1 = {CSR_Trramwplow}; end
        ADDR_CSR_TRRAMWPHIGH                    : begin reg_rd_data_d1 = {CSR_Trramwphigh}; end
        ADDR_CSR_TRRAMRPLOW                     : begin reg_rd_data_d1 = {CSR_Trramrplow}; end
        ADDR_CSR_TRRAMRPHIGH                    : begin reg_rd_data_d1 = {CSR_Trramrphigh}; end
        ADDR_CSR_TRRAMDATA                      : begin reg_rd_data_d1 = {CSR_Trramdata}; end
        ADDR_CSR_TRCUSTOMRAMSMEMLIMITLOW        : begin reg_rd_data_d1 = {CSR_Trcustomramsmemlimitlow}; end
        ADDR_CSR_TRDSTRAMCONTROL                : begin reg_rd_data_d1 = {CSR_Trdstramcontrol}; end
        ADDR_CSR_TRDSTRAMIMPL                   : begin reg_rd_data_d1 = {CSR_Trdstramimpl}; end
        ADDR_CSR_TRDSTRAMSTARTLOW               : begin reg_rd_data_d1 = {CSR_Trdstramstartlow}; end
        ADDR_CSR_TRDSTRAMSTARTHIGH              : begin reg_rd_data_d1 = {CSR_Trdstramstarthigh}; end
        ADDR_CSR_TRDSTRAMLIMITLOW               : begin reg_rd_data_d1 = {CSR_Trdstramlimitlow}; end
        ADDR_CSR_TRDSTRAMLIMITHIGH              : begin reg_rd_data_d1 = {CSR_Trdstramlimithigh}; end
        ADDR_CSR_TRDSTRAMWPLOW                  : begin reg_rd_data_d1 = {CSR_Trdstramwplow}; end
        ADDR_CSR_TRDSTRAMWPHIGH                 : begin reg_rd_data_d1 = {CSR_Trdstramwphigh}; end
        ADDR_CSR_TRDSTRAMRPLOW                  : begin reg_rd_data_d1 = {CSR_Trdstramrplow}; end
        ADDR_CSR_TRDSTRAMRPHIGH                 : begin reg_rd_data_d1 = {CSR_Trdstramrphigh}; end
        ADDR_CSR_TRDSTRAMDATA                   : begin reg_rd_data_d1 = {CSR_Trdstramdata}; end
        ADDR_CSR_TRCLUSTERFUSECFGLOW            : begin reg_rd_data_d1 = {CSR_TrClusterFuseCfgLow}; end
        ADDR_CSR_TRCLUSTERFUSECFGHI             : begin reg_rd_data_d1 = {CSR_TrClusterFuseCfgHi}; end
        ADDR_CSR_TRSCRATCHLO                    : begin reg_rd_data_d1 = {CSR_TrScratchLo}; end
        ADDR_CSR_TRSCRATCHHI                    : begin reg_rd_data_d1 = {CSR_TrScratchHi}; end
        ADDR_CSR_TRSCRATCHPADLO                 : begin reg_rd_data_d1 = {CSR_TrScratchpadLo}; end
        ADDR_CSR_TRSCRATCHPADHI                 : begin reg_rd_data_d1 = {CSR_TrScratchpadHi}; end
        default:  begin
            reg_rd_data_d1 = '0;
        end
    endcase
end

//------------------------------------------------------------------------------
// Outputs
//------------------------------------------------------------------------------

assign CsrWrReady = reg_wr_ready;

if (FLOP_RD_DATA) begin : flop_rd_data
    generic_dff #(.WIDTH(1) , .RESET_VALUE(0)) Csr_Hit_ff    (.out(CsrHit)   , .in(reg_hit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(TR_NUM_REGISTERS) , .RESET_VALUE(0)) Csr_Hit_List_ff    (.out(CsrHitList)   , .in(reg_prehit)    , .en(reg_cs | CsrHit), .clk(clk), .rst_n(reset_n));
    generic_dff #(.WIDTH(32), .RESET_VALUE(0)) Csr_RdData_ff (.out(CsrRdData), .in(reg_rd_data), .en(reg_cs), .clk(clk), .rst_n(reset_n));
end else begin
    assign CsrHit     = reg_hit;
    assign CsrHitList = reg_prehit;
    assign CsrRdData  = reg_rd_data;
end

assign CsrUpdateEn                              = reg_write_d1;
assign CsrUpdateAddr                            = reg_addr_d1;
assign CsrUpdateData                            = reg_rd_data_d1;

assign TrCsrTrfunnelcontrol.Trfunnelempty       = CSR_Trfunnelcontrol_F_Trfunnelempty;
assign TrCsrTrfunnelcontrol.Trfunnelenable      = CSR_Trfunnelcontrol_F_Trfunnelenable;
assign TrCsrTrfunnelcontrol.Trfunnelactive      = CSR_Trfunnelcontrol_F_Trfunnelactive;
assign TrCsrTrfunnelimpl.Trfunnelcomptype       = CSR_Trfunnelimpl_F_Trfunnelcomptype;
assign TrCsrTrfunnelimpl.Trfunnelverminor       = CSR_Trfunnelimpl_F_Trfunnelverminor;
assign TrCsrTrfunnelimpl.Trfunnelvermajor       = CSR_Trfunnelimpl_F_Trfunnelvermajor;
assign TrCsrTrfunneldisinput.Trfunneldisinput   = CSR_Trfunneldisinput_F_Trfunneldisinput;
assign TrCsrTrramcontrol.Trramstoponwrap        = CSR_Trramcontrol_F_Trramstoponwrap;
assign TrCsrTrramcontrol.Trrammode              = CSR_Trramcontrol_F_Trrammode;
assign TrCsrTrramcontrol.Trramempty             = CSR_Trramcontrol_F_Trramempty;
assign TrCsrTrramcontrol.Trramenable            = CSR_Trramcontrol_F_Trramenable;
assign TrCsrTrramcontrol.Trramactive            = CSR_Trramcontrol_F_Trramactive;
assign TrCsrTrramimpl.Trramvendorframelength    = CSR_Trramimpl_F_Trramvendorframelength;
assign TrCsrTrramimpl.Trramhassmem              = CSR_Trramimpl_F_Trramhassmem;
assign TrCsrTrramimpl.Trramhassram              = CSR_Trramimpl_F_Trramhassram;
assign TrCsrTrramimpl.Trramcomptype             = CSR_Trramimpl_F_Trramcomptype;
assign TrCsrTrramimpl.Trramverminor             = CSR_Trramimpl_F_Trramverminor;
assign TrCsrTrramimpl.Trramvermajor             = CSR_Trramimpl_F_Trramvermajor;
assign TrCsrTrramstartlow.Trramstartlow         = CSR_Trramstartlow_F_Trramstartlow;
assign TrCsrTrramstartlow.Rsvd10                = CSR_Trramstartlow_F_Rsvd10;
assign TrCsrTrramstarthigh.Trramstarthigh       = CSR_Trramstarthigh_F_Trramstarthigh;
assign TrCsrTrramlimitlow.Trramlimitlow         = CSR_Trramlimitlow_F_Trramlimitlow;
assign TrCsrTrramlimitlow.Rsvd10                = CSR_Trramlimitlow_F_Rsvd10;
assign TrCsrTrramlimithigh.Trramlimithigh       = CSR_Trramlimithigh_F_Trramlimithigh;
assign TrCsrTrramwplow.Trramwplow               = CSR_Trramwplow_F_Trramwplow;
assign TrCsrTrramwplow.Trramwrap                = CSR_Trramwplow_F_Trramwrap;
assign TrCsrTrramwphigh.Trramwphigh             = CSR_Trramwphigh_F_Trramwphigh;
assign TrCsrTrramrplow.Trramrplow               = CSR_Trramrplow_F_Trramrplow;
assign TrCsrTrramrplow.Rsvd10                   = CSR_Trramrplow_F_Rsvd10;
assign TrCsrTrramrphigh.Trramrphigh             = CSR_Trramrphigh_F_Trramrphigh;
assign TrCsrTrramdata.Trramdata                 = CSR_Trramdata_F_Trramdata;
assign TrCsrTrcustomramsmemlimitlow.Trcustomramsmemlimitlow = CSR_Trcustomramsmemlimitlow_F_Trcustomramsmemlimitlow;
assign TrCsrTrcustomramsmemlimitlow.Rsvd10      = CSR_Trcustomramsmemlimitlow_F_Rsvd10;
assign TrCsrTrdstramcontrol.Trdstramstoponwrap  = CSR_Trdstramcontrol_F_Trdstramstoponwrap;
assign TrCsrTrdstramcontrol.Trdstrammode        = CSR_Trdstramcontrol_F_Trdstrammode;
assign TrCsrTrdstramcontrol.Trdstramempty       = CSR_Trdstramcontrol_F_Trdstramempty;
assign TrCsrTrdstramcontrol.Trdstramenable      = CSR_Trdstramcontrol_F_Trdstramenable;
assign TrCsrTrdstramcontrol.Trdstramactive      = CSR_Trdstramcontrol_F_Trdstramactive;
assign TrCsrTrdstramimpl.Trdstramvendorframelength = CSR_Trdstramimpl_F_Trdstramvendorframelength;
assign TrCsrTrdstramimpl.Trdstramhassmem        = CSR_Trdstramimpl_F_Trdstramhassmem;
assign TrCsrTrdstramimpl.Trdstramhassram        = CSR_Trdstramimpl_F_Trdstramhassram;
assign TrCsrTrdstramimpl.Trdstramcomptype       = CSR_Trdstramimpl_F_Trdstramcomptype;
assign TrCsrTrdstramimpl.Trdstramverminor       = CSR_Trdstramimpl_F_Trdstramverminor;
assign TrCsrTrdstramimpl.Trdstramvermajor       = CSR_Trdstramimpl_F_Trdstramvermajor;
assign TrCsrTrdstramstartlow.Trdstramstartlow   = CSR_Trdstramstartlow_F_Trdstramstartlow;
assign TrCsrTrdstramstartlow.Rsvd10             = CSR_Trdstramstartlow_F_Rsvd10;
assign TrCsrTrdstramstarthigh.Trdstramstarthigh = CSR_Trdstramstarthigh_F_Trdstramstarthigh;
assign TrCsrTrdstramlimitlow.Trdstramlimitlow   = CSR_Trdstramlimitlow_F_Trdstramlimitlow;
assign TrCsrTrdstramlimitlow.Rsvd10             = CSR_Trdstramlimitlow_F_Rsvd10;
assign TrCsrTrdstramlimithigh.Trdstramlimithigh = CSR_Trdstramlimithigh_F_Trdstramlimithigh;
assign TrCsrTrdstramwplow.Trdstramwplow         = CSR_Trdstramwplow_F_Trdstramwplow;
assign TrCsrTrdstramwplow.Trdstramwrap          = CSR_Trdstramwplow_F_Trdstramwrap;
assign TrCsrTrdstramwphigh.Trdstramwphigh       = CSR_Trdstramwphigh_F_Trdstramwphigh;
assign TrCsrTrdstramrplow.Trdstramrplow         = CSR_Trdstramrplow_F_Trdstramrplow;
assign TrCsrTrdstramrplow.Rsvd10                = CSR_Trdstramrplow_F_Rsvd10;
assign TrCsrTrdstramrphigh.Trdstramrphigh       = CSR_Trdstramrphigh_F_Trdstramrphigh;
assign TrCsrTrdstramdata.Trdstramdata           = CSR_Trdstramdata_F_Trdstramdata;
assign TrCsrTrclusterfusecfglow.Core3Vid        = CSR_TrClusterFuseCfgLow_F_Core3Vid;
assign TrCsrTrclusterfusecfglow.Core3Enable     = CSR_TrClusterFuseCfgLow_F_Core3Enable;
assign TrCsrTrclusterfusecfglow.Core2Vid        = CSR_TrClusterFuseCfgLow_F_Core2Vid;
assign TrCsrTrclusterfusecfglow.Core2Enable     = CSR_TrClusterFuseCfgLow_F_Core2Enable;
assign TrCsrTrclusterfusecfglow.Core1Vid        = CSR_TrClusterFuseCfgLow_F_Core1Vid;
assign TrCsrTrclusterfusecfglow.Core1Enable     = CSR_TrClusterFuseCfgLow_F_Core1Enable;
assign TrCsrTrclusterfusecfglow.Core0Vid        = CSR_TrClusterFuseCfgLow_F_Core0Vid;
assign TrCsrTrclusterfusecfglow.Core0Enable     = CSR_TrClusterFuseCfgLow_F_Core0Enable;
assign TrCsrTrclusterfusecfglow.Rsvd1512        = CSR_TrClusterFuseCfgLow_F_Rsvd1512;
assign TrCsrTrclusterfusecfglow.IoCoherencyDisable = CSR_TrClusterFuseCfgLow_F_IoCoherencyDisable;
assign TrCsrTrclusterfusecfglow.ExportRestrictionEnabled = CSR_TrClusterFuseCfgLow_F_ExportRestrictionEnabled;
assign TrCsrTrclusterfusecfglow.Rsvd98          = CSR_TrClusterFuseCfgLow_F_Rsvd98;
assign TrCsrTrclusterfusecfglow.ScHarvestStrap  = CSR_TrClusterFuseCfgLow_F_ScHarvestStrap;
assign TrCsrTrclusterfusecfghi.Lock             = CSR_TrClusterFuseCfgHi_F_Lock;
assign TrCsrTrclusterfusecfghi.Rsvd3022         = CSR_TrClusterFuseCfgHi_F_Rsvd3022;
assign TrCsrTrclusterfusecfghi.Jtag2UarchEnable = CSR_TrClusterFuseCfgHi_F_Jtag2UarchEnable;
assign TrCsrTrclusterfusecfghi.DstEnable        = CSR_TrClusterFuseCfgHi_F_DstEnable;
assign TrCsrTrclusterfusecfghi.TraceEnable      = CSR_TrClusterFuseCfgHi_F_TraceEnable;
assign TrCsrTrclusterfusecfghi.ClaEnable        = CSR_TrClusterFuseCfgHi_F_ClaEnable;
assign TrCsrTrclusterfusecfghi.DebugEnable      = CSR_TrClusterFuseCfgHi_F_DebugEnable;
assign TrCsrTrclusterfusecfghi.Core7Vid         = CSR_TrClusterFuseCfgHi_F_Core7Vid;
assign TrCsrTrclusterfusecfghi.Core7Enable      = CSR_TrClusterFuseCfgHi_F_Core7Enable;
assign TrCsrTrclusterfusecfghi.Core6Vid         = CSR_TrClusterFuseCfgHi_F_Core6Vid;
assign TrCsrTrclusterfusecfghi.Core6Enable      = CSR_TrClusterFuseCfgHi_F_Core6Enable;
assign TrCsrTrclusterfusecfghi.Core5Vid         = CSR_TrClusterFuseCfgHi_F_Core5Vid;
assign TrCsrTrclusterfusecfghi.Core5Enable      = CSR_TrClusterFuseCfgHi_F_Core5Enable;
assign TrCsrTrclusterfusecfghi.Core4Vid         = CSR_TrClusterFuseCfgHi_F_Core4Vid;
assign TrCsrTrclusterfusecfghi.Core4Enable      = CSR_TrClusterFuseCfgHi_F_Core4Enable;
assign TrCsrTrscratchlo.Data                    = CSR_TrScratchLo_F_Data;
assign TrCsrTrscratchhi.Data                    = CSR_TrScratchHi_F_Data;
assign TrCsrTrscratchpadlo.Data                 = CSR_TrScratchpadLo_F_Data;
assign TrCsrTrscratchpadhi.Data                 = CSR_TrScratchpadHi_F_Data;

//------------------------------------------------------------------------------
// update_value
// update register value based on input instr_type.
// instr_type: 2'b01 : op1 data is mask to set bits
// instr_type: 2'b10 : op1 data is mask to clear bits
// instr_type: othes : op1 data is written to register
//------------------------------------------------------------------------------
function automatic [63:0] update_value;
input [63:0] old_value;
input [63:0] op1;
input  [1:0] instr_type;
  begin
    if (instr_type == 2'b01)
       update_value = old_value | op1;
    else if (instr_type == 2'b10)
       update_value = old_value & ~op1;
    else
       update_value = op1;
  end
endfunction


endmodule
// Local Variables:
// verilog-library-directories:(".")
// verilog-library-extensions:(".sv" ".h" ".v")
// verilog-typedef-regexp: "_[eus]$"
// End:



